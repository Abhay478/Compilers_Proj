Terminals which are not used

   GT
   LT


State 38 conflicts: 2 shift/reduce
State 40 conflicts: 3 reduce/reduce
State 69 conflicts: 1 shift/reduce, 1 reduce/reduce
State 73 conflicts: 2 shift/reduce
State 76 conflicts: 1 shift/reduce


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional
    8          | switch_case
    9          | loop_stmt
   10          | KW_PRINT '(' print_param_list ')' ';'
   11          | KW_BREAK ';'
   12          | KW_CONTINUE ';'
   13          | archetype_claim

   14 print_param_list: LIT_STR
   15                 | LIT_STR ',' print_param_list
   16                 | expression
   17                 | expression ',' print_param_list

   18 var: IDENT
   19    | IDENT '.' IDENT

   20 field_data_type: /* empty */
   21                | KW_BIG_RATIONAL
   22                | KW_COMPLEX

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   24                | KW_SYMMETRIC '<' LIT_INT '>'
   25                | KW_ALTERNATING '<' LIT_INT '>'
   26                | KW_DIHEDRAL '<' LIT_INT '>'
   27                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   28 ring_data_type: KW_BIGINT
   29               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   30               | KW_POLYNOMIAL '<' IDENT '>'

   31 space_data_type: KW_VEC '<' IDENT '>'
   32                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   33 declaration: KW_LET var ':' PRIMITIVE_DTYPE A
   34            | KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   35            | KW_LET var ':' IDENT A
   36            | KW_LET var ':' group_data_type A
   37            | KW_LET var ':' ring_data_type A
   38            | KW_LET var ':' field_data_type A
   39            | KW_LET var ':' space_data_type A

   40 A: '=' expression
   41  | epsilon
   42  | ',' var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   43  | ',' var ':' PRIMITIVE_DTYPE A
   44  | ',' var ':' IDENT A
   45  | ',' var ':' group_data_type A
   46  | ',' var ':' ring_data_type A
   47  | ',' var ':' field_data_type A
   48  | ',' var ':' space_data_type A

   49 assignment: var '=' expression
   50           | array_access '=' expression

   51 expression: arithmetic_expr
   52           | logical_expr
   53           | array_decl
   54           | var '@' var

   55 arithmetic_expr: arithmetic_expr '+' term
   56                | arithmetic_expr '-' term
   57                | term

   58 term: term '*' factor
   59     | term '/' factor
   60     | term '%' factor
   61     | factor

   62 factor: var
   63       | '(' arithmetic_expr ')'
   64       | '-' factor
   65       | constant
   66       | call_stmt
   67       | array_access
   68       | unary_operation

   69 constant: LIT_CHAR
   70         | LIT_FLOAT
   71         | LIT_INT
   72         | LIT_STR

   73 logical_expr: B logical_op logical_expr
   74             | B
   75             | LOGICAL_NOT logical_expr

   76 B: arithmetic_expr
   77  | '(' logical_expr ')'
   78  | KW_TRUE
   79  | KW_FALSE

   80 logical_op: '>'
   81           | '<'
   82           | GTEQ
   83           | LTEQ
   84           | EQ
   85           | NEQ
   86           | LOGICAL_AND
   87           | LOGICAL_OR

   88 return_stmt: KW_RETURN expression

   89 call_stmt_standalone: var '(' pass_param_list ')' ';'
   90                     | var '(' ')' ';'

   91 call_stmt: var '(' pass_param_list ')'
   92          | var '(' ')'

   93 pass_param_list: expression ',' pass_param_list
   94                | expression

   95 unary_operation: var '+' '+'
   96                | var '-' '-'

   97 array_access: var C

   98 C: '[' LIT_INT ']' C
   99  | '[' LIT_INT ']'

  100 array_decl: '[' array_list ']'

  101 array_list: constant ',' array_list
  102           | constant

  103 if_else_conditional: KW_IF '(' logical_expr ')' D

  104 D: '{' statements '}'
  105  | '{' statements '}' KW_ELSE if_else_conditional
  106  | '{' statements '}' KW_ELSE '{' statements '}'

  107 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}'
  108          | KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
  109          | KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}'
  110          | KW_FOR IDENT KW_IN IDENT '{' statements '}'

  111 V: unary_operation
  112  | epsilon

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' expression ')' '{' switch_case_blocks '}'

  115 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks
  116                   | KW_CASE LIT_INT ':' statements switch_case_blocks
  117                   | KW_CASE LIT_FLOAT ':' statements switch_case_blocks
  118                   | epsilon

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  120                | KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  121                | KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  122                | KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' '>' '{' statements '}'

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' '>' '{' statements '}'

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' '>' '{' statements '}'

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' '>' '{' statements '}'

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' '>' '{' statements '}'

  128 epsilon: /* empty */


Terminals, with rules where they appear

$end (0) 0
'%' (37) 60
'(' (40) 10 63 77 89 90 91 92 103 107 108 109 113 114 122 123 124 125
    126 127
')' (41) 10 63 77 89 90 91 92 103 107 108 109 113 114 122 123 124 125
    126 127
'*' (42) 58 124
'+' (43) 55 95 123
',' (44) 15 17 27 29 42 43 44 45 46 47 48 93 101
'-' (45) 56 64 96 126
'.' (46) 19
'/' (47) 59
':' (58) 33 34 35 36 37 38 39 42 43 44 45 46 47 48 113 115 116 117
';' (59) 3 4 6 10 11 12 89 90 108 109 119 120 121 122
'<' (60) 23 24 25 26 27 29 30 31 32 34 42 81
'=' (61) 40 49 50 122 123 124 125 126 127
'>' (62) 23 24 25 26 27 29 30 31 32 34 42 80 123 124 125 126 127
'@' (64) 54
'[' (91) 98 99 100
']' (93) 98 99 100
'{' (123) 104 105 106 107 108 109 110 113 114 119 120 121 122 123 124
    125 126 127
'}' (125) 104 105 106 107 108 109 110 113 114 119 120 121 122 123 124
    125 126 127
'~' (126) 127
error (256)
KW_CLAIM (258) 119 120 121 122
KW_IS (259) 119 120 121 122
KW_GROUP (260) 119
KW_RING (261) 120
KW_FIELD (262) 121 122
KW_SPACE (263) 122
KW_PRINT (264) 10
KW_LET (265) 33 34 35 36 37 38 39
KW_RETURN (266) 88
KW_IF (267) 103
KW_ELSE (268) 105 106
KW_WHILE (269) 107
KW_FOR (270) 108 109 110
KW_IN (271) 110
KW_SWITCH (272) 113 114
KW_CASE (273) 115 116 117
KW_DEFAULT (274) 113
KW_BREAK (275) 11
KW_CONTINUE (276) 12
KW_CYCLIC (277) 23
KW_BIG_RATIONAL (278) 21
KW_COMPLEX (279) 22
KW_SYMMETRIC (280) 24
KW_ALTERNATING (281) 25
KW_DIHEDRAL (282) 26
KW_INV_MAT (283) 27
KW_BIGINT (284) 28
KW_MATRIX (285) 29
KW_POLYNOMIAL (286) 30
KW_VEC (287) 31 32
KW_BUF (288) 34 42
IDENT (289) 18 19 27 29 30 31 35 44 110 119 120 121 122 123 124 125
    126 127
PRIMITIVE_DTYPE (290) 32 33 34 42 43
LIT_INT (291) 23 24 25 26 27 29 71 98 99 116 125
LIT_FLOAT (292) 70 117
LIT_STR (293) 14 15 72
LIT_CHAR (294) 69 115
LOGICAL_AND (295) 86
LOGICAL_OR (296) 87
LOGICAL_NOT (297) 75
EQ (298) 84
NEQ (299) 85
GT (300)
LT (301)
GTEQ (302) 82
LTEQ (303) 83
KW_TRUE (304) 78
KW_FALSE (305) 79


Nonterminals, with rules where they appear

$accept (71)
    on left: 0
statements (72)
    on left: 1 2, on right: 0 1 104 105 106 107 108 109 110 113 115
    116 117 123 124 125 126 127
statement (73)
    on left: 3 4 5 6 7 8 9 10 11 12 13, on right: 1
print_param_list (74)
    on left: 14 15 16 17, on right: 10 15 17
var (75)
    on left: 18 19, on right: 33 34 35 36 37 38 39 42 43 44 45 46 47
    48 49 54 62 89 90 91 92 95 96 97
field_data_type (76)
    on left: 20 21 22, on right: 38 47
group_data_type (77)
    on left: 23 24 25 26 27, on right: 36 45
ring_data_type (78)
    on left: 28 29 30, on right: 37 46
space_data_type (79)
    on left: 31 32, on right: 39 48
declaration (80)
    on left: 33 34 35 36 37 38 39, on right: 3 109
A (81)
    on left: 40 41 42 43 44 45 46 47 48, on right: 33 34 35 36 37 38
    39 42 43 44 45 46 47 48
assignment (82)
    on left: 49 50, on right: 4 108
expression (83)
    on left: 51 52 53 54, on right: 16 17 40 49 50 88 93 94 113 114
arithmetic_expr (84)
    on left: 55 56 57, on right: 51 55 56 63 76
term (85)
    on left: 58 59 60 61, on right: 55 56 57 58 59 60
factor (86)
    on left: 62 63 64 65 66 67 68, on right: 58 59 60 61 64
constant (87)
    on left: 69 70 71 72, on right: 65 101 102
logical_expr (88)
    on left: 73 74 75, on right: 52 73 75 77 103 107 108 109
B (89)
    on left: 76 77 78 79, on right: 73 74
logical_op (90)
    on left: 80 81 82 83 84 85 86 87, on right: 73
return_stmt (91)
    on left: 88, on right: 6
call_stmt_standalone (92)
    on left: 89 90, on right: 5
call_stmt (93)
    on left: 91 92, on right: 66
pass_param_list (94)
    on left: 93 94, on right: 89 91 93
unary_operation (95)
    on left: 95 96, on right: 68 111
array_access (96)
    on left: 97, on right: 50 67
C (97)
    on left: 98 99, on right: 97 98
array_decl (98)
    on left: 100, on right: 53
array_list (99)
    on left: 101 102, on right: 100 101
if_else_conditional (100)
    on left: 103, on right: 7 105
D (101)
    on left: 104 105 106, on right: 103
loop_stmt (102)
    on left: 107 108 109 110, on right: 9
V (103)
    on left: 111 112, on right: 108 109
switch_case (104)
    on left: 113 114, on right: 8
switch_case_blocks (105)
    on left: 115 116 117 118, on right: 113 114 115 116 117
archetype_claim (106)
    on left: 119 120 121 122, on right: 13
group_closure_rule (107)
    on left: 123, on right: 119 122
ring_closure_rule (108)
    on left: 124, on right: 120 122
identity_rule (109)
    on left: 125, on right: 119 120 122
group_inverse_rule (110)
    on left: 126, on right: 119 122
field_inverse_rule (111)
    on left: 127, on right: 121
epsilon (112)
    on left: 128, on right: 2 41 112 118


state 0

    0 $accept: . statements $end

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 12
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 1

  119 archetype_claim: KW_CLAIM . IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  120                | KW_CLAIM . IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  121                | KW_CLAIM . IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  122                | KW_CLAIM . IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    IDENT  shift, and go to state 25


state 2

   10 statement: KW_PRINT . '(' print_param_list ')' ';'

    '('  shift, and go to state 26


state 3

   33 declaration: KW_LET . var ':' PRIMITIVE_DTYPE A
   34            | KW_LET . var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   35            | KW_LET . var ':' IDENT A
   36            | KW_LET . var ':' group_data_type A
   37            | KW_LET . var ':' ring_data_type A
   38            | KW_LET . var ':' field_data_type A
   39            | KW_LET . var ':' space_data_type A

    IDENT  shift, and go to state 11

    var  go to state 27


state 4

   88 return_stmt: KW_RETURN . expression

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 39
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 5

  103 if_else_conditional: KW_IF . '(' logical_expr ')' D

    '('  shift, and go to state 50


state 6

  107 loop_stmt: KW_WHILE . '(' logical_expr ')' '{' statements '}'

    '('  shift, and go to state 51


state 7

  108 loop_stmt: KW_FOR . '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
  109          | KW_FOR . '(' declaration ';' logical_expr ';' V ')' '{' statements '}'
  110          | KW_FOR . IDENT KW_IN IDENT '{' statements '}'

    IDENT  shift, and go to state 52
    '('    shift, and go to state 53


state 8

  113 switch_case: KW_SWITCH . '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH . '(' expression ')' '{' switch_case_blocks '}'

    '('  shift, and go to state 54


state 9

   11 statement: KW_BREAK . ';'

    ';'  shift, and go to state 55


state 10

   12 statement: KW_CONTINUE . ';'

    ';'  shift, and go to state 56


state 11

   18 var: IDENT .
   19    | IDENT . '.' IDENT

    '.'  shift, and go to state 57

    $default  reduce using rule 18 (var)


state 12

    0 $accept: statements . $end

    $end  shift, and go to state 58


state 13

    1 statements: statement . statements

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 59
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 14

   49 assignment: var . '=' expression
   89 call_stmt_standalone: var . '(' pass_param_list ')' ';'
   90                     | var . '(' ')' ';'
   97 array_access: var . C

    '('  shift, and go to state 60
    '='  shift, and go to state 61
    '['  shift, and go to state 62

    C  go to state 63


state 15

    3 statement: declaration . ';'

    ';'  shift, and go to state 64


state 16

    4 statement: assignment . ';'

    ';'  shift, and go to state 65


state 17

    6 statement: return_stmt . ';'

    ';'  shift, and go to state 66


state 18

    5 statement: call_stmt_standalone .

    $default  reduce using rule 5 (statement)


state 19

   50 assignment: array_access . '=' expression

    '='  shift, and go to state 67


state 20

    7 statement: if_else_conditional .

    $default  reduce using rule 7 (statement)


state 21

    9 statement: loop_stmt .

    $default  reduce using rule 9 (statement)


state 22

    8 statement: switch_case .

    $default  reduce using rule 8 (statement)


state 23

   13 statement: archetype_claim .

    $default  reduce using rule 13 (statement)


state 24

    2 statements: epsilon .

    $default  reduce using rule 2 (statements)


state 25

  119 archetype_claim: KW_CLAIM IDENT . KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  120                | KW_CLAIM IDENT . KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  121                | KW_CLAIM IDENT . KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  122                | KW_CLAIM IDENT . KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_IS  shift, and go to state 68


state 26

   10 statement: KW_PRINT '(' . print_param_list ')' ';'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 69
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    print_param_list  go to state 70
    var               go to state 38
    expression        go to state 71
    arithmetic_expr   go to state 40
    term              go to state 41
    factor            go to state 42
    constant          go to state 43
    logical_expr      go to state 44
    B                 go to state 45
    call_stmt         go to state 46
    unary_operation   go to state 47
    array_access      go to state 48
    array_decl        go to state 49


state 27

   33 declaration: KW_LET var . ':' PRIMITIVE_DTYPE A
   34            | KW_LET var . ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   35            | KW_LET var . ':' IDENT A
   36            | KW_LET var . ':' group_data_type A
   37            | KW_LET var . ':' ring_data_type A
   38            | KW_LET var . ':' field_data_type A
   39            | KW_LET var . ':' space_data_type A

    ':'  shift, and go to state 72


state 28

   71 constant: LIT_INT .

    $default  reduce using rule 71 (constant)


state 29

   70 constant: LIT_FLOAT .

    $default  reduce using rule 70 (constant)


state 30

   72 constant: LIT_STR .

    $default  reduce using rule 72 (constant)


state 31

   69 constant: LIT_CHAR .

    $default  reduce using rule 69 (constant)


state 32

   75 logical_expr: LOGICAL_NOT . logical_expr

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 75
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 33

   78 B: KW_TRUE .

    $default  reduce using rule 78 (B)


state 34

   79 B: KW_FALSE .

    $default  reduce using rule 79 (B)


state 35

   63 factor: '(' . arithmetic_expr ')'
   77 B: '(' . logical_expr ')'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 76
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 77
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 36

   64 factor: '-' . factor

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    factor           go to state 79
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 37

  100 array_decl: '[' . array_list ']'

    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31

    constant    go to state 80
    array_list  go to state 81


state 38

   54 expression: var . '@' var
   62 factor: var .
   91 call_stmt: var . '(' pass_param_list ')'
   92          | var . '(' ')'
   95 unary_operation: var . '+' '+'
   96                | var . '-' '-'
   97 array_access: var . C

    '('  shift, and go to state 82
    '@'  shift, and go to state 83
    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '['  shift, and go to state 62

    '+'       [reduce using rule 62 (factor)]
    '-'       [reduce using rule 62 (factor)]
    $default  reduce using rule 62 (factor)

    C  go to state 63


state 39

   88 return_stmt: KW_RETURN expression .

    $default  reduce using rule 88 (return_stmt)


state 40

   51 expression: arithmetic_expr .
   55 arithmetic_expr: arithmetic_expr . '+' term
   56                | arithmetic_expr . '-' term
   76 B: arithmetic_expr .

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87

    ';'       reduce using rule 51 (expression)
    ';'       [reduce using rule 76 (B)]
    ')'       reduce using rule 51 (expression)
    ')'       [reduce using rule 76 (B)]
    ','       reduce using rule 51 (expression)
    ','       [reduce using rule 76 (B)]
    $default  reduce using rule 76 (B)


state 41

   57 arithmetic_expr: term .
   58 term: term . '*' factor
   59     | term . '/' factor
   60     | term . '%' factor

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 57 (arithmetic_expr)


state 42

   61 term: factor .

    $default  reduce using rule 61 (term)


state 43

   65 factor: constant .

    $default  reduce using rule 65 (factor)


state 44

   52 expression: logical_expr .

    $default  reduce using rule 52 (expression)


state 45

   73 logical_expr: B . logical_op logical_expr
   74             | B .

    LOGICAL_AND  shift, and go to state 91
    LOGICAL_OR   shift, and go to state 92
    EQ           shift, and go to state 93
    NEQ          shift, and go to state 94
    GTEQ         shift, and go to state 95
    LTEQ         shift, and go to state 96
    '<'          shift, and go to state 97
    '>'          shift, and go to state 98

    $default  reduce using rule 74 (logical_expr)

    logical_op  go to state 99


state 46

   66 factor: call_stmt .

    $default  reduce using rule 66 (factor)


state 47

   68 factor: unary_operation .

    $default  reduce using rule 68 (factor)


state 48

   67 factor: array_access .

    $default  reduce using rule 67 (factor)


state 49

   53 expression: array_decl .

    $default  reduce using rule 53 (expression)


state 50

  103 if_else_conditional: KW_IF '(' . logical_expr ')' D

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 100
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 51

  107 loop_stmt: KW_WHILE '(' . logical_expr ')' '{' statements '}'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 101
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 52

  110 loop_stmt: KW_FOR IDENT . KW_IN IDENT '{' statements '}'

    KW_IN  shift, and go to state 102


state 53

  108 loop_stmt: KW_FOR '(' . assignment ';' logical_expr ';' V ')' '{' statements '}'
  109          | KW_FOR '(' . declaration ';' logical_expr ';' V ')' '{' statements '}'

    KW_LET  shift, and go to state 3
    IDENT   shift, and go to state 11

    var           go to state 103
    declaration   go to state 104
    assignment    go to state 105
    array_access  go to state 19


state 54

  113 switch_case: KW_SWITCH '(' . expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' . expression ')' '{' switch_case_blocks '}'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 106
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 55

   11 statement: KW_BREAK ';' .

    $default  reduce using rule 11 (statement)


state 56

   12 statement: KW_CONTINUE ';' .

    $default  reduce using rule 12 (statement)


state 57

   19 var: IDENT '.' . IDENT

    IDENT  shift, and go to state 107


state 58

    0 $accept: statements $end .

    $default  accept


state 59

    1 statements: statement statements .

    $default  reduce using rule 1 (statements)


state 60

   89 call_stmt_standalone: var '(' . pass_param_list ')' ';'
   90                     | var '(' . ')' ';'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    ')'          shift, and go to state 108
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 109
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    pass_param_list  go to state 110
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 61

   49 assignment: var '=' . expression

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 111
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 62

   98 C: '[' . LIT_INT ']' C
   99  | '[' . LIT_INT ']'

    LIT_INT  shift, and go to state 112


state 63

   97 array_access: var C .

    $default  reduce using rule 97 (array_access)


state 64

    3 statement: declaration ';' .

    $default  reduce using rule 3 (statement)


state 65

    4 statement: assignment ';' .

    $default  reduce using rule 4 (statement)


state 66

    6 statement: return_stmt ';' .

    $default  reduce using rule 6 (statement)


state 67

   50 assignment: array_access '=' . expression

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 113
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 68

  119 archetype_claim: KW_CLAIM IDENT KW_IS . KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  120                | KW_CLAIM IDENT KW_IS . KW_RING '{' ring_closure_rule identity_rule '}' ';'
  121                | KW_CLAIM IDENT KW_IS . KW_FIELD '{' field_inverse_rule '}' ';'
  122                | KW_CLAIM IDENT KW_IS . KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_GROUP  shift, and go to state 114
    KW_RING   shift, and go to state 115
    KW_FIELD  shift, and go to state 116
    KW_SPACE  shift, and go to state 117


state 69

   14 print_param_list: LIT_STR .
   15                 | LIT_STR . ',' print_param_list
   72 constant: LIT_STR .

    ','  shift, and go to state 118

    ')'       reduce using rule 14 (print_param_list)
    ')'       [reduce using rule 72 (constant)]
    ','       [reduce using rule 72 (constant)]
    $default  reduce using rule 72 (constant)


state 70

   10 statement: KW_PRINT '(' print_param_list . ')' ';'

    ')'  shift, and go to state 119


state 71

   16 print_param_list: expression .
   17                 | expression . ',' print_param_list

    ','  shift, and go to state 120

    $default  reduce using rule 16 (print_param_list)


state 72

   33 declaration: KW_LET var ':' . PRIMITIVE_DTYPE A
   34            | KW_LET var ':' . KW_BUF '<' PRIMITIVE_DTYPE '>' A
   35            | KW_LET var ':' . IDENT A
   36            | KW_LET var ':' . group_data_type A
   37            | KW_LET var ':' . ring_data_type A
   38            | KW_LET var ':' . field_data_type A
   39            | KW_LET var ':' . space_data_type A

    KW_CYCLIC        shift, and go to state 121
    KW_BIG_RATIONAL  shift, and go to state 122
    KW_COMPLEX       shift, and go to state 123
    KW_SYMMETRIC     shift, and go to state 124
    KW_ALTERNATING   shift, and go to state 125
    KW_DIHEDRAL      shift, and go to state 126
    KW_INV_MAT       shift, and go to state 127
    KW_BIGINT        shift, and go to state 128
    KW_MATRIX        shift, and go to state 129
    KW_POLYNOMIAL    shift, and go to state 130
    KW_VEC           shift, and go to state 131
    KW_BUF           shift, and go to state 132
    IDENT            shift, and go to state 133
    PRIMITIVE_DTYPE  shift, and go to state 134

    $default  reduce using rule 20 (field_data_type)

    field_data_type  go to state 135
    group_data_type  go to state 136
    ring_data_type   go to state 137
    space_data_type  go to state 138


state 73

   62 factor: var .
   91 call_stmt: var . '(' pass_param_list ')'
   92          | var . '(' ')'
   95 unary_operation: var . '+' '+'
   96                | var . '-' '-'
   97 array_access: var . C

    '('  shift, and go to state 82
    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '['  shift, and go to state 62

    '+'       [reduce using rule 62 (factor)]
    '-'       [reduce using rule 62 (factor)]
    $default  reduce using rule 62 (factor)

    C  go to state 63


state 74

   55 arithmetic_expr: arithmetic_expr . '+' term
   56                | arithmetic_expr . '-' term
   76 B: arithmetic_expr .

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87

    $default  reduce using rule 76 (B)


state 75

   75 logical_expr: LOGICAL_NOT logical_expr .

    $default  reduce using rule 75 (logical_expr)


state 76

   55 arithmetic_expr: arithmetic_expr . '+' term
   56                | arithmetic_expr . '-' term
   63 factor: '(' arithmetic_expr . ')'
   76 B: arithmetic_expr .

    ')'  shift, and go to state 139
    '+'  shift, and go to state 86
    '-'  shift, and go to state 87

    ')'       [reduce using rule 76 (B)]
    $default  reduce using rule 76 (B)


state 77

   77 B: '(' logical_expr . ')'

    ')'  shift, and go to state 140


state 78

   63 factor: '(' . arithmetic_expr ')'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 141
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 79

   64 factor: '-' factor .

    $default  reduce using rule 64 (factor)


state 80

  101 array_list: constant . ',' array_list
  102           | constant .

    ','  shift, and go to state 142

    $default  reduce using rule 102 (array_list)


state 81

  100 array_decl: '[' array_list . ']'

    ']'  shift, and go to state 143


state 82

   91 call_stmt: var '(' . pass_param_list ')'
   92          | var '(' . ')'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    ')'          shift, and go to state 144
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 109
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    pass_param_list  go to state 145
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 83

   54 expression: var '@' . var

    IDENT  shift, and go to state 11

    var  go to state 146


state 84

   95 unary_operation: var '+' . '+'

    '+'  shift, and go to state 147


state 85

   96 unary_operation: var '-' . '-'

    '-'  shift, and go to state 148


state 86

   55 arithmetic_expr: arithmetic_expr '+' . term

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    term             go to state 149
    factor           go to state 42
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 87

   56 arithmetic_expr: arithmetic_expr '-' . term

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    term             go to state 150
    factor           go to state 42
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 88

   58 term: term '*' . factor

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    factor           go to state 151
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 89

   59 term: term '/' . factor

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    factor           go to state 152
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 90

   60 term: term '%' . factor

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31
    '('        shift, and go to state 78
    '-'        shift, and go to state 36

    var              go to state 73
    factor           go to state 153
    constant         go to state 43
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 91

   86 logical_op: LOGICAL_AND .

    $default  reduce using rule 86 (logical_op)


state 92

   87 logical_op: LOGICAL_OR .

    $default  reduce using rule 87 (logical_op)


state 93

   84 logical_op: EQ .

    $default  reduce using rule 84 (logical_op)


state 94

   85 logical_op: NEQ .

    $default  reduce using rule 85 (logical_op)


state 95

   82 logical_op: GTEQ .

    $default  reduce using rule 82 (logical_op)


state 96

   83 logical_op: LTEQ .

    $default  reduce using rule 83 (logical_op)


state 97

   81 logical_op: '<' .

    $default  reduce using rule 81 (logical_op)


state 98

   80 logical_op: '>' .

    $default  reduce using rule 80 (logical_op)


state 99

   73 logical_expr: B logical_op . logical_expr

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 154
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 100

  103 if_else_conditional: KW_IF '(' logical_expr . ')' D

    ')'  shift, and go to state 155


state 101

  107 loop_stmt: KW_WHILE '(' logical_expr . ')' '{' statements '}'

    ')'  shift, and go to state 156


state 102

  110 loop_stmt: KW_FOR IDENT KW_IN . IDENT '{' statements '}'

    IDENT  shift, and go to state 157


state 103

   49 assignment: var . '=' expression
   97 array_access: var . C

    '='  shift, and go to state 61
    '['  shift, and go to state 62

    C  go to state 63


state 104

  109 loop_stmt: KW_FOR '(' declaration . ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 158


state 105

  108 loop_stmt: KW_FOR '(' assignment . ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 159


state 106

  113 switch_case: KW_SWITCH '(' expression . ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' expression . ')' '{' switch_case_blocks '}'

    ')'  shift, and go to state 160


state 107

   19 var: IDENT '.' IDENT .

    $default  reduce using rule 19 (var)


state 108

   90 call_stmt_standalone: var '(' ')' . ';'

    ';'  shift, and go to state 161


state 109

   93 pass_param_list: expression . ',' pass_param_list
   94                | expression .

    ','  shift, and go to state 162

    $default  reduce using rule 94 (pass_param_list)


state 110

   89 call_stmt_standalone: var '(' pass_param_list . ')' ';'

    ')'  shift, and go to state 163


state 111

   49 assignment: var '=' expression .

    $default  reduce using rule 49 (assignment)


state 112

   98 C: '[' LIT_INT . ']' C
   99  | '[' LIT_INT . ']'

    ']'  shift, and go to state 164


state 113

   50 assignment: array_access '=' expression .

    $default  reduce using rule 50 (assignment)


state 114

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP . '{' group_closure_rule identity_rule group_inverse_rule '}' ';'

    '{'  shift, and go to state 165


state 115

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING . '{' ring_closure_rule identity_rule '}' ';'

    '{'  shift, and go to state 166


state 116

  121 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD . '{' field_inverse_rule '}' ';'

    '{'  shift, and go to state 167


state 117

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE . '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '{'  shift, and go to state 168


state 118

   15 print_param_list: LIT_STR ',' . print_param_list

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 69
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    print_param_list  go to state 169
    var               go to state 38
    expression        go to state 71
    arithmetic_expr   go to state 40
    term              go to state 41
    factor            go to state 42
    constant          go to state 43
    logical_expr      go to state 44
    B                 go to state 45
    call_stmt         go to state 46
    unary_operation   go to state 47
    array_access      go to state 48
    array_decl        go to state 49


state 119

   10 statement: KW_PRINT '(' print_param_list ')' . ';'

    ';'  shift, and go to state 170


state 120

   17 print_param_list: expression ',' . print_param_list

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 69
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    print_param_list  go to state 171
    var               go to state 38
    expression        go to state 71
    arithmetic_expr   go to state 40
    term              go to state 41
    factor            go to state 42
    constant          go to state 43
    logical_expr      go to state 44
    B                 go to state 45
    call_stmt         go to state 46
    unary_operation   go to state 47
    array_access      go to state 48
    array_decl        go to state 49


state 121

   23 group_data_type: KW_CYCLIC . '<' LIT_INT '>'

    '<'  shift, and go to state 172


state 122

   21 field_data_type: KW_BIG_RATIONAL .

    $default  reduce using rule 21 (field_data_type)


state 123

   22 field_data_type: KW_COMPLEX .

    $default  reduce using rule 22 (field_data_type)


state 124

   24 group_data_type: KW_SYMMETRIC . '<' LIT_INT '>'

    '<'  shift, and go to state 173


state 125

   25 group_data_type: KW_ALTERNATING . '<' LIT_INT '>'

    '<'  shift, and go to state 174


state 126

   26 group_data_type: KW_DIHEDRAL . '<' LIT_INT '>'

    '<'  shift, and go to state 175


state 127

   27 group_data_type: KW_INV_MAT . '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 176


state 128

   28 ring_data_type: KW_BIGINT .

    $default  reduce using rule 28 (ring_data_type)


state 129

   29 ring_data_type: KW_MATRIX . '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 177


state 130

   30 ring_data_type: KW_POLYNOMIAL . '<' IDENT '>'

    '<'  shift, and go to state 178


state 131

   31 space_data_type: KW_VEC . '<' IDENT '>'
   32                | KW_VEC . '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 179


state 132

   34 declaration: KW_LET var ':' KW_BUF . '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 180


state 133

   35 declaration: KW_LET var ':' IDENT . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 183
    epsilon  go to state 184


state 134

   33 declaration: KW_LET var ':' PRIMITIVE_DTYPE . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 185
    epsilon  go to state 184


state 135

   38 declaration: KW_LET var ':' field_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 186
    epsilon  go to state 184


state 136

   36 declaration: KW_LET var ':' group_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 187
    epsilon  go to state 184


state 137

   37 declaration: KW_LET var ':' ring_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 188
    epsilon  go to state 184


state 138

   39 declaration: KW_LET var ':' space_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 189
    epsilon  go to state 184


state 139

   63 factor: '(' arithmetic_expr ')' .

    $default  reduce using rule 63 (factor)


state 140

   77 B: '(' logical_expr ')' .

    $default  reduce using rule 77 (B)


state 141

   55 arithmetic_expr: arithmetic_expr . '+' term
   56                | arithmetic_expr . '-' term
   63 factor: '(' arithmetic_expr . ')'

    ')'  shift, and go to state 139
    '+'  shift, and go to state 86
    '-'  shift, and go to state 87


state 142

  101 array_list: constant ',' . array_list

    LIT_INT    shift, and go to state 28
    LIT_FLOAT  shift, and go to state 29
    LIT_STR    shift, and go to state 30
    LIT_CHAR   shift, and go to state 31

    constant    go to state 80
    array_list  go to state 190


state 143

  100 array_decl: '[' array_list ']' .

    $default  reduce using rule 100 (array_decl)


state 144

   92 call_stmt: var '(' ')' .

    $default  reduce using rule 92 (call_stmt)


state 145

   91 call_stmt: var '(' pass_param_list . ')'

    ')'  shift, and go to state 191


state 146

   54 expression: var '@' var .

    $default  reduce using rule 54 (expression)


state 147

   95 unary_operation: var '+' '+' .

    $default  reduce using rule 95 (unary_operation)


state 148

   96 unary_operation: var '-' '-' .

    $default  reduce using rule 96 (unary_operation)


state 149

   55 arithmetic_expr: arithmetic_expr '+' term .
   58 term: term . '*' factor
   59     | term . '/' factor
   60     | term . '%' factor

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 55 (arithmetic_expr)


state 150

   56 arithmetic_expr: arithmetic_expr '-' term .
   58 term: term . '*' factor
   59     | term . '/' factor
   60     | term . '%' factor

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 56 (arithmetic_expr)


state 151

   58 term: term '*' factor .

    $default  reduce using rule 58 (term)


state 152

   59 term: term '/' factor .

    $default  reduce using rule 59 (term)


state 153

   60 term: term '%' factor .

    $default  reduce using rule 60 (term)


state 154

   73 logical_expr: B logical_op logical_expr .

    $default  reduce using rule 73 (logical_expr)


state 155

  103 if_else_conditional: KW_IF '(' logical_expr ')' . D

    '{'  shift, and go to state 192

    D  go to state 193


state 156

  107 loop_stmt: KW_WHILE '(' logical_expr ')' . '{' statements '}'

    '{'  shift, and go to state 194


state 157

  110 loop_stmt: KW_FOR IDENT KW_IN IDENT . '{' statements '}'

    '{'  shift, and go to state 195


state 158

  109 loop_stmt: KW_FOR '(' declaration ';' . logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 196
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 159

  108 loop_stmt: KW_FOR '(' assignment ';' . logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36

    var              go to state 73
    arithmetic_expr  go to state 74
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 197
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48


state 160

  113 switch_case: KW_SWITCH '(' expression ')' . '{' switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' expression ')' . '{' switch_case_blocks '}'

    '{'  shift, and go to state 198


state 161

   90 call_stmt_standalone: var '(' ')' ';' .

    $default  reduce using rule 90 (call_stmt_standalone)


state 162

   93 pass_param_list: expression ',' . pass_param_list

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 109
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    pass_param_list  go to state 199
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 163

   89 call_stmt_standalone: var '(' pass_param_list ')' . ';'

    ';'  shift, and go to state 200


state 164

   98 C: '[' LIT_INT ']' . C
   99  | '[' LIT_INT ']' .

    '['  shift, and go to state 62

    $default  reduce using rule 99 (C)

    C  go to state 201


state 165

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' . group_closure_rule identity_rule group_inverse_rule '}' ';'

    '('  shift, and go to state 202

    group_closure_rule  go to state 203


state 166

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' . ring_closure_rule identity_rule '}' ';'

    '('  shift, and go to state 204

    ring_closure_rule  go to state 205


state 167

  121 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' . field_inverse_rule '}' ';'

    '('  shift, and go to state 206

    field_inverse_rule  go to state 207


state 168

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' . KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_FIELD  shift, and go to state 208


state 169

   15 print_param_list: LIT_STR ',' print_param_list .

    $default  reduce using rule 15 (print_param_list)


state 170

   10 statement: KW_PRINT '(' print_param_list ')' ';' .

    $default  reduce using rule 10 (statement)


state 171

   17 print_param_list: expression ',' print_param_list .

    $default  reduce using rule 17 (print_param_list)


state 172

   23 group_data_type: KW_CYCLIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 209


state 173

   24 group_data_type: KW_SYMMETRIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 210


state 174

   25 group_data_type: KW_ALTERNATING '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 211


state 175

   26 group_data_type: KW_DIHEDRAL '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 212


state 176

   27 group_data_type: KW_INV_MAT '<' . LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 213


state 177

   29 ring_data_type: KW_MATRIX '<' . LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 214


state 178

   30 ring_data_type: KW_POLYNOMIAL '<' . IDENT '>'

    IDENT  shift, and go to state 215


state 179

   31 space_data_type: KW_VEC '<' . IDENT '>'
   32                | KW_VEC '<' . PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 216
    PRIMITIVE_DTYPE  shift, and go to state 217


state 180

   34 declaration: KW_LET var ':' KW_BUF '<' . PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 218


state 181

   42 A: ',' . var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   43  | ',' . var ':' PRIMITIVE_DTYPE A
   44  | ',' . var ':' IDENT A
   45  | ',' . var ':' group_data_type A
   46  | ',' . var ':' ring_data_type A
   47  | ',' . var ':' field_data_type A
   48  | ',' . var ':' space_data_type A

    IDENT  shift, and go to state 11

    var  go to state 219


state 182

   40 A: '=' . expression

    IDENT        shift, and go to state 11
    LIT_INT      shift, and go to state 28
    LIT_FLOAT    shift, and go to state 29
    LIT_STR      shift, and go to state 30
    LIT_CHAR     shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    KW_TRUE      shift, and go to state 33
    KW_FALSE     shift, and go to state 34
    '('          shift, and go to state 35
    '-'          shift, and go to state 36
    '['          shift, and go to state 37

    var              go to state 38
    expression       go to state 220
    arithmetic_expr  go to state 40
    term             go to state 41
    factor           go to state 42
    constant         go to state 43
    logical_expr     go to state 44
    B                go to state 45
    call_stmt        go to state 46
    unary_operation  go to state 47
    array_access     go to state 48
    array_decl       go to state 49


state 183

   35 declaration: KW_LET var ':' IDENT A .

    $default  reduce using rule 35 (declaration)


state 184

   41 A: epsilon .

    $default  reduce using rule 41 (A)


state 185

   33 declaration: KW_LET var ':' PRIMITIVE_DTYPE A .

    $default  reduce using rule 33 (declaration)


state 186

   38 declaration: KW_LET var ':' field_data_type A .

    $default  reduce using rule 38 (declaration)


state 187

   36 declaration: KW_LET var ':' group_data_type A .

    $default  reduce using rule 36 (declaration)


state 188

   37 declaration: KW_LET var ':' ring_data_type A .

    $default  reduce using rule 37 (declaration)


state 189

   39 declaration: KW_LET var ':' space_data_type A .

    $default  reduce using rule 39 (declaration)


state 190

  101 array_list: constant ',' array_list .

    $default  reduce using rule 101 (array_list)


state 191

   91 call_stmt: var '(' pass_param_list ')' .

    $default  reduce using rule 91 (call_stmt)


state 192

  104 D: '{' . statements '}'
  105  | '{' . statements '}' KW_ELSE if_else_conditional
  106  | '{' . statements '}' KW_ELSE '{' statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 221
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 193

  103 if_else_conditional: KW_IF '(' logical_expr ')' D .

    $default  reduce using rule 103 (if_else_conditional)


state 194

  107 loop_stmt: KW_WHILE '(' logical_expr ')' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 222
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 195

  110 loop_stmt: KW_FOR IDENT KW_IN IDENT '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 223
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 196

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr . ';' V ')' '{' statements '}'

    ';'  shift, and go to state 224


state 197

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr . ';' V ')' '{' statements '}'

    ';'  shift, and go to state 225


state 198

  113 switch_case: KW_SWITCH '(' expression ')' '{' . switch_case_blocks KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' expression ')' '{' . switch_case_blocks '}'

    KW_CASE  shift, and go to state 226

    $default  reduce using rule 128 (epsilon)

    switch_case_blocks  go to state 227
    epsilon             go to state 228


state 199

   93 pass_param_list: expression ',' pass_param_list .

    $default  reduce using rule 93 (pass_param_list)


state 200

   89 call_stmt_standalone: var '(' pass_param_list ')' ';' .

    $default  reduce using rule 89 (call_stmt_standalone)


state 201

   98 C: '[' LIT_INT ']' C .

    $default  reduce using rule 98 (C)


state 202

  123 group_closure_rule: '(' . IDENT '=' IDENT '+' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 229


state 203

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule . identity_rule group_inverse_rule '}' ';'

    '('  shift, and go to state 230

    identity_rule  go to state 231


state 204

  124 ring_closure_rule: '(' . IDENT '=' IDENT '*' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 232


state 205

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule . identity_rule '}' ';'

    '('  shift, and go to state 230

    identity_rule  go to state 233


state 206

  127 field_inverse_rule: '(' . IDENT '=' '~' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 234


state 207

  121 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule . '}' ';'

    '}'  shift, and go to state 235


state 208

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD . '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '='  shift, and go to state 236


state 209

   23 group_data_type: KW_CYCLIC '<' LIT_INT . '>'

    '>'  shift, and go to state 237


state 210

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT . '>'

    '>'  shift, and go to state 238


state 211

   25 group_data_type: KW_ALTERNATING '<' LIT_INT . '>'

    '>'  shift, and go to state 239


state 212

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT . '>'

    '>'  shift, and go to state 240


state 213

   27 group_data_type: KW_INV_MAT '<' LIT_INT . ',' IDENT '>'

    ','  shift, and go to state 241


state 214

   29 ring_data_type: KW_MATRIX '<' LIT_INT . ',' IDENT '>'

    ','  shift, and go to state 242


state 215

   30 ring_data_type: KW_POLYNOMIAL '<' IDENT . '>'

    '>'  shift, and go to state 243


state 216

   31 space_data_type: KW_VEC '<' IDENT . '>'

    '>'  shift, and go to state 244


state 217

   32 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE . '>'

    '>'  shift, and go to state 245


state 218

   34 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE . '>' A

    '>'  shift, and go to state 246


state 219

   42 A: ',' var . ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   43  | ',' var . ':' PRIMITIVE_DTYPE A
   44  | ',' var . ':' IDENT A
   45  | ',' var . ':' group_data_type A
   46  | ',' var . ':' ring_data_type A
   47  | ',' var . ':' field_data_type A
   48  | ',' var . ':' space_data_type A

    ':'  shift, and go to state 247


state 220

   40 A: '=' expression .

    $default  reduce using rule 40 (A)


state 221

  104 D: '{' statements . '}'
  105  | '{' statements . '}' KW_ELSE if_else_conditional
  106  | '{' statements . '}' KW_ELSE '{' statements '}'

    '}'  shift, and go to state 248


state 222

  107 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements . '}'

    '}'  shift, and go to state 249


state 223

  110 loop_stmt: KW_FOR IDENT KW_IN IDENT '{' statements . '}'

    '}'  shift, and go to state 250


state 224

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' . V ')' '{' statements '}'

    IDENT  shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    var              go to state 251
    unary_operation  go to state 252
    V                go to state 253
    epsilon          go to state 254


state 225

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' . V ')' '{' statements '}'

    IDENT  shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    var              go to state 251
    unary_operation  go to state 252
    V                go to state 255
    epsilon          go to state 254


state 226

  115 switch_case_blocks: KW_CASE . LIT_CHAR ':' statements switch_case_blocks
  116                   | KW_CASE . LIT_INT ':' statements switch_case_blocks
  117                   | KW_CASE . LIT_FLOAT ':' statements switch_case_blocks

    LIT_INT    shift, and go to state 256
    LIT_FLOAT  shift, and go to state 257
    LIT_CHAR   shift, and go to state 258


state 227

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks . KW_DEFAULT ':' statements '}'
  114            | KW_SWITCH '(' expression ')' '{' switch_case_blocks . '}'

    KW_DEFAULT  shift, and go to state 259
    '}'         shift, and go to state 260


state 228

  118 switch_case_blocks: epsilon .

    $default  reduce using rule 118 (switch_case_blocks)


state 229

  123 group_closure_rule: '(' IDENT . '=' IDENT '+' IDENT ')' '=' '>' '{' statements '}'

    '='  shift, and go to state 261


state 230

  125 identity_rule: '(' . IDENT '=' LIT_INT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 262


state 231

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule . group_inverse_rule '}' ';'

    '('  shift, and go to state 263

    group_inverse_rule  go to state 264


state 232

  124 ring_closure_rule: '(' IDENT . '=' IDENT '*' IDENT ')' '=' '>' '{' statements '}'

    '='  shift, and go to state 265


state 233

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule . '}' ';'

    '}'  shift, and go to state 266


state 234

  127 field_inverse_rule: '(' IDENT . '=' '~' IDENT ')' '=' '>' '{' statements '}'

    '='  shift, and go to state 267


state 235

  121 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' . ';'

    ';'  shift, and go to state 268


state 236

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' . '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 269


state 237

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>' .

    $default  reduce using rule 23 (group_data_type)


state 238

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' .

    $default  reduce using rule 24 (group_data_type)


state 239

   25 group_data_type: KW_ALTERNATING '<' LIT_INT '>' .

    $default  reduce using rule 25 (group_data_type)


state 240

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' .

    $default  reduce using rule 26 (group_data_type)


state 241

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' . IDENT '>'

    IDENT  shift, and go to state 270


state 242

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' . IDENT '>'

    IDENT  shift, and go to state 271


state 243

   30 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' .

    $default  reduce using rule 30 (ring_data_type)


state 244

   31 space_data_type: KW_VEC '<' IDENT '>' .

    $default  reduce using rule 31 (space_data_type)


state 245

   32 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' .

    $default  reduce using rule 32 (space_data_type)


state 246

   34 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 272
    epsilon  go to state 184


state 247

   42 A: ',' var ':' . KW_BUF '<' PRIMITIVE_DTYPE '>' A
   43  | ',' var ':' . PRIMITIVE_DTYPE A
   44  | ',' var ':' . IDENT A
   45  | ',' var ':' . group_data_type A
   46  | ',' var ':' . ring_data_type A
   47  | ',' var ':' . field_data_type A
   48  | ',' var ':' . space_data_type A

    KW_CYCLIC        shift, and go to state 121
    KW_BIG_RATIONAL  shift, and go to state 122
    KW_COMPLEX       shift, and go to state 123
    KW_SYMMETRIC     shift, and go to state 124
    KW_ALTERNATING   shift, and go to state 125
    KW_DIHEDRAL      shift, and go to state 126
    KW_INV_MAT       shift, and go to state 127
    KW_BIGINT        shift, and go to state 128
    KW_MATRIX        shift, and go to state 129
    KW_POLYNOMIAL    shift, and go to state 130
    KW_VEC           shift, and go to state 131
    KW_BUF           shift, and go to state 273
    IDENT            shift, and go to state 274
    PRIMITIVE_DTYPE  shift, and go to state 275

    $default  reduce using rule 20 (field_data_type)

    field_data_type  go to state 276
    group_data_type  go to state 277
    ring_data_type   go to state 278
    space_data_type  go to state 279


state 248

  104 D: '{' statements '}' .
  105  | '{' statements '}' . KW_ELSE if_else_conditional
  106  | '{' statements '}' . KW_ELSE '{' statements '}'

    KW_ELSE  shift, and go to state 280

    $default  reduce using rule 104 (D)


state 249

  107 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}' .

    $default  reduce using rule 107 (loop_stmt)


state 250

  110 loop_stmt: KW_FOR IDENT KW_IN IDENT '{' statements '}' .

    $default  reduce using rule 110 (loop_stmt)


state 251

   95 unary_operation: var . '+' '+'
   96                | var . '-' '-'

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85


state 252

  111 V: unary_operation .

    $default  reduce using rule 111 (V)


state 253

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V . ')' '{' statements '}'

    ')'  shift, and go to state 281


state 254

  112 V: epsilon .

    $default  reduce using rule 112 (V)


state 255

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V . ')' '{' statements '}'

    ')'  shift, and go to state 282


state 256

  116 switch_case_blocks: KW_CASE LIT_INT . ':' statements switch_case_blocks

    ':'  shift, and go to state 283


state 257

  117 switch_case_blocks: KW_CASE LIT_FLOAT . ':' statements switch_case_blocks

    ':'  shift, and go to state 284


state 258

  115 switch_case_blocks: KW_CASE LIT_CHAR . ':' statements switch_case_blocks

    ':'  shift, and go to state 285


state 259

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT . ':' statements '}'

    ':'  shift, and go to state 286


state 260

  114 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks '}' .

    $default  reduce using rule 114 (switch_case)


state 261

  123 group_closure_rule: '(' IDENT '=' . IDENT '+' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 287


state 262

  125 identity_rule: '(' IDENT . '=' LIT_INT ')' '=' '>' '{' statements '}'

    '='  shift, and go to state 288


state 263

  126 group_inverse_rule: '(' . IDENT '=' '-' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 289


state 264

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule . '}' ';'

    '}'  shift, and go to state 290


state 265

  124 ring_closure_rule: '(' IDENT '=' . IDENT '*' IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 291


state 266

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' . ';'

    ';'  shift, and go to state 292


state 267

  127 field_inverse_rule: '(' IDENT '=' . '~' IDENT ')' '=' '>' '{' statements '}'

    '~'  shift, and go to state 293


state 268

  121 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';' .

    $default  reduce using rule 121 (archetype_claim)


state 269

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' . IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    IDENT  shift, and go to state 294


state 270

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT . '>'

    '>'  shift, and go to state 295


state 271

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT . '>'

    '>'  shift, and go to state 296


state 272

   34 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A .

    $default  reduce using rule 34 (declaration)


state 273

   42 A: ',' var ':' KW_BUF . '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 297


state 274

   44 A: ',' var ':' IDENT . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 298
    epsilon  go to state 184


state 275

   43 A: ',' var ':' PRIMITIVE_DTYPE . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 299
    epsilon  go to state 184


state 276

   47 A: ',' var ':' field_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 300
    epsilon  go to state 184


state 277

   45 A: ',' var ':' group_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 301
    epsilon  go to state 184


state 278

   46 A: ',' var ':' ring_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 302
    epsilon  go to state 184


state 279

   48 A: ',' var ':' space_data_type . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 303
    epsilon  go to state 184


state 280

  105 D: '{' statements '}' KW_ELSE . if_else_conditional
  106  | '{' statements '}' KW_ELSE . '{' statements '}'

    KW_IF  shift, and go to state 5
    '{'    shift, and go to state 304

    if_else_conditional  go to state 305


state 281

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' . '{' statements '}'

    '{'  shift, and go to state 306


state 282

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' . '{' statements '}'

    '{'  shift, and go to state 307


state 283

  116 switch_case_blocks: KW_CASE LIT_INT ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 308
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 284

  117 switch_case_blocks: KW_CASE LIT_FLOAT ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 309
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 285

  115 switch_case_blocks: KW_CASE LIT_CHAR ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 310
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 286

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 311
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 287

  123 group_closure_rule: '(' IDENT '=' IDENT . '+' IDENT ')' '=' '>' '{' statements '}'

    '+'  shift, and go to state 312


state 288

  125 identity_rule: '(' IDENT '=' . LIT_INT ')' '=' '>' '{' statements '}'

    LIT_INT  shift, and go to state 313


state 289

  126 group_inverse_rule: '(' IDENT . '=' '-' IDENT ')' '=' '>' '{' statements '}'

    '='  shift, and go to state 314


state 290

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' . ';'

    ';'  shift, and go to state 315


state 291

  124 ring_closure_rule: '(' IDENT '=' IDENT . '*' IDENT ')' '=' '>' '{' statements '}'

    '*'  shift, and go to state 316


state 292

  120 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';' .

    $default  reduce using rule 120 (archetype_claim)


state 293

  127 field_inverse_rule: '(' IDENT '=' '~' . IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 317


state 294

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT . ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    ')'  shift, and go to state 318


state 295

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' .

    $default  reduce using rule 27 (group_data_type)


state 296

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' .

    $default  reduce using rule 29 (ring_data_type)


state 297

   42 A: ',' var ':' KW_BUF '<' . PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 319


state 298

   44 A: ',' var ':' IDENT A .

    $default  reduce using rule 44 (A)


state 299

   43 A: ',' var ':' PRIMITIVE_DTYPE A .

    $default  reduce using rule 43 (A)


state 300

   47 A: ',' var ':' field_data_type A .

    $default  reduce using rule 47 (A)


state 301

   45 A: ',' var ':' group_data_type A .

    $default  reduce using rule 45 (A)


state 302

   46 A: ',' var ':' ring_data_type A .

    $default  reduce using rule 46 (A)


state 303

   48 A: ',' var ':' space_data_type A .

    $default  reduce using rule 48 (A)


state 304

  106 D: '{' statements '}' KW_ELSE '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 320
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 305

  105 D: '{' statements '}' KW_ELSE if_else_conditional .

    $default  reduce using rule 105 (D)


state 306

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 321
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 307

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 322
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 308

  116 switch_case_blocks: KW_CASE LIT_INT ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 226

    $default  reduce using rule 128 (epsilon)

    switch_case_blocks  go to state 323
    epsilon             go to state 228


state 309

  117 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 226

    $default  reduce using rule 128 (epsilon)

    switch_case_blocks  go to state 324
    epsilon             go to state 228


state 310

  115 switch_case_blocks: KW_CASE LIT_CHAR ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 226

    $default  reduce using rule 128 (epsilon)

    switch_case_blocks  go to state 325
    epsilon             go to state 228


state 311

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements . '}'

    '}'  shift, and go to state 326


state 312

  123 group_closure_rule: '(' IDENT '=' IDENT '+' . IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 327


state 313

  125 identity_rule: '(' IDENT '=' LIT_INT . ')' '=' '>' '{' statements '}'

    ')'  shift, and go to state 328


state 314

  126 group_inverse_rule: '(' IDENT '=' . '-' IDENT ')' '=' '>' '{' statements '}'

    '-'  shift, and go to state 329


state 315

  119 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';' .

    $default  reduce using rule 119 (archetype_claim)


state 316

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' . IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 330


state 317

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT . ')' '=' '>' '{' statements '}'

    ')'  shift, and go to state 331


state 318

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' . ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    ';'  shift, and go to state 332


state 319

   42 A: ',' var ':' KW_BUF '<' PRIMITIVE_DTYPE . '>' A

    '>'  shift, and go to state 333


state 320

  106 D: '{' statements '}' KW_ELSE '{' statements . '}'

    '}'  shift, and go to state 334


state 321

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements . '}'

    '}'  shift, and go to state 335


state 322

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements . '}'

    '}'  shift, and go to state 336


state 323

  116 switch_case_blocks: KW_CASE LIT_INT ':' statements switch_case_blocks .

    $default  reduce using rule 116 (switch_case_blocks)


state 324

  117 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements switch_case_blocks .

    $default  reduce using rule 117 (switch_case_blocks)


state 325

  115 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks .

    $default  reduce using rule 115 (switch_case_blocks)


state 326

  113 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}' .

    $default  reduce using rule 113 (switch_case)


state 327

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT . ')' '=' '>' '{' statements '}'

    ')'  shift, and go to state 337


state 328

  125 identity_rule: '(' IDENT '=' LIT_INT ')' . '=' '>' '{' statements '}'

    '='  shift, and go to state 338


state 329

  126 group_inverse_rule: '(' IDENT '=' '-' . IDENT ')' '=' '>' '{' statements '}'

    IDENT  shift, and go to state 339


state 330

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT . ')' '=' '>' '{' statements '}'

    ')'  shift, and go to state 340


state 331

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' . '=' '>' '{' statements '}'

    '='  shift, and go to state 341


state 332

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' . group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 202

    group_closure_rule  go to state 342


state 333

   42 A: ',' var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' . A

    ','  shift, and go to state 181
    '='  shift, and go to state 182

    $default  reduce using rule 128 (epsilon)

    A        go to state 343
    epsilon  go to state 184


state 334

  106 D: '{' statements '}' KW_ELSE '{' statements '}' .

    $default  reduce using rule 106 (D)


state 335

  109 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}' .

    $default  reduce using rule 109 (loop_stmt)


state 336

  108 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}' .

    $default  reduce using rule 108 (loop_stmt)


state 337

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' . '=' '>' '{' statements '}'

    '='  shift, and go to state 344


state 338

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' . '>' '{' statements '}'

    '>'  shift, and go to state 345


state 339

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT . ')' '=' '>' '{' statements '}'

    ')'  shift, and go to state 346


state 340

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' . '=' '>' '{' statements '}'

    '='  shift, and go to state 347


state 341

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' . '>' '{' statements '}'

    '>'  shift, and go to state 348


state 342

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule . group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 263

    group_inverse_rule  go to state 349


state 343

   42 A: ',' var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A .

    $default  reduce using rule 42 (A)


state 344

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' . '>' '{' statements '}'

    '>'  shift, and go to state 350


state 345

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' '>' . '{' statements '}'

    '{'  shift, and go to state 351


state 346

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' . '=' '>' '{' statements '}'

    '='  shift, and go to state 352


state 347

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' . '>' '{' statements '}'

    '>'  shift, and go to state 353


state 348

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' '>' . '{' statements '}'

    '{'  shift, and go to state 354


state 349

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule . identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 230

    identity_rule  go to state 355


state 350

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' '>' . '{' statements '}'

    '{'  shift, and go to state 356


state 351

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' '>' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 357
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 352

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' . '>' '{' statements '}'

    '>'  shift, and go to state 358


state 353

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' '>' . '{' statements '}'

    '{'  shift, and go to state 359


state 354

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' '>' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 360
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 355

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule . ring_closure_rule '}' ';'

    '('  shift, and go to state 204

    ring_closure_rule  go to state 361


state 356

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' '>' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 362
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 357

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' '>' '{' statements . '}'

    '}'  shift, and go to state 363


state 358

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' '>' . '{' statements '}'

    '{'  shift, and go to state 364


state 359

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' '>' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 365
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 360

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' '>' '{' statements . '}'

    '}'  shift, and go to state 366


state 361

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule . '}' ';'

    '}'  shift, and go to state 367


state 362

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' '>' '{' statements . '}'

    '}'  shift, and go to state 368


state 363

  125 identity_rule: '(' IDENT '=' LIT_INT ')' '=' '>' '{' statements '}' .

    $default  reduce using rule 125 (identity_rule)


state 364

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' '>' '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 128 (epsilon)

    statements            go to state 369
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 365

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' '>' '{' statements . '}'

    '}'  shift, and go to state 370


state 366

  127 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' '=' '>' '{' statements '}' .

    $default  reduce using rule 127 (field_inverse_rule)


state 367

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' . ';'

    ';'  shift, and go to state 371


state 368

  123 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' '=' '>' '{' statements '}' .

    $default  reduce using rule 123 (group_closure_rule)


state 369

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' '>' '{' statements . '}'

    '}'  shift, and go to state 372


state 370

  124 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' '=' '>' '{' statements '}' .

    $default  reduce using rule 124 (ring_closure_rule)


state 371

  122 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';' .

    $default  reduce using rule 122 (archetype_claim)


state 372

  126 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' '=' '>' '{' statements '}' .

    $default  reduce using rule 126 (group_inverse_rule)
