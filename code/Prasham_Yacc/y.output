Nonterminals useless in grammar

    switch_conditional
    switch_case_blocks


Terminals unused in grammar

    KW_SWITCH
    KW_CASE
    KW_DEFAULT
    KW_BREAK
    GT
    LT


Rules useless in grammar

   96 statement: switch_conditional

   97 switch_conditional: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   98                   | KW_SWITCH '(' expression ')' '{' switch_case_blocks '}'

   99 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks
  100                   | KW_CASE LIT_INT ':' statements switch_case_blocks
  101                   | KW_CASE LIT_FLOAT ':' statements switch_case_blocks


State 28 conflicts: 2 shift/reduce
State 30 conflicts: 3 reduce/reduce
State 38 conflicts: 3 reduce/reduce
State 57 conflicts: 1 shift/reduce


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional
    8          | loop_stmt

    9 var: IDENT
   10    | IDENT '.' IDENT

   11 field_data_type: ε
   12                | KW_BIG_RATIONAL
   13                | KW_COMPLEX

   14 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   15                | KW_SYMMETRIC '<' LIT_INT '>'
   16                | KW_ALTERNATING '<' LIT_INT '>'
   17                | KW_DIHEDRAL '<' LIT_INT '>'
   18                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   19 ring_data_type: KW_BIGINT
   20               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   21               | KW_POLYNOMIAL '<' IDENT '>'

   22 space_data_type: KW_VEC '<' IDENT '>'
   23                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   24 declaration: KW_LET var ':' PRIMITIVE_DTYPE A
   25            | KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   26            | KW_LET var ':' IDENT A
   27            | KW_LET var ':' group_data_type A
   28            | KW_LET var ':' ring_data_type A
   29            | KW_LET var ':' field_data_type A
   30            | KW_LET var ':' space_data_type A

   31 A: '=' expression
   32  | epsilon

   33 assignment: var '=' expression

   34 expression: arithmetic_expr
   35           | logical_expr
   36           | array_access
   37           | array_decl

   38 arithmetic_expr: arithmetic_expr '+' term
   39                | arithmetic_expr '-' term
   40                | term

   41 term: term '*' factor
   42     | term '/' factor
   43     | term '%' factor
   44     | factor

   45 factor: var
   46       | '(' arithmetic_expr ')'
   47       | '-' factor
   48       | constant
   49       | call_stmt
   50       | array_access
   51       | unary_operation

   52 constant: LIT_CHAR
   53         | LIT_FLOAT
   54         | LIT_INT
   55         | LIT_STR

   56 logical_expr: B logical_op logical_expr
   57             | B
   58             | LOGICAL_NOT logical_expr

   59 B: arithmetic_expr
   60  | '(' logical_expr ')'
   61  | KW_TRUE
   62  | KW_FALSE

   63 logical_op: '>'
   64           | '<'
   65           | GTEQ
   66           | LTEQ
   67           | EQ
   68           | NEQ
   69           | LOGICAL_AND
   70           | LOGICAL_OR

   71 return_stmt: KW_RETURN expression

   72 call_stmt_standalone: var '(' pass_param_list ')' ';'
   73                     | var '(' ')' ';'

   74 call_stmt: var '(' pass_param_list ')'
   75          | var '(' ')'

   76 pass_param_list: expression ',' pass_param_list
   77                | expression

   78 unary_operation: var '+' '+'
   79                | var '-' '-'

   80 array_access: var C

   81 C: '[' LIT_INT ']' C
   82  | '[' LIT_INT ']'

   83 array_decl: '[' array_list ']'

   84 array_list: constant ',' array_list
   85           | constant

   86 if_else_conditional: KW_IF '(' logical_expr ')' D

   87 D: '{' statements '}'
   88  | '{' statements '}' KW_ELSE if_else_conditional
   89  | '{' statements '}' KW_ELSE '{' statements '}'

   90 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}'
   91          | KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   92          | KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

   93 V: unary_operation
   94  | epsilon

   95 epsilon: ε


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 43
    '(' (40) 46 60 72 73 74 75 86 90 91 92
    ')' (41) 46 60 72 73 74 75 86 90 91 92
    '*' (42) 41
    '+' (43) 38 78
    ',' (44) 18 20 76 84
    '-' (45) 39 47 79
    '.' (46) 10
    '/' (47) 42
    ':' (58) 24 25 26 27 28 29 30
    ';' (59) 3 4 6 72 73 91 92
    '<' (60) 14 15 16 17 18 20 21 22 23 25 64
    '=' (61) 31 33
    '>' (62) 14 15 16 17 18 20 21 22 23 25 63
    '[' (91) 81 82 83
    ']' (93) 81 82 83
    '{' (123) 87 88 89 90 91 92
    '}' (125) 87 88 89 90 91 92
    error (256)
    KW_LET (258) 24 25 26 27 28 29 30
    KW_RETURN (259) 71
    KW_IF (260) 86
    KW_ELSE (261) 88 89
    KW_WHILE (262) 90
    KW_FOR (263) 91 92
    KW_SWITCH (264)
    KW_CASE (265)
    KW_DEFAULT (266)
    KW_BREAK (267)
    KW_CYCLIC (268) 14
    KW_BIG_RATIONAL (269) 12
    KW_COMPLEX (270) 13
    KW_SYMMETRIC (271) 15
    KW_ALTERNATING (272) 16
    KW_DIHEDRAL (273) 17
    KW_INV_MAT (274) 18
    KW_BIGINT (275) 19
    KW_MATRIX (276) 20
    KW_POLYNOMIAL (277) 21
    KW_VEC (278) 22 23
    KW_BUF (279) 25
    IDENT (280) 9 10 18 20 21 22 26
    PRIMITIVE_DTYPE (281) 23 24 25
    LIT_INT (282) 14 15 16 17 18 20 54 81 82
    LIT_FLOAT (283) 53
    LIT_STR (284) 55
    LIT_CHAR (285) 52
    LOGICAL_AND (286) 69
    LOGICAL_OR (287) 70
    LOGICAL_NOT (288) 58
    EQ (289) 67
    NEQ (290) 68
    GT (291)
    LT (292)
    GTEQ (293) 65
    LTEQ (294) 66
    KW_TRUE (295) 61
    KW_FALSE (296) 62


Nonterminals, with rules where they appear

    $accept (60)
        on left: 0
    statements (61)
        on left: 1 2
        on right: 0 1 87 88 89 90 91 92
    statement (62)
        on left: 3 4 5 6 7 8
        on right: 1
    var (63)
        on left: 9 10
        on right: 24 25 26 27 28 29 30 33 45 72 73 74 75 78 79 80
    field_data_type (64)
        on left: 11 12 13
        on right: 29
    group_data_type (65)
        on left: 14 15 16 17 18
        on right: 27
    ring_data_type (66)
        on left: 19 20 21
        on right: 28
    space_data_type (67)
        on left: 22 23
        on right: 30
    declaration (68)
        on left: 24 25 26 27 28 29 30
        on right: 3 92
    A (69)
        on left: 31 32
        on right: 24 25 26 27 28 29 30
    assignment (70)
        on left: 33
        on right: 4 91
    expression (71)
        on left: 34 35 36 37
        on right: 31 33 71 76 77
    arithmetic_expr (72)
        on left: 38 39 40
        on right: 34 38 39 46 59
    term (73)
        on left: 41 42 43 44
        on right: 38 39 40 41 42 43
    factor (74)
        on left: 45 46 47 48 49 50 51
        on right: 41 42 43 44 47
    constant (75)
        on left: 52 53 54 55
        on right: 48 84 85
    logical_expr (76)
        on left: 56 57 58
        on right: 35 56 58 60 86 90 91 92
    B (77)
        on left: 59 60 61 62
        on right: 56 57
    logical_op (78)
        on left: 63 64 65 66 67 68 69 70
        on right: 56
    return_stmt (79)
        on left: 71
        on right: 6
    call_stmt_standalone (80)
        on left: 72 73
        on right: 5
    call_stmt (81)
        on left: 74 75
        on right: 49
    pass_param_list (82)
        on left: 76 77
        on right: 72 74 76
    unary_operation (83)
        on left: 78 79
        on right: 51 93
    array_access (84)
        on left: 80
        on right: 36 50
    C (85)
        on left: 81 82
        on right: 80 81
    array_decl (86)
        on left: 83
        on right: 37
    array_list (87)
        on left: 84 85
        on right: 83 84
    if_else_conditional (88)
        on left: 86
        on right: 7 88
    D (89)
        on left: 87 88 89
        on right: 86
    loop_stmt (90)
        on left: 90 91 92
        on right: 8
    V (91)
        on left: 93 94
        on right: 91 92
    epsilon (92)
        on left: 95
        on right: 2 32 94


State 0

    0 $accept: • statements $end

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 7
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 1

   24 declaration: KW_LET • var ':' PRIMITIVE_DTYPE A
   25            | KW_LET • var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   26            | KW_LET • var ':' IDENT A
   27            | KW_LET • var ':' group_data_type A
   28            | KW_LET • var ':' ring_data_type A
   29            | KW_LET • var ':' field_data_type A
   30            | KW_LET • var ':' space_data_type A

    IDENT  shift, and go to state 6

    var  go to state 17


State 2

   71 return_stmt: KW_RETURN • expression

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 29
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 3

   86 if_else_conditional: KW_IF • '(' logical_expr ')' D

    '('  shift, and go to state 40


State 4

   90 loop_stmt: KW_WHILE • '(' logical_expr ')' '{' statements '}'

    '('  shift, and go to state 41


State 5

   91 loop_stmt: KW_FOR • '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   92          | KW_FOR • '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

    '('  shift, and go to state 42


State 6

    9 var: IDENT •
   10    | IDENT • '.' IDENT

    '.'  shift, and go to state 43

    $default  reduce using rule 9 (var)


State 7

    0 $accept: statements • $end

    $end  shift, and go to state 44


State 8

    1 statements: statement • statements

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 45
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 9

   33 assignment: var • '=' expression
   72 call_stmt_standalone: var • '(' pass_param_list ')' ';'
   73                     | var • '(' ')' ';'

    '='  shift, and go to state 46
    '('  shift, and go to state 47


State 10

    3 statement: declaration • ';'

    ';'  shift, and go to state 48


State 11

    4 statement: assignment • ';'

    ';'  shift, and go to state 49


State 12

    6 statement: return_stmt • ';'

    ';'  shift, and go to state 50


State 13

    5 statement: call_stmt_standalone •

    $default  reduce using rule 5 (statement)


State 14

    7 statement: if_else_conditional •

    $default  reduce using rule 7 (statement)


State 15

    8 statement: loop_stmt •

    $default  reduce using rule 8 (statement)


State 16

    2 statements: epsilon •

    $default  reduce using rule 2 (statements)


State 17

   24 declaration: KW_LET var • ':' PRIMITIVE_DTYPE A
   25            | KW_LET var • ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   26            | KW_LET var • ':' IDENT A
   27            | KW_LET var • ':' group_data_type A
   28            | KW_LET var • ':' ring_data_type A
   29            | KW_LET var • ':' field_data_type A
   30            | KW_LET var • ':' space_data_type A

    ':'  shift, and go to state 51


State 18

   54 constant: LIT_INT •

    $default  reduce using rule 54 (constant)


State 19

   53 constant: LIT_FLOAT •

    $default  reduce using rule 53 (constant)


State 20

   55 constant: LIT_STR •

    $default  reduce using rule 55 (constant)


State 21

   52 constant: LIT_CHAR •

    $default  reduce using rule 52 (constant)


State 22

   58 logical_expr: LOGICAL_NOT • logical_expr

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 53
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 23

   61 B: KW_TRUE •

    $default  reduce using rule 61 (B)


State 24

   62 B: KW_FALSE •

    $default  reduce using rule 62 (B)


State 25

   47 factor: '-' • factor

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    factor           go to state 56
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 26

   46 factor: '(' • arithmetic_expr ')'
   60 B: '(' • logical_expr ')'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 57
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 58
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 27

   83 array_decl: '[' • array_list ']'

    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21

    constant    go to state 59
    array_list  go to state 60


State 28

   45 factor: var •
   74 call_stmt: var • '(' pass_param_list ')'
   75          | var • '(' ')'
   78 unary_operation: var • '+' '+'
   79                | var • '-' '-'
   80 array_access: var • C

    '+'  shift, and go to state 61
    '-'  shift, and go to state 62
    '('  shift, and go to state 63
    '['  shift, and go to state 64

    '+'       [reduce using rule 45 (factor)]
    '-'       [reduce using rule 45 (factor)]
    $default  reduce using rule 45 (factor)

    C  go to state 65


State 29

   71 return_stmt: KW_RETURN expression •

    $default  reduce using rule 71 (return_stmt)


State 30

   34 expression: arithmetic_expr •
   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   59 B: arithmetic_expr •

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    ';'       reduce using rule 34 (expression)
    ';'       [reduce using rule 59 (B)]
    ','       reduce using rule 34 (expression)
    ','       [reduce using rule 59 (B)]
    ')'       reduce using rule 34 (expression)
    ')'       [reduce using rule 59 (B)]
    $default  reduce using rule 59 (B)


State 31

   40 arithmetic_expr: term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69
    '%'  shift, and go to state 70

    $default  reduce using rule 40 (arithmetic_expr)


State 32

   44 term: factor •

    $default  reduce using rule 44 (term)


State 33

   48 factor: constant •

    $default  reduce using rule 48 (factor)


State 34

   35 expression: logical_expr •

    $default  reduce using rule 35 (expression)


State 35

   56 logical_expr: B • logical_op logical_expr
   57             | B •

    LOGICAL_AND  shift, and go to state 71
    LOGICAL_OR   shift, and go to state 72
    EQ           shift, and go to state 73
    NEQ          shift, and go to state 74
    GTEQ         shift, and go to state 75
    LTEQ         shift, and go to state 76
    '<'          shift, and go to state 77
    '>'          shift, and go to state 78

    $default  reduce using rule 57 (logical_expr)

    logical_op  go to state 79


State 36

   49 factor: call_stmt •

    $default  reduce using rule 49 (factor)


State 37

   51 factor: unary_operation •

    $default  reduce using rule 51 (factor)


State 38

   36 expression: array_access •
   50 factor: array_access •

    ';'       reduce using rule 36 (expression)
    ';'       [reduce using rule 50 (factor)]
    ','       reduce using rule 36 (expression)
    ','       [reduce using rule 50 (factor)]
    ')'       reduce using rule 36 (expression)
    ')'       [reduce using rule 50 (factor)]
    $default  reduce using rule 50 (factor)


State 39

   37 expression: array_decl •

    $default  reduce using rule 37 (expression)


State 40

   86 if_else_conditional: KW_IF '(' • logical_expr ')' D

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 80
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 41

   90 loop_stmt: KW_WHILE '(' • logical_expr ')' '{' statements '}'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 81
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 42

   91 loop_stmt: KW_FOR '(' • assignment ';' logical_expr ';' V ')' '{' statements '}'
   92          | KW_FOR '(' • declaration ';' logical_expr ';' V ')' '{' statements '}'

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 6

    var          go to state 82
    declaration  go to state 83
    assignment   go to state 84


State 43

   10 var: IDENT '.' • IDENT

    IDENT  shift, and go to state 85


State 44

    0 $accept: statements $end •

    $default  accept


State 45

    1 statements: statement statements •

    $default  reduce using rule 1 (statements)


State 46

   33 assignment: var '=' • expression

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 86
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 47

   72 call_stmt_standalone: var '(' • pass_param_list ')' ';'
   73                     | var '(' • ')' ';'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    ')'          shift, and go to state 87
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 88
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    pass_param_list  go to state 89
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 48

    3 statement: declaration ';' •

    $default  reduce using rule 3 (statement)


State 49

    4 statement: assignment ';' •

    $default  reduce using rule 4 (statement)


State 50

    6 statement: return_stmt ';' •

    $default  reduce using rule 6 (statement)


State 51

   24 declaration: KW_LET var ':' • PRIMITIVE_DTYPE A
   25            | KW_LET var ':' • KW_BUF '<' PRIMITIVE_DTYPE '>' A
   26            | KW_LET var ':' • IDENT A
   27            | KW_LET var ':' • group_data_type A
   28            | KW_LET var ':' • ring_data_type A
   29            | KW_LET var ':' • field_data_type A
   30            | KW_LET var ':' • space_data_type A

    KW_CYCLIC        shift, and go to state 90
    KW_BIG_RATIONAL  shift, and go to state 91
    KW_COMPLEX       shift, and go to state 92
    KW_SYMMETRIC     shift, and go to state 93
    KW_ALTERNATING   shift, and go to state 94
    KW_DIHEDRAL      shift, and go to state 95
    KW_INV_MAT       shift, and go to state 96
    KW_BIGINT        shift, and go to state 97
    KW_MATRIX        shift, and go to state 98
    KW_POLYNOMIAL    shift, and go to state 99
    KW_VEC           shift, and go to state 100
    KW_BUF           shift, and go to state 101
    IDENT            shift, and go to state 102
    PRIMITIVE_DTYPE  shift, and go to state 103

    $default  reduce using rule 11 (field_data_type)

    field_data_type  go to state 104
    group_data_type  go to state 105
    ring_data_type   go to state 106
    space_data_type  go to state 107


State 52

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   59 B: arithmetic_expr •

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67

    $default  reduce using rule 59 (B)


State 53

   58 logical_expr: LOGICAL_NOT logical_expr •

    $default  reduce using rule 58 (logical_expr)


State 54

   50 factor: array_access •

    $default  reduce using rule 50 (factor)


State 55

   46 factor: '(' • arithmetic_expr ')'

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    arithmetic_expr  go to state 108
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 56

   47 factor: '-' factor •

    $default  reduce using rule 47 (factor)


State 57

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   46 factor: '(' arithmetic_expr • ')'
   59 B: arithmetic_expr •

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67
    ')'  shift, and go to state 109

    ')'       [reduce using rule 59 (B)]
    $default  reduce using rule 59 (B)


State 58

   60 B: '(' logical_expr • ')'

    ')'  shift, and go to state 110


State 59

   84 array_list: constant • ',' array_list
   85           | constant •

    ','  shift, and go to state 111

    $default  reduce using rule 85 (array_list)


State 60

   83 array_decl: '[' array_list • ']'

    ']'  shift, and go to state 112


State 61

   78 unary_operation: var '+' • '+'

    '+'  shift, and go to state 113


State 62

   79 unary_operation: var '-' • '-'

    '-'  shift, and go to state 114


State 63

   74 call_stmt: var '(' • pass_param_list ')'
   75          | var '(' • ')'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    ')'          shift, and go to state 115
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 88
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    pass_param_list  go to state 116
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 64

   81 C: '[' • LIT_INT ']' C
   82  | '[' • LIT_INT ']'

    LIT_INT  shift, and go to state 117


State 65

   80 array_access: var C •

    $default  reduce using rule 80 (array_access)


State 66

   38 arithmetic_expr: arithmetic_expr '+' • term

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    term             go to state 118
    factor           go to state 32
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 67

   39 arithmetic_expr: arithmetic_expr '-' • term

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    term             go to state 119
    factor           go to state 32
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 68

   41 term: term '*' • factor

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    factor           go to state 120
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 69

   42 term: term '/' • factor

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    factor           go to state 121
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 70

   43 term: term '%' • factor

    IDENT      shift, and go to state 6
    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21
    '-'        shift, and go to state 25
    '('        shift, and go to state 55

    var              go to state 28
    factor           go to state 122
    constant         go to state 33
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 71

   69 logical_op: LOGICAL_AND •

    $default  reduce using rule 69 (logical_op)


State 72

   70 logical_op: LOGICAL_OR •

    $default  reduce using rule 70 (logical_op)


State 73

   67 logical_op: EQ •

    $default  reduce using rule 67 (logical_op)


State 74

   68 logical_op: NEQ •

    $default  reduce using rule 68 (logical_op)


State 75

   65 logical_op: GTEQ •

    $default  reduce using rule 65 (logical_op)


State 76

   66 logical_op: LTEQ •

    $default  reduce using rule 66 (logical_op)


State 77

   64 logical_op: '<' •

    $default  reduce using rule 64 (logical_op)


State 78

   63 logical_op: '>' •

    $default  reduce using rule 63 (logical_op)


State 79

   56 logical_expr: B logical_op • logical_expr

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 123
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 80

   86 if_else_conditional: KW_IF '(' logical_expr • ')' D

    ')'  shift, and go to state 124


State 81

   90 loop_stmt: KW_WHILE '(' logical_expr • ')' '{' statements '}'

    ')'  shift, and go to state 125


State 82

   33 assignment: var • '=' expression

    '='  shift, and go to state 46


State 83

   92 loop_stmt: KW_FOR '(' declaration • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 126


State 84

   91 loop_stmt: KW_FOR '(' assignment • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 127


State 85

   10 var: IDENT '.' IDENT •

    $default  reduce using rule 10 (var)


State 86

   33 assignment: var '=' expression •

    $default  reduce using rule 33 (assignment)


State 87

   73 call_stmt_standalone: var '(' ')' • ';'

    ';'  shift, and go to state 128


State 88

   76 pass_param_list: expression • ',' pass_param_list
   77                | expression •

    ','  shift, and go to state 129

    $default  reduce using rule 77 (pass_param_list)


State 89

   72 call_stmt_standalone: var '(' pass_param_list • ')' ';'

    ')'  shift, and go to state 130


State 90

   14 group_data_type: KW_CYCLIC • '<' LIT_INT '>'

    '<'  shift, and go to state 131


State 91

   12 field_data_type: KW_BIG_RATIONAL •

    $default  reduce using rule 12 (field_data_type)


State 92

   13 field_data_type: KW_COMPLEX •

    $default  reduce using rule 13 (field_data_type)


State 93

   15 group_data_type: KW_SYMMETRIC • '<' LIT_INT '>'

    '<'  shift, and go to state 132


State 94

   16 group_data_type: KW_ALTERNATING • '<' LIT_INT '>'

    '<'  shift, and go to state 133


State 95

   17 group_data_type: KW_DIHEDRAL • '<' LIT_INT '>'

    '<'  shift, and go to state 134


State 96

   18 group_data_type: KW_INV_MAT • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 135


State 97

   19 ring_data_type: KW_BIGINT •

    $default  reduce using rule 19 (ring_data_type)


State 98

   20 ring_data_type: KW_MATRIX • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 136


State 99

   21 ring_data_type: KW_POLYNOMIAL • '<' IDENT '>'

    '<'  shift, and go to state 137


State 100

   22 space_data_type: KW_VEC • '<' IDENT '>'
   23                | KW_VEC • '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 138


State 101

   25 declaration: KW_LET var ':' KW_BUF • '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 139


State 102

   26 declaration: KW_LET var ':' IDENT • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 141
    epsilon  go to state 142


State 103

   24 declaration: KW_LET var ':' PRIMITIVE_DTYPE • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 143
    epsilon  go to state 142


State 104

   29 declaration: KW_LET var ':' field_data_type • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 144
    epsilon  go to state 142


State 105

   27 declaration: KW_LET var ':' group_data_type • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 145
    epsilon  go to state 142


State 106

   28 declaration: KW_LET var ':' ring_data_type • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 146
    epsilon  go to state 142


State 107

   30 declaration: KW_LET var ':' space_data_type • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 147
    epsilon  go to state 142


State 108

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   46 factor: '(' arithmetic_expr • ')'

    '+'  shift, and go to state 66
    '-'  shift, and go to state 67
    ')'  shift, and go to state 109


State 109

   46 factor: '(' arithmetic_expr ')' •

    $default  reduce using rule 46 (factor)


State 110

   60 B: '(' logical_expr ')' •

    $default  reduce using rule 60 (B)


State 111

   84 array_list: constant ',' • array_list

    LIT_INT    shift, and go to state 18
    LIT_FLOAT  shift, and go to state 19
    LIT_STR    shift, and go to state 20
    LIT_CHAR   shift, and go to state 21

    constant    go to state 59
    array_list  go to state 148


State 112

   83 array_decl: '[' array_list ']' •

    $default  reduce using rule 83 (array_decl)


State 113

   78 unary_operation: var '+' '+' •

    $default  reduce using rule 78 (unary_operation)


State 114

   79 unary_operation: var '-' '-' •

    $default  reduce using rule 79 (unary_operation)


State 115

   75 call_stmt: var '(' ')' •

    $default  reduce using rule 75 (call_stmt)


State 116

   74 call_stmt: var '(' pass_param_list • ')'

    ')'  shift, and go to state 149


State 117

   81 C: '[' LIT_INT • ']' C
   82  | '[' LIT_INT • ']'

    ']'  shift, and go to state 150


State 118

   38 arithmetic_expr: arithmetic_expr '+' term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69
    '%'  shift, and go to state 70

    $default  reduce using rule 38 (arithmetic_expr)


State 119

   39 arithmetic_expr: arithmetic_expr '-' term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 68
    '/'  shift, and go to state 69
    '%'  shift, and go to state 70

    $default  reduce using rule 39 (arithmetic_expr)


State 120

   41 term: term '*' factor •

    $default  reduce using rule 41 (term)


State 121

   42 term: term '/' factor •

    $default  reduce using rule 42 (term)


State 122

   43 term: term '%' factor •

    $default  reduce using rule 43 (term)


State 123

   56 logical_expr: B logical_op logical_expr •

    $default  reduce using rule 56 (logical_expr)


State 124

   86 if_else_conditional: KW_IF '(' logical_expr ')' • D

    '{'  shift, and go to state 151

    D  go to state 152


State 125

   90 loop_stmt: KW_WHILE '(' logical_expr ')' • '{' statements '}'

    '{'  shift, and go to state 153


State 126

   92 loop_stmt: KW_FOR '(' declaration ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 154
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 127

   91 loop_stmt: KW_FOR '(' assignment ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26

    var              go to state 28
    arithmetic_expr  go to state 52
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 155
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 54


State 128

   73 call_stmt_standalone: var '(' ')' ';' •

    $default  reduce using rule 73 (call_stmt_standalone)


State 129

   76 pass_param_list: expression ',' • pass_param_list

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 88
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    pass_param_list  go to state 156
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 130

   72 call_stmt_standalone: var '(' pass_param_list ')' • ';'

    ';'  shift, and go to state 157


State 131

   14 group_data_type: KW_CYCLIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 158


State 132

   15 group_data_type: KW_SYMMETRIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 159


State 133

   16 group_data_type: KW_ALTERNATING '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 160


State 134

   17 group_data_type: KW_DIHEDRAL '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 161


State 135

   18 group_data_type: KW_INV_MAT '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 162


State 136

   20 ring_data_type: KW_MATRIX '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 163


State 137

   21 ring_data_type: KW_POLYNOMIAL '<' • IDENT '>'

    IDENT  shift, and go to state 164


State 138

   22 space_data_type: KW_VEC '<' • IDENT '>'
   23                | KW_VEC '<' • PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 165
    PRIMITIVE_DTYPE  shift, and go to state 166


State 139

   25 declaration: KW_LET var ':' KW_BUF '<' • PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 167


State 140

   31 A: '=' • expression

    IDENT        shift, and go to state 6
    LIT_INT      shift, and go to state 18
    LIT_FLOAT    shift, and go to state 19
    LIT_STR      shift, and go to state 20
    LIT_CHAR     shift, and go to state 21
    LOGICAL_NOT  shift, and go to state 22
    KW_TRUE      shift, and go to state 23
    KW_FALSE     shift, and go to state 24
    '-'          shift, and go to state 25
    '('          shift, and go to state 26
    '['          shift, and go to state 27

    var              go to state 28
    expression       go to state 168
    arithmetic_expr  go to state 30
    term             go to state 31
    factor           go to state 32
    constant         go to state 33
    logical_expr     go to state 34
    B                go to state 35
    call_stmt        go to state 36
    unary_operation  go to state 37
    array_access     go to state 38
    array_decl       go to state 39


State 141

   26 declaration: KW_LET var ':' IDENT A •

    $default  reduce using rule 26 (declaration)


State 142

   32 A: epsilon •

    $default  reduce using rule 32 (A)


State 143

   24 declaration: KW_LET var ':' PRIMITIVE_DTYPE A •

    $default  reduce using rule 24 (declaration)


State 144

   29 declaration: KW_LET var ':' field_data_type A •

    $default  reduce using rule 29 (declaration)


State 145

   27 declaration: KW_LET var ':' group_data_type A •

    $default  reduce using rule 27 (declaration)


State 146

   28 declaration: KW_LET var ':' ring_data_type A •

    $default  reduce using rule 28 (declaration)


State 147

   30 declaration: KW_LET var ':' space_data_type A •

    $default  reduce using rule 30 (declaration)


State 148

   84 array_list: constant ',' array_list •

    $default  reduce using rule 84 (array_list)


State 149

   74 call_stmt: var '(' pass_param_list ')' •

    $default  reduce using rule 74 (call_stmt)


State 150

   81 C: '[' LIT_INT ']' • C
   82  | '[' LIT_INT ']' •

    '['  shift, and go to state 64

    $default  reduce using rule 82 (C)

    C  go to state 169


State 151

   87 D: '{' • statements '}'
   88  | '{' • statements '}' KW_ELSE if_else_conditional
   89  | '{' • statements '}' KW_ELSE '{' statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 170
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 152

   86 if_else_conditional: KW_IF '(' logical_expr ')' D •

    $default  reduce using rule 86 (if_else_conditional)


State 153

   90 loop_stmt: KW_WHILE '(' logical_expr ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 171
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 154

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 172


State 155

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 173


State 156

   76 pass_param_list: expression ',' pass_param_list •

    $default  reduce using rule 76 (pass_param_list)


State 157

   72 call_stmt_standalone: var '(' pass_param_list ')' ';' •

    $default  reduce using rule 72 (call_stmt_standalone)


State 158

   14 group_data_type: KW_CYCLIC '<' LIT_INT • '>'

    '>'  shift, and go to state 174


State 159

   15 group_data_type: KW_SYMMETRIC '<' LIT_INT • '>'

    '>'  shift, and go to state 175


State 160

   16 group_data_type: KW_ALTERNATING '<' LIT_INT • '>'

    '>'  shift, and go to state 176


State 161

   17 group_data_type: KW_DIHEDRAL '<' LIT_INT • '>'

    '>'  shift, and go to state 177


State 162

   18 group_data_type: KW_INV_MAT '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 178


State 163

   20 ring_data_type: KW_MATRIX '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 179


State 164

   21 ring_data_type: KW_POLYNOMIAL '<' IDENT • '>'

    '>'  shift, and go to state 180


State 165

   22 space_data_type: KW_VEC '<' IDENT • '>'

    '>'  shift, and go to state 181


State 166

   23 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE • '>'

    '>'  shift, and go to state 182


State 167

   25 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE • '>' A

    '>'  shift, and go to state 183


State 168

   31 A: '=' expression •

    $default  reduce using rule 31 (A)


State 169

   81 C: '[' LIT_INT ']' C •

    $default  reduce using rule 81 (C)


State 170

   87 D: '{' statements • '}'
   88  | '{' statements • '}' KW_ELSE if_else_conditional
   89  | '{' statements • '}' KW_ELSE '{' statements '}'

    '}'  shift, and go to state 184


State 171

   90 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements • '}'

    '}'  shift, and go to state 185


State 172

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    var              go to state 186
    unary_operation  go to state 187
    V                go to state 188
    epsilon          go to state 189


State 173

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    var              go to state 186
    unary_operation  go to state 187
    V                go to state 190
    epsilon          go to state 189


State 174

   14 group_data_type: KW_CYCLIC '<' LIT_INT '>' •

    $default  reduce using rule 14 (group_data_type)


State 175

   15 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' •

    $default  reduce using rule 15 (group_data_type)


State 176

   16 group_data_type: KW_ALTERNATING '<' LIT_INT '>' •

    $default  reduce using rule 16 (group_data_type)


State 177

   17 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' •

    $default  reduce using rule 17 (group_data_type)


State 178

   18 group_data_type: KW_INV_MAT '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 191


State 179

   20 ring_data_type: KW_MATRIX '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 192


State 180

   21 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' •

    $default  reduce using rule 21 (ring_data_type)


State 181

   22 space_data_type: KW_VEC '<' IDENT '>' •

    $default  reduce using rule 22 (space_data_type)


State 182

   23 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' •

    $default  reduce using rule 23 (space_data_type)


State 183

   25 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' • A

    '='  shift, and go to state 140

    $default  reduce using rule 95 (epsilon)

    A        go to state 193
    epsilon  go to state 142


State 184

   87 D: '{' statements '}' •
   88  | '{' statements '}' • KW_ELSE if_else_conditional
   89  | '{' statements '}' • KW_ELSE '{' statements '}'

    KW_ELSE  shift, and go to state 194

    $default  reduce using rule 87 (D)


State 185

   90 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}' •

    $default  reduce using rule 90 (loop_stmt)


State 186

   78 unary_operation: var • '+' '+'
   79                | var • '-' '-'

    '+'  shift, and go to state 61
    '-'  shift, and go to state 62


State 187

   93 V: unary_operation •

    $default  reduce using rule 93 (V)


State 188

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 195


State 189

   94 V: epsilon •

    $default  reduce using rule 94 (V)


State 190

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 196


State 191

   18 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 197


State 192

   20 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 198


State 193

   25 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A •

    $default  reduce using rule 25 (declaration)


State 194

   88 D: '{' statements '}' KW_ELSE • if_else_conditional
   89  | '{' statements '}' KW_ELSE • '{' statements '}'

    KW_IF  shift, and go to state 3
    '{'    shift, and go to state 199

    if_else_conditional  go to state 200


State 195

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 201


State 196

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 202


State 197

   18 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 18 (group_data_type)


State 198

   20 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 20 (ring_data_type)


State 199

   89 D: '{' statements '}' KW_ELSE '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 203
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 200

   88 D: '{' statements '}' KW_ELSE if_else_conditional •

    $default  reduce using rule 88 (D)


State 201

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 204
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 202

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    IDENT      shift, and go to state 6

    $default  reduce using rule 95 (epsilon)

    statements            go to state 205
    statement             go to state 8
    var                   go to state 9
    declaration           go to state 10
    assignment            go to state 11
    return_stmt           go to state 12
    call_stmt_standalone  go to state 13
    if_else_conditional   go to state 14
    loop_stmt             go to state 15
    epsilon               go to state 16


State 203

   89 D: '{' statements '}' KW_ELSE '{' statements • '}'

    '}'  shift, and go to state 206


State 204

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 207


State 205

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 208


State 206

   89 D: '{' statements '}' KW_ELSE '{' statements '}' •

    $default  reduce using rule 89 (D)


State 207

   92 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 92 (loop_stmt)


State 208

   91 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 91 (loop_stmt)
