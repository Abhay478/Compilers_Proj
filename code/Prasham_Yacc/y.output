Terminals unused in grammar

    KW_BREAK
    GT
    LT


State 30 conflicts: 2 shift/reduce
State 32 conflicts: 3 reduce/reduce
State 40 conflicts: 3 reduce/reduce
State 60 conflicts: 1 shift/reduce


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional
    8          | switch_case
    9          | loop_stmt

   10 var: IDENT
   11    | IDENT '.' IDENT

   12 field_data_type: ε
   13                | KW_BIG_RATIONAL
   14                | KW_COMPLEX

   15 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   16                | KW_SYMMETRIC '<' LIT_INT '>'
   17                | KW_ALTERNATING '<' LIT_INT '>'
   18                | KW_DIHEDRAL '<' LIT_INT '>'
   19                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   20 ring_data_type: KW_BIGINT
   21               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   22               | KW_POLYNOMIAL '<' IDENT '>'

   23 space_data_type: KW_VEC '<' IDENT '>'
   24                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   25 declaration: KW_LET var ':' PRIMITIVE_DTYPE A
   26            | KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   27            | KW_LET var ':' IDENT A
   28            | KW_LET var ':' group_data_type A
   29            | KW_LET var ':' ring_data_type A
   30            | KW_LET var ':' field_data_type A
   31            | KW_LET var ':' space_data_type A

   32 A: '=' expression
   33  | epsilon

   34 assignment: var '=' expression

   35 expression: arithmetic_expr
   36           | logical_expr
   37           | array_access
   38           | array_decl

   39 arithmetic_expr: arithmetic_expr '+' term
   40                | arithmetic_expr '-' term
   41                | term

   42 term: term '*' factor
   43     | term '/' factor
   44     | term '%' factor
   45     | factor

   46 factor: var
   47       | '(' arithmetic_expr ')'
   48       | '-' factor
   49       | constant
   50       | call_stmt
   51       | array_access
   52       | unary_operation

   53 constant: LIT_CHAR
   54         | LIT_FLOAT
   55         | LIT_INT
   56         | LIT_STR

   57 logical_expr: B logical_op logical_expr
   58             | B
   59             | LOGICAL_NOT logical_expr

   60 B: arithmetic_expr
   61  | '(' logical_expr ')'
   62  | KW_TRUE
   63  | KW_FALSE

   64 logical_op: '>'
   65           | '<'
   66           | GTEQ
   67           | LTEQ
   68           | EQ
   69           | NEQ
   70           | LOGICAL_AND
   71           | LOGICAL_OR

   72 return_stmt: KW_RETURN expression

   73 call_stmt_standalone: var '(' pass_param_list ')' ';'
   74                     | var '(' ')' ';'

   75 call_stmt: var '(' pass_param_list ')'
   76          | var '(' ')'

   77 pass_param_list: expression ',' pass_param_list
   78                | expression

   79 unary_operation: var '+' '+'
   80                | var '-' '-'

   81 array_access: var C

   82 C: '[' LIT_INT ']' C
   83  | '[' LIT_INT ']'

   84 array_decl: '[' array_list ']'

   85 array_list: constant ',' array_list
   86           | constant

   87 if_else_conditional: KW_IF '(' logical_expr ')' D

   88 D: '{' statements '}'
   89  | '{' statements '}' KW_ELSE if_else_conditional
   90  | '{' statements '}' KW_ELSE '{' statements '}'

   91 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}'
   92          | KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   93          | KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

   94 V: unary_operation
   95  | epsilon

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' expression ')' '{' switch_case_blocks '}'

   98 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks
   99                   | KW_CASE LIT_INT ':' statements switch_case_blocks
  100                   | KW_CASE LIT_FLOAT ':' statements switch_case_blocks
  101                   | epsilon

  102 epsilon: ε


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 44
    '(' (40) 47 61 73 74 75 76 87 91 92 93 96 97
    ')' (41) 47 61 73 74 75 76 87 91 92 93 96 97
    '*' (42) 42
    '+' (43) 39 79
    ',' (44) 19 21 77 85
    '-' (45) 40 48 80
    '.' (46) 11
    '/' (47) 43
    ':' (58) 25 26 27 28 29 30 31 96 98 99 100
    ';' (59) 3 4 6 73 74 92 93
    '<' (60) 15 16 17 18 19 21 22 23 24 26 65
    '=' (61) 32 34
    '>' (62) 15 16 17 18 19 21 22 23 24 26 64
    '[' (91) 82 83 84
    ']' (93) 82 83 84
    '{' (123) 88 89 90 91 92 93 96 97
    '}' (125) 88 89 90 91 92 93 96 97
    error (256)
    KW_LET (258) 25 26 27 28 29 30 31
    KW_RETURN (259) 72
    KW_IF (260) 87
    KW_ELSE (261) 89 90
    KW_WHILE (262) 91
    KW_FOR (263) 92 93
    KW_SWITCH (264) 96 97
    KW_CASE (265) 98 99 100
    KW_DEFAULT (266) 96
    KW_BREAK (267)
    KW_CYCLIC (268) 15
    KW_BIG_RATIONAL (269) 13
    KW_COMPLEX (270) 14
    KW_SYMMETRIC (271) 16
    KW_ALTERNATING (272) 17
    KW_DIHEDRAL (273) 18
    KW_INV_MAT (274) 19
    KW_BIGINT (275) 20
    KW_MATRIX (276) 21
    KW_POLYNOMIAL (277) 22
    KW_VEC (278) 23 24
    KW_BUF (279) 26
    IDENT (280) 10 11 19 21 22 23 27
    PRIMITIVE_DTYPE (281) 24 25 26
    LIT_INT (282) 15 16 17 18 19 21 55 82 83 99
    LIT_FLOAT (283) 54 100
    LIT_STR (284) 56
    LIT_CHAR (285) 53 98
    LOGICAL_AND (286) 70
    LOGICAL_OR (287) 71
    LOGICAL_NOT (288) 59
    EQ (289) 68
    NEQ (290) 69
    GT (291)
    LT (292)
    GTEQ (293) 66
    LTEQ (294) 67
    KW_TRUE (295) 62
    KW_FALSE (296) 63


Nonterminals, with rules where they appear

    $accept (60)
        on left: 0
    statements (61)
        on left: 1 2
        on right: 0 1 88 89 90 91 92 93 96 98 99 100
    statement (62)
        on left: 3 4 5 6 7 8 9
        on right: 1
    var (63)
        on left: 10 11
        on right: 25 26 27 28 29 30 31 34 46 73 74 75 76 79 80 81
    field_data_type (64)
        on left: 12 13 14
        on right: 30
    group_data_type (65)
        on left: 15 16 17 18 19
        on right: 28
    ring_data_type (66)
        on left: 20 21 22
        on right: 29
    space_data_type (67)
        on left: 23 24
        on right: 31
    declaration (68)
        on left: 25 26 27 28 29 30 31
        on right: 3 93
    A (69)
        on left: 32 33
        on right: 25 26 27 28 29 30 31
    assignment (70)
        on left: 34
        on right: 4 92
    expression (71)
        on left: 35 36 37 38
        on right: 32 34 72 77 78 96 97
    arithmetic_expr (72)
        on left: 39 40 41
        on right: 35 39 40 47 60
    term (73)
        on left: 42 43 44 45
        on right: 39 40 41 42 43 44
    factor (74)
        on left: 46 47 48 49 50 51 52
        on right: 42 43 44 45 48
    constant (75)
        on left: 53 54 55 56
        on right: 49 85 86
    logical_expr (76)
        on left: 57 58 59
        on right: 36 57 59 61 87 91 92 93
    B (77)
        on left: 60 61 62 63
        on right: 57 58
    logical_op (78)
        on left: 64 65 66 67 68 69 70 71
        on right: 57
    return_stmt (79)
        on left: 72
        on right: 6
    call_stmt_standalone (80)
        on left: 73 74
        on right: 5
    call_stmt (81)
        on left: 75 76
        on right: 50
    pass_param_list (82)
        on left: 77 78
        on right: 73 75 77
    unary_operation (83)
        on left: 79 80
        on right: 52 94
    array_access (84)
        on left: 81
        on right: 37 51
    C (85)
        on left: 82 83
        on right: 81 82
    array_decl (86)
        on left: 84
        on right: 38
    array_list (87)
        on left: 85 86
        on right: 84 85
    if_else_conditional (88)
        on left: 87
        on right: 7 89
    D (89)
        on left: 88 89 90
        on right: 87
    loop_stmt (90)
        on left: 91 92 93
        on right: 9
    V (91)
        on left: 94 95
        on right: 92 93
    switch_case (92)
        on left: 96 97
        on right: 8
    switch_case_blocks (93)
        on left: 98 99 100 101
        on right: 96 97 98 99 100
    epsilon (94)
        on left: 102
        on right: 2 33 95 101


State 0

    0 $accept: • statements $end

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 8
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 1

   25 declaration: KW_LET • var ':' PRIMITIVE_DTYPE A
   26            | KW_LET • var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   27            | KW_LET • var ':' IDENT A
   28            | KW_LET • var ':' group_data_type A
   29            | KW_LET • var ':' ring_data_type A
   30            | KW_LET • var ':' field_data_type A
   31            | KW_LET • var ':' space_data_type A

    IDENT  shift, and go to state 7

    var  go to state 19


State 2

   72 return_stmt: KW_RETURN • expression

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 31
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 3

   87 if_else_conditional: KW_IF • '(' logical_expr ')' D

    '('  shift, and go to state 42


State 4

   91 loop_stmt: KW_WHILE • '(' logical_expr ')' '{' statements '}'

    '('  shift, and go to state 43


State 5

   92 loop_stmt: KW_FOR • '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   93          | KW_FOR • '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

    '('  shift, and go to state 44


State 6

   96 switch_case: KW_SWITCH • '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH • '(' expression ')' '{' switch_case_blocks '}'

    '('  shift, and go to state 45


State 7

   10 var: IDENT •
   11    | IDENT • '.' IDENT

    '.'  shift, and go to state 46

    $default  reduce using rule 10 (var)


State 8

    0 $accept: statements • $end

    $end  shift, and go to state 47


State 9

    1 statements: statement • statements

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 48
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 10

   34 assignment: var • '=' expression
   73 call_stmt_standalone: var • '(' pass_param_list ')' ';'
   74                     | var • '(' ')' ';'

    '='  shift, and go to state 49
    '('  shift, and go to state 50


State 11

    3 statement: declaration • ';'

    ';'  shift, and go to state 51


State 12

    4 statement: assignment • ';'

    ';'  shift, and go to state 52


State 13

    6 statement: return_stmt • ';'

    ';'  shift, and go to state 53


State 14

    5 statement: call_stmt_standalone •

    $default  reduce using rule 5 (statement)


State 15

    7 statement: if_else_conditional •

    $default  reduce using rule 7 (statement)


State 16

    9 statement: loop_stmt •

    $default  reduce using rule 9 (statement)


State 17

    8 statement: switch_case •

    $default  reduce using rule 8 (statement)


State 18

    2 statements: epsilon •

    $default  reduce using rule 2 (statements)


State 19

   25 declaration: KW_LET var • ':' PRIMITIVE_DTYPE A
   26            | KW_LET var • ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   27            | KW_LET var • ':' IDENT A
   28            | KW_LET var • ':' group_data_type A
   29            | KW_LET var • ':' ring_data_type A
   30            | KW_LET var • ':' field_data_type A
   31            | KW_LET var • ':' space_data_type A

    ':'  shift, and go to state 54


State 20

   55 constant: LIT_INT •

    $default  reduce using rule 55 (constant)


State 21

   54 constant: LIT_FLOAT •

    $default  reduce using rule 54 (constant)


State 22

   56 constant: LIT_STR •

    $default  reduce using rule 56 (constant)


State 23

   53 constant: LIT_CHAR •

    $default  reduce using rule 53 (constant)


State 24

   59 logical_expr: LOGICAL_NOT • logical_expr

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 56
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 25

   62 B: KW_TRUE •

    $default  reduce using rule 62 (B)


State 26

   63 B: KW_FALSE •

    $default  reduce using rule 63 (B)


State 27

   48 factor: '-' • factor

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    factor           go to state 59
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 28

   47 factor: '(' • arithmetic_expr ')'
   61 B: '(' • logical_expr ')'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 60
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 61
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 29

   84 array_decl: '[' • array_list ']'

    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23

    constant    go to state 62
    array_list  go to state 63


State 30

   46 factor: var •
   75 call_stmt: var • '(' pass_param_list ')'
   76          | var • '(' ')'
   79 unary_operation: var • '+' '+'
   80                | var • '-' '-'
   81 array_access: var • C

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '('  shift, and go to state 66
    '['  shift, and go to state 67

    '+'       [reduce using rule 46 (factor)]
    '-'       [reduce using rule 46 (factor)]
    $default  reduce using rule 46 (factor)

    C  go to state 68


State 31

   72 return_stmt: KW_RETURN expression •

    $default  reduce using rule 72 (return_stmt)


State 32

   35 expression: arithmetic_expr •
   39 arithmetic_expr: arithmetic_expr • '+' term
   40                | arithmetic_expr • '-' term
   60 B: arithmetic_expr •

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70

    ';'       reduce using rule 35 (expression)
    ';'       [reduce using rule 60 (B)]
    ','       reduce using rule 35 (expression)
    ','       [reduce using rule 60 (B)]
    ')'       reduce using rule 35 (expression)
    ')'       [reduce using rule 60 (B)]
    $default  reduce using rule 60 (B)


State 33

   41 arithmetic_expr: term •
   42 term: term • '*' factor
   43     | term • '/' factor
   44     | term • '%' factor

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 41 (arithmetic_expr)


State 34

   45 term: factor •

    $default  reduce using rule 45 (term)


State 35

   49 factor: constant •

    $default  reduce using rule 49 (factor)


State 36

   36 expression: logical_expr •

    $default  reduce using rule 36 (expression)


State 37

   57 logical_expr: B • logical_op logical_expr
   58             | B •

    LOGICAL_AND  shift, and go to state 74
    LOGICAL_OR   shift, and go to state 75
    EQ           shift, and go to state 76
    NEQ          shift, and go to state 77
    GTEQ         shift, and go to state 78
    LTEQ         shift, and go to state 79
    '<'          shift, and go to state 80
    '>'          shift, and go to state 81

    $default  reduce using rule 58 (logical_expr)

    logical_op  go to state 82


State 38

   50 factor: call_stmt •

    $default  reduce using rule 50 (factor)


State 39

   52 factor: unary_operation •

    $default  reduce using rule 52 (factor)


State 40

   37 expression: array_access •
   51 factor: array_access •

    ';'       reduce using rule 37 (expression)
    ';'       [reduce using rule 51 (factor)]
    ','       reduce using rule 37 (expression)
    ','       [reduce using rule 51 (factor)]
    ')'       reduce using rule 37 (expression)
    ')'       [reduce using rule 51 (factor)]
    $default  reduce using rule 51 (factor)


State 41

   38 expression: array_decl •

    $default  reduce using rule 38 (expression)


State 42

   87 if_else_conditional: KW_IF '(' • logical_expr ')' D

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 83
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 43

   91 loop_stmt: KW_WHILE '(' • logical_expr ')' '{' statements '}'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 84
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 44

   92 loop_stmt: KW_FOR '(' • assignment ';' logical_expr ';' V ')' '{' statements '}'
   93          | KW_FOR '(' • declaration ';' logical_expr ';' V ')' '{' statements '}'

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 7

    var          go to state 85
    declaration  go to state 86
    assignment   go to state 87


State 45

   96 switch_case: KW_SWITCH '(' • expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' • expression ')' '{' switch_case_blocks '}'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 88
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 46

   11 var: IDENT '.' • IDENT

    IDENT  shift, and go to state 89


State 47

    0 $accept: statements $end •

    $default  accept


State 48

    1 statements: statement statements •

    $default  reduce using rule 1 (statements)


State 49

   34 assignment: var '=' • expression

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 90
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 50

   73 call_stmt_standalone: var '(' • pass_param_list ')' ';'
   74                     | var '(' • ')' ';'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    ')'          shift, and go to state 91
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 92
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    pass_param_list  go to state 93
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 51

    3 statement: declaration ';' •

    $default  reduce using rule 3 (statement)


State 52

    4 statement: assignment ';' •

    $default  reduce using rule 4 (statement)


State 53

    6 statement: return_stmt ';' •

    $default  reduce using rule 6 (statement)


State 54

   25 declaration: KW_LET var ':' • PRIMITIVE_DTYPE A
   26            | KW_LET var ':' • KW_BUF '<' PRIMITIVE_DTYPE '>' A
   27            | KW_LET var ':' • IDENT A
   28            | KW_LET var ':' • group_data_type A
   29            | KW_LET var ':' • ring_data_type A
   30            | KW_LET var ':' • field_data_type A
   31            | KW_LET var ':' • space_data_type A

    KW_CYCLIC        shift, and go to state 94
    KW_BIG_RATIONAL  shift, and go to state 95
    KW_COMPLEX       shift, and go to state 96
    KW_SYMMETRIC     shift, and go to state 97
    KW_ALTERNATING   shift, and go to state 98
    KW_DIHEDRAL      shift, and go to state 99
    KW_INV_MAT       shift, and go to state 100
    KW_BIGINT        shift, and go to state 101
    KW_MATRIX        shift, and go to state 102
    KW_POLYNOMIAL    shift, and go to state 103
    KW_VEC           shift, and go to state 104
    KW_BUF           shift, and go to state 105
    IDENT            shift, and go to state 106
    PRIMITIVE_DTYPE  shift, and go to state 107

    $default  reduce using rule 12 (field_data_type)

    field_data_type  go to state 108
    group_data_type  go to state 109
    ring_data_type   go to state 110
    space_data_type  go to state 111


State 55

   39 arithmetic_expr: arithmetic_expr • '+' term
   40                | arithmetic_expr • '-' term
   60 B: arithmetic_expr •

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70

    $default  reduce using rule 60 (B)


State 56

   59 logical_expr: LOGICAL_NOT logical_expr •

    $default  reduce using rule 59 (logical_expr)


State 57

   51 factor: array_access •

    $default  reduce using rule 51 (factor)


State 58

   47 factor: '(' • arithmetic_expr ')'

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    arithmetic_expr  go to state 112
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 59

   48 factor: '-' factor •

    $default  reduce using rule 48 (factor)


State 60

   39 arithmetic_expr: arithmetic_expr • '+' term
   40                | arithmetic_expr • '-' term
   47 factor: '(' arithmetic_expr • ')'
   60 B: arithmetic_expr •

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    ')'  shift, and go to state 113

    ')'       [reduce using rule 60 (B)]
    $default  reduce using rule 60 (B)


State 61

   61 B: '(' logical_expr • ')'

    ')'  shift, and go to state 114


State 62

   85 array_list: constant • ',' array_list
   86           | constant •

    ','  shift, and go to state 115

    $default  reduce using rule 86 (array_list)


State 63

   84 array_decl: '[' array_list • ']'

    ']'  shift, and go to state 116


State 64

   79 unary_operation: var '+' • '+'

    '+'  shift, and go to state 117


State 65

   80 unary_operation: var '-' • '-'

    '-'  shift, and go to state 118


State 66

   75 call_stmt: var '(' • pass_param_list ')'
   76          | var '(' • ')'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    ')'          shift, and go to state 119
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 92
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    pass_param_list  go to state 120
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 67

   82 C: '[' • LIT_INT ']' C
   83  | '[' • LIT_INT ']'

    LIT_INT  shift, and go to state 121


State 68

   81 array_access: var C •

    $default  reduce using rule 81 (array_access)


State 69

   39 arithmetic_expr: arithmetic_expr '+' • term

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    term             go to state 122
    factor           go to state 34
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 70

   40 arithmetic_expr: arithmetic_expr '-' • term

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    term             go to state 123
    factor           go to state 34
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 71

   42 term: term '*' • factor

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    factor           go to state 124
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 72

   43 term: term '/' • factor

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    factor           go to state 125
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 73

   44 term: term '%' • factor

    IDENT      shift, and go to state 7
    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23
    '-'        shift, and go to state 27
    '('        shift, and go to state 58

    var              go to state 30
    factor           go to state 126
    constant         go to state 35
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 74

   70 logical_op: LOGICAL_AND •

    $default  reduce using rule 70 (logical_op)


State 75

   71 logical_op: LOGICAL_OR •

    $default  reduce using rule 71 (logical_op)


State 76

   68 logical_op: EQ •

    $default  reduce using rule 68 (logical_op)


State 77

   69 logical_op: NEQ •

    $default  reduce using rule 69 (logical_op)


State 78

   66 logical_op: GTEQ •

    $default  reduce using rule 66 (logical_op)


State 79

   67 logical_op: LTEQ •

    $default  reduce using rule 67 (logical_op)


State 80

   65 logical_op: '<' •

    $default  reduce using rule 65 (logical_op)


State 81

   64 logical_op: '>' •

    $default  reduce using rule 64 (logical_op)


State 82

   57 logical_expr: B logical_op • logical_expr

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 127
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 83

   87 if_else_conditional: KW_IF '(' logical_expr • ')' D

    ')'  shift, and go to state 128


State 84

   91 loop_stmt: KW_WHILE '(' logical_expr • ')' '{' statements '}'

    ')'  shift, and go to state 129


State 85

   34 assignment: var • '=' expression

    '='  shift, and go to state 49


State 86

   93 loop_stmt: KW_FOR '(' declaration • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 130


State 87

   92 loop_stmt: KW_FOR '(' assignment • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 131


State 88

   96 switch_case: KW_SWITCH '(' expression • ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' expression • ')' '{' switch_case_blocks '}'

    ')'  shift, and go to state 132


State 89

   11 var: IDENT '.' IDENT •

    $default  reduce using rule 11 (var)


State 90

   34 assignment: var '=' expression •

    $default  reduce using rule 34 (assignment)


State 91

   74 call_stmt_standalone: var '(' ')' • ';'

    ';'  shift, and go to state 133


State 92

   77 pass_param_list: expression • ',' pass_param_list
   78                | expression •

    ','  shift, and go to state 134

    $default  reduce using rule 78 (pass_param_list)


State 93

   73 call_stmt_standalone: var '(' pass_param_list • ')' ';'

    ')'  shift, and go to state 135


State 94

   15 group_data_type: KW_CYCLIC • '<' LIT_INT '>'

    '<'  shift, and go to state 136


State 95

   13 field_data_type: KW_BIG_RATIONAL •

    $default  reduce using rule 13 (field_data_type)


State 96

   14 field_data_type: KW_COMPLEX •

    $default  reduce using rule 14 (field_data_type)


State 97

   16 group_data_type: KW_SYMMETRIC • '<' LIT_INT '>'

    '<'  shift, and go to state 137


State 98

   17 group_data_type: KW_ALTERNATING • '<' LIT_INT '>'

    '<'  shift, and go to state 138


State 99

   18 group_data_type: KW_DIHEDRAL • '<' LIT_INT '>'

    '<'  shift, and go to state 139


State 100

   19 group_data_type: KW_INV_MAT • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 140


State 101

   20 ring_data_type: KW_BIGINT •

    $default  reduce using rule 20 (ring_data_type)


State 102

   21 ring_data_type: KW_MATRIX • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 141


State 103

   22 ring_data_type: KW_POLYNOMIAL • '<' IDENT '>'

    '<'  shift, and go to state 142


State 104

   23 space_data_type: KW_VEC • '<' IDENT '>'
   24                | KW_VEC • '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 143


State 105

   26 declaration: KW_LET var ':' KW_BUF • '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 144


State 106

   27 declaration: KW_LET var ':' IDENT • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 146
    epsilon  go to state 147


State 107

   25 declaration: KW_LET var ':' PRIMITIVE_DTYPE • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 148
    epsilon  go to state 147


State 108

   30 declaration: KW_LET var ':' field_data_type • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 149
    epsilon  go to state 147


State 109

   28 declaration: KW_LET var ':' group_data_type • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 150
    epsilon  go to state 147


State 110

   29 declaration: KW_LET var ':' ring_data_type • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 151
    epsilon  go to state 147


State 111

   31 declaration: KW_LET var ':' space_data_type • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 152
    epsilon  go to state 147


State 112

   39 arithmetic_expr: arithmetic_expr • '+' term
   40                | arithmetic_expr • '-' term
   47 factor: '(' arithmetic_expr • ')'

    '+'  shift, and go to state 69
    '-'  shift, and go to state 70
    ')'  shift, and go to state 113


State 113

   47 factor: '(' arithmetic_expr ')' •

    $default  reduce using rule 47 (factor)


State 114

   61 B: '(' logical_expr ')' •

    $default  reduce using rule 61 (B)


State 115

   85 array_list: constant ',' • array_list

    LIT_INT    shift, and go to state 20
    LIT_FLOAT  shift, and go to state 21
    LIT_STR    shift, and go to state 22
    LIT_CHAR   shift, and go to state 23

    constant    go to state 62
    array_list  go to state 153


State 116

   84 array_decl: '[' array_list ']' •

    $default  reduce using rule 84 (array_decl)


State 117

   79 unary_operation: var '+' '+' •

    $default  reduce using rule 79 (unary_operation)


State 118

   80 unary_operation: var '-' '-' •

    $default  reduce using rule 80 (unary_operation)


State 119

   76 call_stmt: var '(' ')' •

    $default  reduce using rule 76 (call_stmt)


State 120

   75 call_stmt: var '(' pass_param_list • ')'

    ')'  shift, and go to state 154


State 121

   82 C: '[' LIT_INT • ']' C
   83  | '[' LIT_INT • ']'

    ']'  shift, and go to state 155


State 122

   39 arithmetic_expr: arithmetic_expr '+' term •
   42 term: term • '*' factor
   43     | term • '/' factor
   44     | term • '%' factor

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 39 (arithmetic_expr)


State 123

   40 arithmetic_expr: arithmetic_expr '-' term •
   42 term: term • '*' factor
   43     | term • '/' factor
   44     | term • '%' factor

    '*'  shift, and go to state 71
    '/'  shift, and go to state 72
    '%'  shift, and go to state 73

    $default  reduce using rule 40 (arithmetic_expr)


State 124

   42 term: term '*' factor •

    $default  reduce using rule 42 (term)


State 125

   43 term: term '/' factor •

    $default  reduce using rule 43 (term)


State 126

   44 term: term '%' factor •

    $default  reduce using rule 44 (term)


State 127

   57 logical_expr: B logical_op logical_expr •

    $default  reduce using rule 57 (logical_expr)


State 128

   87 if_else_conditional: KW_IF '(' logical_expr ')' • D

    '{'  shift, and go to state 156

    D  go to state 157


State 129

   91 loop_stmt: KW_WHILE '(' logical_expr ')' • '{' statements '}'

    '{'  shift, and go to state 158


State 130

   93 loop_stmt: KW_FOR '(' declaration ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 159
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 131

   92 loop_stmt: KW_FOR '(' assignment ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28

    var              go to state 30
    arithmetic_expr  go to state 55
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 160
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 57


State 132

   96 switch_case: KW_SWITCH '(' expression ')' • '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' expression ')' • '{' switch_case_blocks '}'

    '{'  shift, and go to state 161


State 133

   74 call_stmt_standalone: var '(' ')' ';' •

    $default  reduce using rule 74 (call_stmt_standalone)


State 134

   77 pass_param_list: expression ',' • pass_param_list

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 92
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    pass_param_list  go to state 162
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 135

   73 call_stmt_standalone: var '(' pass_param_list ')' • ';'

    ';'  shift, and go to state 163


State 136

   15 group_data_type: KW_CYCLIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 164


State 137

   16 group_data_type: KW_SYMMETRIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 165


State 138

   17 group_data_type: KW_ALTERNATING '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 166


State 139

   18 group_data_type: KW_DIHEDRAL '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 167


State 140

   19 group_data_type: KW_INV_MAT '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 168


State 141

   21 ring_data_type: KW_MATRIX '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 169


State 142

   22 ring_data_type: KW_POLYNOMIAL '<' • IDENT '>'

    IDENT  shift, and go to state 170


State 143

   23 space_data_type: KW_VEC '<' • IDENT '>'
   24                | KW_VEC '<' • PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 171
    PRIMITIVE_DTYPE  shift, and go to state 172


State 144

   26 declaration: KW_LET var ':' KW_BUF '<' • PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 173


State 145

   32 A: '=' • expression

    IDENT        shift, and go to state 7
    LIT_INT      shift, and go to state 20
    LIT_FLOAT    shift, and go to state 21
    LIT_STR      shift, and go to state 22
    LIT_CHAR     shift, and go to state 23
    LOGICAL_NOT  shift, and go to state 24
    KW_TRUE      shift, and go to state 25
    KW_FALSE     shift, and go to state 26
    '-'          shift, and go to state 27
    '('          shift, and go to state 28
    '['          shift, and go to state 29

    var              go to state 30
    expression       go to state 174
    arithmetic_expr  go to state 32
    term             go to state 33
    factor           go to state 34
    constant         go to state 35
    logical_expr     go to state 36
    B                go to state 37
    call_stmt        go to state 38
    unary_operation  go to state 39
    array_access     go to state 40
    array_decl       go to state 41


State 146

   27 declaration: KW_LET var ':' IDENT A •

    $default  reduce using rule 27 (declaration)


State 147

   33 A: epsilon •

    $default  reduce using rule 33 (A)


State 148

   25 declaration: KW_LET var ':' PRIMITIVE_DTYPE A •

    $default  reduce using rule 25 (declaration)


State 149

   30 declaration: KW_LET var ':' field_data_type A •

    $default  reduce using rule 30 (declaration)


State 150

   28 declaration: KW_LET var ':' group_data_type A •

    $default  reduce using rule 28 (declaration)


State 151

   29 declaration: KW_LET var ':' ring_data_type A •

    $default  reduce using rule 29 (declaration)


State 152

   31 declaration: KW_LET var ':' space_data_type A •

    $default  reduce using rule 31 (declaration)


State 153

   85 array_list: constant ',' array_list •

    $default  reduce using rule 85 (array_list)


State 154

   75 call_stmt: var '(' pass_param_list ')' •

    $default  reduce using rule 75 (call_stmt)


State 155

   82 C: '[' LIT_INT ']' • C
   83  | '[' LIT_INT ']' •

    '['  shift, and go to state 67

    $default  reduce using rule 83 (C)

    C  go to state 175


State 156

   88 D: '{' • statements '}'
   89  | '{' • statements '}' KW_ELSE if_else_conditional
   90  | '{' • statements '}' KW_ELSE '{' statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 176
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 157

   87 if_else_conditional: KW_IF '(' logical_expr ')' D •

    $default  reduce using rule 87 (if_else_conditional)


State 158

   91 loop_stmt: KW_WHILE '(' logical_expr ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 177
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 159

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 178


State 160

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 179


State 161

   96 switch_case: KW_SWITCH '(' expression ')' '{' • switch_case_blocks KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' expression ')' '{' • switch_case_blocks '}'

    KW_CASE  shift, and go to state 180

    $default  reduce using rule 102 (epsilon)

    switch_case_blocks  go to state 181
    epsilon             go to state 182


State 162

   77 pass_param_list: expression ',' pass_param_list •

    $default  reduce using rule 77 (pass_param_list)


State 163

   73 call_stmt_standalone: var '(' pass_param_list ')' ';' •

    $default  reduce using rule 73 (call_stmt_standalone)


State 164

   15 group_data_type: KW_CYCLIC '<' LIT_INT • '>'

    '>'  shift, and go to state 183


State 165

   16 group_data_type: KW_SYMMETRIC '<' LIT_INT • '>'

    '>'  shift, and go to state 184


State 166

   17 group_data_type: KW_ALTERNATING '<' LIT_INT • '>'

    '>'  shift, and go to state 185


State 167

   18 group_data_type: KW_DIHEDRAL '<' LIT_INT • '>'

    '>'  shift, and go to state 186


State 168

   19 group_data_type: KW_INV_MAT '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 187


State 169

   21 ring_data_type: KW_MATRIX '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 188


State 170

   22 ring_data_type: KW_POLYNOMIAL '<' IDENT • '>'

    '>'  shift, and go to state 189


State 171

   23 space_data_type: KW_VEC '<' IDENT • '>'

    '>'  shift, and go to state 190


State 172

   24 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE • '>'

    '>'  shift, and go to state 191


State 173

   26 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE • '>' A

    '>'  shift, and go to state 192


State 174

   32 A: '=' expression •

    $default  reduce using rule 32 (A)


State 175

   82 C: '[' LIT_INT ']' C •

    $default  reduce using rule 82 (C)


State 176

   88 D: '{' statements • '}'
   89  | '{' statements • '}' KW_ELSE if_else_conditional
   90  | '{' statements • '}' KW_ELSE '{' statements '}'

    '}'  shift, and go to state 193


State 177

   91 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements • '}'

    '}'  shift, and go to state 194


State 178

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    var              go to state 195
    unary_operation  go to state 196
    V                go to state 197
    epsilon          go to state 198


State 179

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    var              go to state 195
    unary_operation  go to state 196
    V                go to state 199
    epsilon          go to state 198


State 180

   98 switch_case_blocks: KW_CASE • LIT_CHAR ':' statements switch_case_blocks
   99                   | KW_CASE • LIT_INT ':' statements switch_case_blocks
  100                   | KW_CASE • LIT_FLOAT ':' statements switch_case_blocks

    LIT_INT    shift, and go to state 200
    LIT_FLOAT  shift, and go to state 201
    LIT_CHAR   shift, and go to state 202


State 181

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks • KW_DEFAULT ':' statements '}'
   97            | KW_SWITCH '(' expression ')' '{' switch_case_blocks • '}'

    KW_DEFAULT  shift, and go to state 203
    '}'         shift, and go to state 204


State 182

  101 switch_case_blocks: epsilon •

    $default  reduce using rule 101 (switch_case_blocks)


State 183

   15 group_data_type: KW_CYCLIC '<' LIT_INT '>' •

    $default  reduce using rule 15 (group_data_type)


State 184

   16 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' •

    $default  reduce using rule 16 (group_data_type)


State 185

   17 group_data_type: KW_ALTERNATING '<' LIT_INT '>' •

    $default  reduce using rule 17 (group_data_type)


State 186

   18 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' •

    $default  reduce using rule 18 (group_data_type)


State 187

   19 group_data_type: KW_INV_MAT '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 205


State 188

   21 ring_data_type: KW_MATRIX '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 206


State 189

   22 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' •

    $default  reduce using rule 22 (ring_data_type)


State 190

   23 space_data_type: KW_VEC '<' IDENT '>' •

    $default  reduce using rule 23 (space_data_type)


State 191

   24 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' •

    $default  reduce using rule 24 (space_data_type)


State 192

   26 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' • A

    '='  shift, and go to state 145

    $default  reduce using rule 102 (epsilon)

    A        go to state 207
    epsilon  go to state 147


State 193

   88 D: '{' statements '}' •
   89  | '{' statements '}' • KW_ELSE if_else_conditional
   90  | '{' statements '}' • KW_ELSE '{' statements '}'

    KW_ELSE  shift, and go to state 208

    $default  reduce using rule 88 (D)


State 194

   91 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}' •

    $default  reduce using rule 91 (loop_stmt)


State 195

   79 unary_operation: var • '+' '+'
   80                | var • '-' '-'

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65


State 196

   94 V: unary_operation •

    $default  reduce using rule 94 (V)


State 197

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 209


State 198

   95 V: epsilon •

    $default  reduce using rule 95 (V)


State 199

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 210


State 200

   99 switch_case_blocks: KW_CASE LIT_INT • ':' statements switch_case_blocks

    ':'  shift, and go to state 211


State 201

  100 switch_case_blocks: KW_CASE LIT_FLOAT • ':' statements switch_case_blocks

    ':'  shift, and go to state 212


State 202

   98 switch_case_blocks: KW_CASE LIT_CHAR • ':' statements switch_case_blocks

    ':'  shift, and go to state 213


State 203

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT • ':' statements '}'

    ':'  shift, and go to state 214


State 204

   97 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks '}' •

    $default  reduce using rule 97 (switch_case)


State 205

   19 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 215


State 206

   21 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 216


State 207

   26 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A •

    $default  reduce using rule 26 (declaration)


State 208

   89 D: '{' statements '}' KW_ELSE • if_else_conditional
   90  | '{' statements '}' KW_ELSE • '{' statements '}'

    KW_IF  shift, and go to state 3
    '{'    shift, and go to state 217

    if_else_conditional  go to state 218


State 209

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 219


State 210

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 220


State 211

   99 switch_case_blocks: KW_CASE LIT_INT ':' • statements switch_case_blocks

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 221
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 212

  100 switch_case_blocks: KW_CASE LIT_FLOAT ':' • statements switch_case_blocks

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 222
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 213

   98 switch_case_blocks: KW_CASE LIT_CHAR ':' • statements switch_case_blocks

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 223
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 214

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 224
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 215

   19 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 19 (group_data_type)


State 216

   21 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 21 (ring_data_type)


State 217

   90 D: '{' statements '}' KW_ELSE '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 225
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 218

   89 D: '{' statements '}' KW_ELSE if_else_conditional •

    $default  reduce using rule 89 (D)


State 219

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 226
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 220

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    KW_WHILE   shift, and go to state 4
    KW_FOR     shift, and go to state 5
    KW_SWITCH  shift, and go to state 6
    IDENT      shift, and go to state 7

    $default  reduce using rule 102 (epsilon)

    statements            go to state 227
    statement             go to state 9
    var                   go to state 10
    declaration           go to state 11
    assignment            go to state 12
    return_stmt           go to state 13
    call_stmt_standalone  go to state 14
    if_else_conditional   go to state 15
    loop_stmt             go to state 16
    switch_case           go to state 17
    epsilon               go to state 18


State 221

   99 switch_case_blocks: KW_CASE LIT_INT ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 180

    $default  reduce using rule 102 (epsilon)

    switch_case_blocks  go to state 228
    epsilon             go to state 182


State 222

  100 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 180

    $default  reduce using rule 102 (epsilon)

    switch_case_blocks  go to state 229
    epsilon             go to state 182


State 223

   98 switch_case_blocks: KW_CASE LIT_CHAR ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 180

    $default  reduce using rule 102 (epsilon)

    switch_case_blocks  go to state 230
    epsilon             go to state 182


State 224

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements • '}'

    '}'  shift, and go to state 231


State 225

   90 D: '{' statements '}' KW_ELSE '{' statements • '}'

    '}'  shift, and go to state 232


State 226

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 233


State 227

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 234


State 228

   99 switch_case_blocks: KW_CASE LIT_INT ':' statements switch_case_blocks •

    $default  reduce using rule 99 (switch_case_blocks)


State 229

  100 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements switch_case_blocks •

    $default  reduce using rule 100 (switch_case_blocks)


State 230

   98 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks •

    $default  reduce using rule 98 (switch_case_blocks)


State 231

   96 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}' •

    $default  reduce using rule 96 (switch_case)


State 232

   90 D: '{' statements '}' KW_ELSE '{' statements '}' •

    $default  reduce using rule 90 (D)


State 233

   93 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 93 (loop_stmt)


State 234

   92 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 92 (loop_stmt)
