Terminals unused in grammar

    GT
    LT


State 33 conflicts: 2 shift/reduce
State 35 conflicts: 3 reduce/reduce
State 67 conflicts: 1 shift/reduce


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional
    8          | switch_case
    9          | loop_stmt
   10          | KW_BREAK ';'
   11          | KW_CONTINUE ';'

   12 var: IDENT
   13    | IDENT '.' IDENT

   14 field_data_type: ε
   15                | KW_BIG_RATIONAL
   16                | KW_COMPLEX

   17 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   18                | KW_SYMMETRIC '<' LIT_INT '>'
   19                | KW_ALTERNATING '<' LIT_INT '>'
   20                | KW_DIHEDRAL '<' LIT_INT '>'
   21                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   22 ring_data_type: KW_BIGINT
   23               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   24               | KW_POLYNOMIAL '<' IDENT '>'

   25 space_data_type: KW_VEC '<' IDENT '>'
   26                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   27 declaration: KW_LET var ':' PRIMITIVE_DTYPE A
   28            | KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   29            | KW_LET var ':' IDENT A
   30            | KW_LET var ':' group_data_type A
   31            | KW_LET var ':' ring_data_type A
   32            | KW_LET var ':' field_data_type A
   33            | KW_LET var ':' space_data_type A

   34 A: '=' expression
   35  | epsilon

   36 assignment: var '=' expression
   37           | array_access '=' expression

   38 expression: arithmetic_expr
   39           | logical_expr
   40           | array_decl

   41 arithmetic_expr: arithmetic_expr '+' term
   42                | arithmetic_expr '-' term
   43                | term

   44 term: term '*' factor
   45     | term '/' factor
   46     | term '%' factor
   47     | factor

   48 factor: var
   49       | '(' arithmetic_expr ')'
   50       | '-' factor
   51       | constant
   52       | call_stmt
   53       | array_access
   54       | unary_operation

   55 constant: LIT_CHAR
   56         | LIT_FLOAT
   57         | LIT_INT
   58         | LIT_STR

   59 logical_expr: B logical_op logical_expr
   60             | B
   61             | LOGICAL_NOT logical_expr

   62 B: arithmetic_expr
   63  | '(' logical_expr ')'
   64  | KW_TRUE
   65  | KW_FALSE

   66 logical_op: '>'
   67           | '<'
   68           | GTEQ
   69           | LTEQ
   70           | EQ
   71           | NEQ
   72           | LOGICAL_AND
   73           | LOGICAL_OR

   74 return_stmt: KW_RETURN expression

   75 call_stmt_standalone: var '(' pass_param_list ')' ';'
   76                     | var '(' ')' ';'

   77 call_stmt: var '(' pass_param_list ')'
   78          | var '(' ')'

   79 pass_param_list: expression ',' pass_param_list
   80                | expression

   81 unary_operation: var '+' '+'
   82                | var '-' '-'

   83 array_access: var C

   84 C: '[' LIT_INT ']' C
   85  | '[' LIT_INT ']'

   86 array_decl: '[' array_list ']'

   87 array_list: constant ',' array_list
   88           | constant

   89 if_else_conditional: KW_IF '(' logical_expr ')' D

   90 D: '{' statements '}'
   91  | '{' statements '}' KW_ELSE if_else_conditional
   92  | '{' statements '}' KW_ELSE '{' statements '}'

   93 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}'
   94          | KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   95          | KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

   96 V: unary_operation
   97  | epsilon

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' expression ')' '{' switch_case_blocks '}'

  100 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks
  101                   | KW_CASE LIT_INT ':' statements switch_case_blocks
  102                   | KW_CASE LIT_FLOAT ':' statements switch_case_blocks
  103                   | epsilon

  104 epsilon: ε


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 46
    '(' (40) 49 63 75 76 77 78 89 93 94 95 98 99
    ')' (41) 49 63 75 76 77 78 89 93 94 95 98 99
    '*' (42) 44
    '+' (43) 41 81
    ',' (44) 21 23 79 87
    '-' (45) 42 50 82
    '.' (46) 13
    '/' (47) 45
    ':' (58) 27 28 29 30 31 32 33 98 100 101 102
    ';' (59) 3 4 6 10 11 75 76 94 95
    '<' (60) 17 18 19 20 21 23 24 25 26 28 67
    '=' (61) 34 36 37
    '>' (62) 17 18 19 20 21 23 24 25 26 28 66
    '[' (91) 84 85 86
    ']' (93) 84 85 86
    '{' (123) 90 91 92 93 94 95 98 99
    '}' (125) 90 91 92 93 94 95 98 99
    error (256)
    KW_LET (258) 27 28 29 30 31 32 33
    KW_RETURN (259) 74
    KW_IF (260) 89
    KW_ELSE (261) 91 92
    KW_WHILE (262) 93
    KW_FOR (263) 94 95
    KW_SWITCH (264) 98 99
    KW_CASE (265) 100 101 102
    KW_DEFAULT (266) 98
    KW_BREAK (267) 10
    KW_CONTINUE (268) 11
    KW_CYCLIC (269) 17
    KW_BIG_RATIONAL (270) 15
    KW_COMPLEX (271) 16
    KW_SYMMETRIC (272) 18
    KW_ALTERNATING (273) 19
    KW_DIHEDRAL (274) 20
    KW_INV_MAT (275) 21
    KW_BIGINT (276) 22
    KW_MATRIX (277) 23
    KW_POLYNOMIAL (278) 24
    KW_VEC (279) 25 26
    KW_BUF (280) 28
    IDENT (281) 12 13 21 23 24 25 29
    PRIMITIVE_DTYPE (282) 26 27 28
    LIT_INT (283) 17 18 19 20 21 23 57 84 85 101
    LIT_FLOAT (284) 56 102
    LIT_STR (285) 58
    LIT_CHAR (286) 55 100
    LOGICAL_AND (287) 72
    LOGICAL_OR (288) 73
    LOGICAL_NOT (289) 61
    EQ (290) 70
    NEQ (291) 71
    GT (292)
    LT (293)
    GTEQ (294) 68
    LTEQ (295) 69
    KW_TRUE (296) 64
    KW_FALSE (297) 65


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    statements (62)
        on left: 1 2
        on right: 0 1 90 91 92 93 94 95 98 100 101 102
    statement (63)
        on left: 3 4 5 6 7 8 9 10 11
        on right: 1
    var (64)
        on left: 12 13
        on right: 27 28 29 30 31 32 33 36 48 75 76 77 78 81 82 83
    field_data_type (65)
        on left: 14 15 16
        on right: 32
    group_data_type (66)
        on left: 17 18 19 20 21
        on right: 30
    ring_data_type (67)
        on left: 22 23 24
        on right: 31
    space_data_type (68)
        on left: 25 26
        on right: 33
    declaration (69)
        on left: 27 28 29 30 31 32 33
        on right: 3 95
    A (70)
        on left: 34 35
        on right: 27 28 29 30 31 32 33
    assignment (71)
        on left: 36 37
        on right: 4 94
    expression (72)
        on left: 38 39 40
        on right: 34 36 37 74 79 80 98 99
    arithmetic_expr (73)
        on left: 41 42 43
        on right: 38 41 42 49 62
    term (74)
        on left: 44 45 46 47
        on right: 41 42 43 44 45 46
    factor (75)
        on left: 48 49 50 51 52 53 54
        on right: 44 45 46 47 50
    constant (76)
        on left: 55 56 57 58
        on right: 51 87 88
    logical_expr (77)
        on left: 59 60 61
        on right: 39 59 61 63 89 93 94 95
    B (78)
        on left: 62 63 64 65
        on right: 59 60
    logical_op (79)
        on left: 66 67 68 69 70 71 72 73
        on right: 59
    return_stmt (80)
        on left: 74
        on right: 6
    call_stmt_standalone (81)
        on left: 75 76
        on right: 5
    call_stmt (82)
        on left: 77 78
        on right: 52
    pass_param_list (83)
        on left: 79 80
        on right: 75 77 79
    unary_operation (84)
        on left: 81 82
        on right: 54 96
    array_access (85)
        on left: 83
        on right: 37 53
    C (86)
        on left: 84 85
        on right: 83 84
    array_decl (87)
        on left: 86
        on right: 40
    array_list (88)
        on left: 87 88
        on right: 86 87
    if_else_conditional (89)
        on left: 89
        on right: 7 91
    D (90)
        on left: 90 91 92
        on right: 89
    loop_stmt (91)
        on left: 93 94 95
        on right: 9
    V (92)
        on left: 96 97
        on right: 94 95
    switch_case (93)
        on left: 98 99
        on right: 8
    switch_case_blocks (94)
        on left: 100 101 102 103
        on right: 98 99 100 101 102
    epsilon (95)
        on left: 104
        on right: 2 35 97 103


State 0

    0 $accept: • statements $end

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 10
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 1

   27 declaration: KW_LET • var ':' PRIMITIVE_DTYPE A
   28            | KW_LET • var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   29            | KW_LET • var ':' IDENT A
   30            | KW_LET • var ':' group_data_type A
   31            | KW_LET • var ':' ring_data_type A
   32            | KW_LET • var ':' field_data_type A
   33            | KW_LET • var ':' space_data_type A

    IDENT  shift, and go to state 9

    var  go to state 22


State 2

   74 return_stmt: KW_RETURN • expression

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 34
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 3

   89 if_else_conditional: KW_IF • '(' logical_expr ')' D

    '('  shift, and go to state 45


State 4

   93 loop_stmt: KW_WHILE • '(' logical_expr ')' '{' statements '}'

    '('  shift, and go to state 46


State 5

   94 loop_stmt: KW_FOR • '(' assignment ';' logical_expr ';' V ')' '{' statements '}'
   95          | KW_FOR • '(' declaration ';' logical_expr ';' V ')' '{' statements '}'

    '('  shift, and go to state 47


State 6

   98 switch_case: KW_SWITCH • '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH • '(' expression ')' '{' switch_case_blocks '}'

    '('  shift, and go to state 48


State 7

   10 statement: KW_BREAK • ';'

    ';'  shift, and go to state 49


State 8

   11 statement: KW_CONTINUE • ';'

    ';'  shift, and go to state 50


State 9

   12 var: IDENT •
   13    | IDENT • '.' IDENT

    '.'  shift, and go to state 51

    $default  reduce using rule 12 (var)


State 10

    0 $accept: statements • $end

    $end  shift, and go to state 52


State 11

    1 statements: statement • statements

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 53
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 12

   36 assignment: var • '=' expression
   75 call_stmt_standalone: var • '(' pass_param_list ')' ';'
   76                     | var • '(' ')' ';'
   83 array_access: var • C

    '='  shift, and go to state 54
    '('  shift, and go to state 55
    '['  shift, and go to state 56

    C  go to state 57


State 13

    3 statement: declaration • ';'

    ';'  shift, and go to state 58


State 14

    4 statement: assignment • ';'

    ';'  shift, and go to state 59


State 15

    6 statement: return_stmt • ';'

    ';'  shift, and go to state 60


State 16

    5 statement: call_stmt_standalone •

    $default  reduce using rule 5 (statement)


State 17

   37 assignment: array_access • '=' expression

    '='  shift, and go to state 61


State 18

    7 statement: if_else_conditional •

    $default  reduce using rule 7 (statement)


State 19

    9 statement: loop_stmt •

    $default  reduce using rule 9 (statement)


State 20

    8 statement: switch_case •

    $default  reduce using rule 8 (statement)


State 21

    2 statements: epsilon •

    $default  reduce using rule 2 (statements)


State 22

   27 declaration: KW_LET var • ':' PRIMITIVE_DTYPE A
   28            | KW_LET var • ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   29            | KW_LET var • ':' IDENT A
   30            | KW_LET var • ':' group_data_type A
   31            | KW_LET var • ':' ring_data_type A
   32            | KW_LET var • ':' field_data_type A
   33            | KW_LET var • ':' space_data_type A

    ':'  shift, and go to state 62


State 23

   57 constant: LIT_INT •

    $default  reduce using rule 57 (constant)


State 24

   56 constant: LIT_FLOAT •

    $default  reduce using rule 56 (constant)


State 25

   58 constant: LIT_STR •

    $default  reduce using rule 58 (constant)


State 26

   55 constant: LIT_CHAR •

    $default  reduce using rule 55 (constant)


State 27

   61 logical_expr: LOGICAL_NOT • logical_expr

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 64
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 28

   64 B: KW_TRUE •

    $default  reduce using rule 64 (B)


State 29

   65 B: KW_FALSE •

    $default  reduce using rule 65 (B)


State 30

   50 factor: '-' • factor

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    factor           go to state 66
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 31

   49 factor: '(' • arithmetic_expr ')'
   63 B: '(' • logical_expr ')'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 67
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 68
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 32

   86 array_decl: '[' • array_list ']'

    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26

    constant    go to state 69
    array_list  go to state 70


State 33

   48 factor: var •
   77 call_stmt: var • '(' pass_param_list ')'
   78          | var • '(' ')'
   81 unary_operation: var • '+' '+'
   82                | var • '-' '-'
   83 array_access: var • C

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '('  shift, and go to state 73
    '['  shift, and go to state 56

    '+'       [reduce using rule 48 (factor)]
    '-'       [reduce using rule 48 (factor)]
    $default  reduce using rule 48 (factor)

    C  go to state 57


State 34

   74 return_stmt: KW_RETURN expression •

    $default  reduce using rule 74 (return_stmt)


State 35

   38 expression: arithmetic_expr •
   41 arithmetic_expr: arithmetic_expr • '+' term
   42                | arithmetic_expr • '-' term
   62 B: arithmetic_expr •

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75

    ';'       reduce using rule 38 (expression)
    ';'       [reduce using rule 62 (B)]
    ','       reduce using rule 38 (expression)
    ','       [reduce using rule 62 (B)]
    ')'       reduce using rule 38 (expression)
    ')'       [reduce using rule 62 (B)]
    $default  reduce using rule 62 (B)


State 36

   43 arithmetic_expr: term •
   44 term: term • '*' factor
   45     | term • '/' factor
   46     | term • '%' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78

    $default  reduce using rule 43 (arithmetic_expr)


State 37

   47 term: factor •

    $default  reduce using rule 47 (term)


State 38

   51 factor: constant •

    $default  reduce using rule 51 (factor)


State 39

   39 expression: logical_expr •

    $default  reduce using rule 39 (expression)


State 40

   59 logical_expr: B • logical_op logical_expr
   60             | B •

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    EQ           shift, and go to state 81
    NEQ          shift, and go to state 82
    GTEQ         shift, and go to state 83
    LTEQ         shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86

    $default  reduce using rule 60 (logical_expr)

    logical_op  go to state 87


State 41

   52 factor: call_stmt •

    $default  reduce using rule 52 (factor)


State 42

   54 factor: unary_operation •

    $default  reduce using rule 54 (factor)


State 43

   53 factor: array_access •

    $default  reduce using rule 53 (factor)


State 44

   40 expression: array_decl •

    $default  reduce using rule 40 (expression)


State 45

   89 if_else_conditional: KW_IF '(' • logical_expr ')' D

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 88
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 46

   93 loop_stmt: KW_WHILE '(' • logical_expr ')' '{' statements '}'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 89
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 47

   94 loop_stmt: KW_FOR '(' • assignment ';' logical_expr ';' V ')' '{' statements '}'
   95          | KW_FOR '(' • declaration ';' logical_expr ';' V ')' '{' statements '}'

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 9

    var           go to state 90
    declaration   go to state 91
    assignment    go to state 92
    array_access  go to state 17


State 48

   98 switch_case: KW_SWITCH '(' • expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' • expression ')' '{' switch_case_blocks '}'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 93
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 49

   10 statement: KW_BREAK ';' •

    $default  reduce using rule 10 (statement)


State 50

   11 statement: KW_CONTINUE ';' •

    $default  reduce using rule 11 (statement)


State 51

   13 var: IDENT '.' • IDENT

    IDENT  shift, and go to state 94


State 52

    0 $accept: statements $end •

    $default  accept


State 53

    1 statements: statement statements •

    $default  reduce using rule 1 (statements)


State 54

   36 assignment: var '=' • expression

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 95
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 55

   75 call_stmt_standalone: var '(' • pass_param_list ')' ';'
   76                     | var '(' • ')' ';'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    ')'          shift, and go to state 96
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 97
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    pass_param_list  go to state 98
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 56

   84 C: '[' • LIT_INT ']' C
   85  | '[' • LIT_INT ']'

    LIT_INT  shift, and go to state 99


State 57

   83 array_access: var C •

    $default  reduce using rule 83 (array_access)


State 58

    3 statement: declaration ';' •

    $default  reduce using rule 3 (statement)


State 59

    4 statement: assignment ';' •

    $default  reduce using rule 4 (statement)


State 60

    6 statement: return_stmt ';' •

    $default  reduce using rule 6 (statement)


State 61

   37 assignment: array_access '=' • expression

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 100
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 62

   27 declaration: KW_LET var ':' • PRIMITIVE_DTYPE A
   28            | KW_LET var ':' • KW_BUF '<' PRIMITIVE_DTYPE '>' A
   29            | KW_LET var ':' • IDENT A
   30            | KW_LET var ':' • group_data_type A
   31            | KW_LET var ':' • ring_data_type A
   32            | KW_LET var ':' • field_data_type A
   33            | KW_LET var ':' • space_data_type A

    KW_CYCLIC        shift, and go to state 101
    KW_BIG_RATIONAL  shift, and go to state 102
    KW_COMPLEX       shift, and go to state 103
    KW_SYMMETRIC     shift, and go to state 104
    KW_ALTERNATING   shift, and go to state 105
    KW_DIHEDRAL      shift, and go to state 106
    KW_INV_MAT       shift, and go to state 107
    KW_BIGINT        shift, and go to state 108
    KW_MATRIX        shift, and go to state 109
    KW_POLYNOMIAL    shift, and go to state 110
    KW_VEC           shift, and go to state 111
    KW_BUF           shift, and go to state 112
    IDENT            shift, and go to state 113
    PRIMITIVE_DTYPE  shift, and go to state 114

    $default  reduce using rule 14 (field_data_type)

    field_data_type  go to state 115
    group_data_type  go to state 116
    ring_data_type   go to state 117
    space_data_type  go to state 118


State 63

   41 arithmetic_expr: arithmetic_expr • '+' term
   42                | arithmetic_expr • '-' term
   62 B: arithmetic_expr •

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75

    $default  reduce using rule 62 (B)


State 64

   61 logical_expr: LOGICAL_NOT logical_expr •

    $default  reduce using rule 61 (logical_expr)


State 65

   49 factor: '(' • arithmetic_expr ')'

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    arithmetic_expr  go to state 119
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 66

   50 factor: '-' factor •

    $default  reduce using rule 50 (factor)


State 67

   41 arithmetic_expr: arithmetic_expr • '+' term
   42                | arithmetic_expr • '-' term
   49 factor: '(' arithmetic_expr • ')'
   62 B: arithmetic_expr •

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    ')'  shift, and go to state 120

    ')'       [reduce using rule 62 (B)]
    $default  reduce using rule 62 (B)


State 68

   63 B: '(' logical_expr • ')'

    ')'  shift, and go to state 121


State 69

   87 array_list: constant • ',' array_list
   88           | constant •

    ','  shift, and go to state 122

    $default  reduce using rule 88 (array_list)


State 70

   86 array_decl: '[' array_list • ']'

    ']'  shift, and go to state 123


State 71

   81 unary_operation: var '+' • '+'

    '+'  shift, and go to state 124


State 72

   82 unary_operation: var '-' • '-'

    '-'  shift, and go to state 125


State 73

   77 call_stmt: var '(' • pass_param_list ')'
   78          | var '(' • ')'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    ')'          shift, and go to state 126
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 97
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    pass_param_list  go to state 127
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 74

   41 arithmetic_expr: arithmetic_expr '+' • term

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    term             go to state 128
    factor           go to state 37
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 75

   42 arithmetic_expr: arithmetic_expr '-' • term

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    term             go to state 129
    factor           go to state 37
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 76

   44 term: term '*' • factor

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    factor           go to state 130
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 77

   45 term: term '/' • factor

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    factor           go to state 131
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 78

   46 term: term '%' • factor

    IDENT      shift, and go to state 9
    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26
    '-'        shift, and go to state 30
    '('        shift, and go to state 65

    var              go to state 33
    factor           go to state 132
    constant         go to state 38
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 79

   72 logical_op: LOGICAL_AND •

    $default  reduce using rule 72 (logical_op)


State 80

   73 logical_op: LOGICAL_OR •

    $default  reduce using rule 73 (logical_op)


State 81

   70 logical_op: EQ •

    $default  reduce using rule 70 (logical_op)


State 82

   71 logical_op: NEQ •

    $default  reduce using rule 71 (logical_op)


State 83

   68 logical_op: GTEQ •

    $default  reduce using rule 68 (logical_op)


State 84

   69 logical_op: LTEQ •

    $default  reduce using rule 69 (logical_op)


State 85

   67 logical_op: '<' •

    $default  reduce using rule 67 (logical_op)


State 86

   66 logical_op: '>' •

    $default  reduce using rule 66 (logical_op)


State 87

   59 logical_expr: B logical_op • logical_expr

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 133
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 88

   89 if_else_conditional: KW_IF '(' logical_expr • ')' D

    ')'  shift, and go to state 134


State 89

   93 loop_stmt: KW_WHILE '(' logical_expr • ')' '{' statements '}'

    ')'  shift, and go to state 135


State 90

   36 assignment: var • '=' expression
   83 array_access: var • C

    '='  shift, and go to state 54
    '['  shift, and go to state 56

    C  go to state 57


State 91

   95 loop_stmt: KW_FOR '(' declaration • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 136


State 92

   94 loop_stmt: KW_FOR '(' assignment • ';' logical_expr ';' V ')' '{' statements '}'

    ';'  shift, and go to state 137


State 93

   98 switch_case: KW_SWITCH '(' expression • ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' expression • ')' '{' switch_case_blocks '}'

    ')'  shift, and go to state 138


State 94

   13 var: IDENT '.' IDENT •

    $default  reduce using rule 13 (var)


State 95

   36 assignment: var '=' expression •

    $default  reduce using rule 36 (assignment)


State 96

   76 call_stmt_standalone: var '(' ')' • ';'

    ';'  shift, and go to state 139


State 97

   79 pass_param_list: expression • ',' pass_param_list
   80                | expression •

    ','  shift, and go to state 140

    $default  reduce using rule 80 (pass_param_list)


State 98

   75 call_stmt_standalone: var '(' pass_param_list • ')' ';'

    ')'  shift, and go to state 141


State 99

   84 C: '[' LIT_INT • ']' C
   85  | '[' LIT_INT • ']'

    ']'  shift, and go to state 142


State 100

   37 assignment: array_access '=' expression •

    $default  reduce using rule 37 (assignment)


State 101

   17 group_data_type: KW_CYCLIC • '<' LIT_INT '>'

    '<'  shift, and go to state 143


State 102

   15 field_data_type: KW_BIG_RATIONAL •

    $default  reduce using rule 15 (field_data_type)


State 103

   16 field_data_type: KW_COMPLEX •

    $default  reduce using rule 16 (field_data_type)


State 104

   18 group_data_type: KW_SYMMETRIC • '<' LIT_INT '>'

    '<'  shift, and go to state 144


State 105

   19 group_data_type: KW_ALTERNATING • '<' LIT_INT '>'

    '<'  shift, and go to state 145


State 106

   20 group_data_type: KW_DIHEDRAL • '<' LIT_INT '>'

    '<'  shift, and go to state 146


State 107

   21 group_data_type: KW_INV_MAT • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 147


State 108

   22 ring_data_type: KW_BIGINT •

    $default  reduce using rule 22 (ring_data_type)


State 109

   23 ring_data_type: KW_MATRIX • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 148


State 110

   24 ring_data_type: KW_POLYNOMIAL • '<' IDENT '>'

    '<'  shift, and go to state 149


State 111

   25 space_data_type: KW_VEC • '<' IDENT '>'
   26                | KW_VEC • '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 150


State 112

   28 declaration: KW_LET var ':' KW_BUF • '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 151


State 113

   29 declaration: KW_LET var ':' IDENT • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 153
    epsilon  go to state 154


State 114

   27 declaration: KW_LET var ':' PRIMITIVE_DTYPE • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 155
    epsilon  go to state 154


State 115

   32 declaration: KW_LET var ':' field_data_type • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 156
    epsilon  go to state 154


State 116

   30 declaration: KW_LET var ':' group_data_type • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 157
    epsilon  go to state 154


State 117

   31 declaration: KW_LET var ':' ring_data_type • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 158
    epsilon  go to state 154


State 118

   33 declaration: KW_LET var ':' space_data_type • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 159
    epsilon  go to state 154


State 119

   41 arithmetic_expr: arithmetic_expr • '+' term
   42                | arithmetic_expr • '-' term
   49 factor: '(' arithmetic_expr • ')'

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    ')'  shift, and go to state 120


State 120

   49 factor: '(' arithmetic_expr ')' •

    $default  reduce using rule 49 (factor)


State 121

   63 B: '(' logical_expr ')' •

    $default  reduce using rule 63 (B)


State 122

   87 array_list: constant ',' • array_list

    LIT_INT    shift, and go to state 23
    LIT_FLOAT  shift, and go to state 24
    LIT_STR    shift, and go to state 25
    LIT_CHAR   shift, and go to state 26

    constant    go to state 69
    array_list  go to state 160


State 123

   86 array_decl: '[' array_list ']' •

    $default  reduce using rule 86 (array_decl)


State 124

   81 unary_operation: var '+' '+' •

    $default  reduce using rule 81 (unary_operation)


State 125

   82 unary_operation: var '-' '-' •

    $default  reduce using rule 82 (unary_operation)


State 126

   78 call_stmt: var '(' ')' •

    $default  reduce using rule 78 (call_stmt)


State 127

   77 call_stmt: var '(' pass_param_list • ')'

    ')'  shift, and go to state 161


State 128

   41 arithmetic_expr: arithmetic_expr '+' term •
   44 term: term • '*' factor
   45     | term • '/' factor
   46     | term • '%' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78

    $default  reduce using rule 41 (arithmetic_expr)


State 129

   42 arithmetic_expr: arithmetic_expr '-' term •
   44 term: term • '*' factor
   45     | term • '/' factor
   46     | term • '%' factor

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78

    $default  reduce using rule 42 (arithmetic_expr)


State 130

   44 term: term '*' factor •

    $default  reduce using rule 44 (term)


State 131

   45 term: term '/' factor •

    $default  reduce using rule 45 (term)


State 132

   46 term: term '%' factor •

    $default  reduce using rule 46 (term)


State 133

   59 logical_expr: B logical_op logical_expr •

    $default  reduce using rule 59 (logical_expr)


State 134

   89 if_else_conditional: KW_IF '(' logical_expr ')' • D

    '{'  shift, and go to state 162

    D  go to state 163


State 135

   93 loop_stmt: KW_WHILE '(' logical_expr ')' • '{' statements '}'

    '{'  shift, and go to state 164


State 136

   95 loop_stmt: KW_FOR '(' declaration ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 165
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 137

   94 loop_stmt: KW_FOR '(' assignment ';' • logical_expr ';' V ')' '{' statements '}'

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31

    var              go to state 33
    arithmetic_expr  go to state 63
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 166
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43


State 138

   98 switch_case: KW_SWITCH '(' expression ')' • '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' expression ')' • '{' switch_case_blocks '}'

    '{'  shift, and go to state 167


State 139

   76 call_stmt_standalone: var '(' ')' ';' •

    $default  reduce using rule 76 (call_stmt_standalone)


State 140

   79 pass_param_list: expression ',' • pass_param_list

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 97
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    pass_param_list  go to state 168
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 141

   75 call_stmt_standalone: var '(' pass_param_list ')' • ';'

    ';'  shift, and go to state 169


State 142

   84 C: '[' LIT_INT ']' • C
   85  | '[' LIT_INT ']' •

    '['  shift, and go to state 56

    $default  reduce using rule 85 (C)

    C  go to state 170


State 143

   17 group_data_type: KW_CYCLIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 171


State 144

   18 group_data_type: KW_SYMMETRIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 172


State 145

   19 group_data_type: KW_ALTERNATING '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 173


State 146

   20 group_data_type: KW_DIHEDRAL '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 174


State 147

   21 group_data_type: KW_INV_MAT '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 175


State 148

   23 ring_data_type: KW_MATRIX '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 176


State 149

   24 ring_data_type: KW_POLYNOMIAL '<' • IDENT '>'

    IDENT  shift, and go to state 177


State 150

   25 space_data_type: KW_VEC '<' • IDENT '>'
   26                | KW_VEC '<' • PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 178
    PRIMITIVE_DTYPE  shift, and go to state 179


State 151

   28 declaration: KW_LET var ':' KW_BUF '<' • PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 180


State 152

   34 A: '=' • expression

    IDENT        shift, and go to state 9
    LIT_INT      shift, and go to state 23
    LIT_FLOAT    shift, and go to state 24
    LIT_STR      shift, and go to state 25
    LIT_CHAR     shift, and go to state 26
    LOGICAL_NOT  shift, and go to state 27
    KW_TRUE      shift, and go to state 28
    KW_FALSE     shift, and go to state 29
    '-'          shift, and go to state 30
    '('          shift, and go to state 31
    '['          shift, and go to state 32

    var              go to state 33
    expression       go to state 181
    arithmetic_expr  go to state 35
    term             go to state 36
    factor           go to state 37
    constant         go to state 38
    logical_expr     go to state 39
    B                go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


State 153

   29 declaration: KW_LET var ':' IDENT A •

    $default  reduce using rule 29 (declaration)


State 154

   35 A: epsilon •

    $default  reduce using rule 35 (A)


State 155

   27 declaration: KW_LET var ':' PRIMITIVE_DTYPE A •

    $default  reduce using rule 27 (declaration)


State 156

   32 declaration: KW_LET var ':' field_data_type A •

    $default  reduce using rule 32 (declaration)


State 157

   30 declaration: KW_LET var ':' group_data_type A •

    $default  reduce using rule 30 (declaration)


State 158

   31 declaration: KW_LET var ':' ring_data_type A •

    $default  reduce using rule 31 (declaration)


State 159

   33 declaration: KW_LET var ':' space_data_type A •

    $default  reduce using rule 33 (declaration)


State 160

   87 array_list: constant ',' array_list •

    $default  reduce using rule 87 (array_list)


State 161

   77 call_stmt: var '(' pass_param_list ')' •

    $default  reduce using rule 77 (call_stmt)


State 162

   90 D: '{' • statements '}'
   91  | '{' • statements '}' KW_ELSE if_else_conditional
   92  | '{' • statements '}' KW_ELSE '{' statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 182
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 163

   89 if_else_conditional: KW_IF '(' logical_expr ')' D •

    $default  reduce using rule 89 (if_else_conditional)


State 164

   93 loop_stmt: KW_WHILE '(' logical_expr ')' '{' • statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 183
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 165

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 184


State 166

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr • ';' V ')' '{' statements '}'

    ';'  shift, and go to state 185


State 167

   98 switch_case: KW_SWITCH '(' expression ')' '{' • switch_case_blocks KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' expression ')' '{' • switch_case_blocks '}'

    KW_CASE  shift, and go to state 186

    $default  reduce using rule 104 (epsilon)

    switch_case_blocks  go to state 187
    epsilon             go to state 188


State 168

   79 pass_param_list: expression ',' pass_param_list •

    $default  reduce using rule 79 (pass_param_list)


State 169

   75 call_stmt_standalone: var '(' pass_param_list ')' ';' •

    $default  reduce using rule 75 (call_stmt_standalone)


State 170

   84 C: '[' LIT_INT ']' C •

    $default  reduce using rule 84 (C)


State 171

   17 group_data_type: KW_CYCLIC '<' LIT_INT • '>'

    '>'  shift, and go to state 189


State 172

   18 group_data_type: KW_SYMMETRIC '<' LIT_INT • '>'

    '>'  shift, and go to state 190


State 173

   19 group_data_type: KW_ALTERNATING '<' LIT_INT • '>'

    '>'  shift, and go to state 191


State 174

   20 group_data_type: KW_DIHEDRAL '<' LIT_INT • '>'

    '>'  shift, and go to state 192


State 175

   21 group_data_type: KW_INV_MAT '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 193


State 176

   23 ring_data_type: KW_MATRIX '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 194


State 177

   24 ring_data_type: KW_POLYNOMIAL '<' IDENT • '>'

    '>'  shift, and go to state 195


State 178

   25 space_data_type: KW_VEC '<' IDENT • '>'

    '>'  shift, and go to state 196


State 179

   26 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE • '>'

    '>'  shift, and go to state 197


State 180

   28 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE • '>' A

    '>'  shift, and go to state 198


State 181

   34 A: '=' expression •

    $default  reduce using rule 34 (A)


State 182

   90 D: '{' statements • '}'
   91  | '{' statements • '}' KW_ELSE if_else_conditional
   92  | '{' statements • '}' KW_ELSE '{' statements '}'

    '}'  shift, and go to state 199


State 183

   93 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements • '}'

    '}'  shift, and go to state 200


State 184

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    var              go to state 201
    unary_operation  go to state 202
    V                go to state 203
    epsilon          go to state 204


State 185

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' • V ')' '{' statements '}'

    IDENT  shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    var              go to state 201
    unary_operation  go to state 202
    V                go to state 205
    epsilon          go to state 204


State 186

  100 switch_case_blocks: KW_CASE • LIT_CHAR ':' statements switch_case_blocks
  101                   | KW_CASE • LIT_INT ':' statements switch_case_blocks
  102                   | KW_CASE • LIT_FLOAT ':' statements switch_case_blocks

    LIT_INT    shift, and go to state 206
    LIT_FLOAT  shift, and go to state 207
    LIT_CHAR   shift, and go to state 208


State 187

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks • KW_DEFAULT ':' statements '}'
   99            | KW_SWITCH '(' expression ')' '{' switch_case_blocks • '}'

    KW_DEFAULT  shift, and go to state 209
    '}'         shift, and go to state 210


State 188

  103 switch_case_blocks: epsilon •

    $default  reduce using rule 103 (switch_case_blocks)


State 189

   17 group_data_type: KW_CYCLIC '<' LIT_INT '>' •

    $default  reduce using rule 17 (group_data_type)


State 190

   18 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' •

    $default  reduce using rule 18 (group_data_type)


State 191

   19 group_data_type: KW_ALTERNATING '<' LIT_INT '>' •

    $default  reduce using rule 19 (group_data_type)


State 192

   20 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' •

    $default  reduce using rule 20 (group_data_type)


State 193

   21 group_data_type: KW_INV_MAT '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 211


State 194

   23 ring_data_type: KW_MATRIX '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 212


State 195

   24 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' •

    $default  reduce using rule 24 (ring_data_type)


State 196

   25 space_data_type: KW_VEC '<' IDENT '>' •

    $default  reduce using rule 25 (space_data_type)


State 197

   26 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' •

    $default  reduce using rule 26 (space_data_type)


State 198

   28 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' • A

    '='  shift, and go to state 152

    $default  reduce using rule 104 (epsilon)

    A        go to state 213
    epsilon  go to state 154


State 199

   90 D: '{' statements '}' •
   91  | '{' statements '}' • KW_ELSE if_else_conditional
   92  | '{' statements '}' • KW_ELSE '{' statements '}'

    KW_ELSE  shift, and go to state 214

    $default  reduce using rule 90 (D)


State 200

   93 loop_stmt: KW_WHILE '(' logical_expr ')' '{' statements '}' •

    $default  reduce using rule 93 (loop_stmt)


State 201

   81 unary_operation: var • '+' '+'
   82                | var • '-' '-'

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72


State 202

   96 V: unary_operation •

    $default  reduce using rule 96 (V)


State 203

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 215


State 204

   97 V: epsilon •

    $default  reduce using rule 97 (V)


State 205

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V • ')' '{' statements '}'

    ')'  shift, and go to state 216


State 206

  101 switch_case_blocks: KW_CASE LIT_INT • ':' statements switch_case_blocks

    ':'  shift, and go to state 217


State 207

  102 switch_case_blocks: KW_CASE LIT_FLOAT • ':' statements switch_case_blocks

    ':'  shift, and go to state 218


State 208

  100 switch_case_blocks: KW_CASE LIT_CHAR • ':' statements switch_case_blocks

    ':'  shift, and go to state 219


State 209

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT • ':' statements '}'

    ':'  shift, and go to state 220


State 210

   99 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks '}' •

    $default  reduce using rule 99 (switch_case)


State 211

   21 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 221


State 212

   23 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 222


State 213

   28 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A •

    $default  reduce using rule 28 (declaration)


State 214

   91 D: '{' statements '}' KW_ELSE • if_else_conditional
   92  | '{' statements '}' KW_ELSE • '{' statements '}'

    KW_IF  shift, and go to state 3
    '{'    shift, and go to state 223

    if_else_conditional  go to state 224


State 215

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 225


State 216

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' • '{' statements '}'

    '{'  shift, and go to state 226


State 217

  101 switch_case_blocks: KW_CASE LIT_INT ':' • statements switch_case_blocks

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 227
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 218

  102 switch_case_blocks: KW_CASE LIT_FLOAT ':' • statements switch_case_blocks

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 228
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 219

  100 switch_case_blocks: KW_CASE LIT_CHAR ':' • statements switch_case_blocks

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 229
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 220

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' • statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 230
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 221

   21 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 21 (group_data_type)


State 222

   23 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 23 (ring_data_type)


State 223

   92 D: '{' statements '}' KW_ELSE '{' • statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 231
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 224

   91 D: '{' statements '}' KW_ELSE if_else_conditional •

    $default  reduce using rule 91 (D)


State 225

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 232
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 226

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' • statements '}'

    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 2
    KW_IF        shift, and go to state 3
    KW_WHILE     shift, and go to state 4
    KW_FOR       shift, and go to state 5
    KW_SWITCH    shift, and go to state 6
    KW_BREAK     shift, and go to state 7
    KW_CONTINUE  shift, and go to state 8
    IDENT        shift, and go to state 9

    $default  reduce using rule 104 (epsilon)

    statements            go to state 233
    statement             go to state 11
    var                   go to state 12
    declaration           go to state 13
    assignment            go to state 14
    return_stmt           go to state 15
    call_stmt_standalone  go to state 16
    array_access          go to state 17
    if_else_conditional   go to state 18
    loop_stmt             go to state 19
    switch_case           go to state 20
    epsilon               go to state 21


State 227

  101 switch_case_blocks: KW_CASE LIT_INT ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 186

    $default  reduce using rule 104 (epsilon)

    switch_case_blocks  go to state 234
    epsilon             go to state 188


State 228

  102 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 186

    $default  reduce using rule 104 (epsilon)

    switch_case_blocks  go to state 235
    epsilon             go to state 188


State 229

  100 switch_case_blocks: KW_CASE LIT_CHAR ':' statements • switch_case_blocks

    KW_CASE  shift, and go to state 186

    $default  reduce using rule 104 (epsilon)

    switch_case_blocks  go to state 236
    epsilon             go to state 188


State 230

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements • '}'

    '}'  shift, and go to state 237


State 231

   92 D: '{' statements '}' KW_ELSE '{' statements • '}'

    '}'  shift, and go to state 238


State 232

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 239


State 233

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements • '}'

    '}'  shift, and go to state 240


State 234

  101 switch_case_blocks: KW_CASE LIT_INT ':' statements switch_case_blocks •

    $default  reduce using rule 101 (switch_case_blocks)


State 235

  102 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements switch_case_blocks •

    $default  reduce using rule 102 (switch_case_blocks)


State 236

  100 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks •

    $default  reduce using rule 100 (switch_case_blocks)


State 237

   98 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}' •

    $default  reduce using rule 98 (switch_case)


State 238

   92 D: '{' statements '}' KW_ELSE '{' statements '}' •

    $default  reduce using rule 92 (D)


State 239

   95 loop_stmt: KW_FOR '(' declaration ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 95 (loop_stmt)


State 240

   94 loop_stmt: KW_FOR '(' assignment ';' logical_expr ';' V ')' '{' statements '}' •

    $default  reduce using rule 94 (loop_stmt)
