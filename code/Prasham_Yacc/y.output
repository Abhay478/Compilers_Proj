Terminals unused in grammar

    GT
    LT


State 27 conflicts: 3 reduce/reduce
State 33 conflicts: 3 reduce/reduce
State 53 conflicts: 1 shift/reduce


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional

    8 var: IDENT
    9    | IDENT '.' IDENT

   10 field_data_type: ε
   11                | KW_BIG_RATIONAL
   12                | KW_COMPLEX

   13 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   14                | KW_SYMMETRIC '<' LIT_INT '>'
   15                | KW_ALTERNATING '<' LIT_INT '>'
   16                | KW_DIHEDRAL '<' LIT_INT '>'
   17                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   18 ring_data_type: KW_BIGINT
   19               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   20               | KW_POLYNOMIAL '<' IDENT '>'

   21 space_data_type: KW_VEC '<' IDENT '>'
   22                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   23 declaration: KW_LET var ':' PRIMITIVE_DTYPE A
   24            | KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   25            | KW_LET var ':' IDENT A
   26            | KW_LET var ':' group_data_type A
   27            | KW_LET var ':' ring_data_type A
   28            | KW_LET var ':' field_data_type A
   29            | KW_LET var ':' space_data_type A

   30 A: '=' expression
   31  | epsilon

   32 assignment: var '=' expression

   33 expression: arithmetic_expr
   34           | logical_expr
   35           | call_stmt
   36           | array_access
   37           | array_decl

   38 arithmetic_expr: arithmetic_expr '+' term
   39                | arithmetic_expr '-' term
   40                | term

   41 term: term '*' factor
   42     | term '/' factor
   43     | term '%' factor
   44     | factor

   45 factor: var
   46       | '(' arithmetic_expr ')'
   47       | '-' factor
   48       | constant

   49 constant: LIT_CHAR
   50         | LIT_FLOAT
   51         | LIT_INT
   52         | LIT_STR

   53 logical_expr: B logical_op logical_expr
   54             | B
   55             | LOGICAL_NOT logical_expr

   56 B: arithmetic_expr
   57  | call_stmt
   58  | '(' logical_expr ')'
   59  | KW_TRUE
   60  | KW_FALSE

   61 logical_op: '>'
   62           | '<'
   63           | GTEQ
   64           | LTEQ
   65           | EQ
   66           | NEQ
   67           | LOGICAL_AND
   68           | LOGICAL_OR

   69 return_stmt: KW_RETURN expression

   70 call_stmt_standalone: var '(' pass_param_list ')' ';'
   71                     | var '(' ')' ';'

   72 call_stmt: var '(' pass_param_list ')'
   73          | var '(' ')'

   74 pass_param_list: expression ',' pass_param_list
   75                | expression

   76 array_access: var C

   77 C: '[' LIT_INT ']' C
   78  | '[' LIT_INT ']'

   79 array_decl: '[' array_list ']'

   80 array_list: constant ',' array_list
   81           | constant

   82 if_else_conditional: KW_IF '(' logical_expr ')' D

   83 D: '{' statements '}'
   84  | '{' statements '}' KW_ELSE if_else_conditional
   85  | '{' statements '}' KW_ELSE '{' statements '}'

   86 epsilon: ε


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 43
    '(' (40) 46 58 70 71 72 73 82
    ')' (41) 46 58 70 71 72 73 82
    '*' (42) 41
    '+' (43) 38
    ',' (44) 17 19 74 80
    '-' (45) 39 47
    '.' (46) 9
    '/' (47) 42
    ':' (58) 23 24 25 26 27 28 29
    ';' (59) 3 4 6 70 71
    '<' (60) 13 14 15 16 17 19 20 21 22 24 62
    '=' (61) 30 32
    '>' (62) 13 14 15 16 17 19 20 21 22 24 61
    '[' (91) 77 78 79
    ']' (93) 77 78 79
    '{' (123) 83 84 85
    '}' (125) 83 84 85
    error (256)
    KW_LET (258) 23 24 25 26 27 28 29
    KW_RETURN (259) 69
    KW_IF (260) 82
    KW_ELSE (261) 84 85
    KW_CYCLIC (262) 13
    KW_BIG_RATIONAL (263) 11
    KW_COMPLEX (264) 12
    KW_SYMMETRIC (265) 14
    KW_ALTERNATING (266) 15
    KW_DIHEDRAL (267) 16
    KW_INV_MAT (268) 17
    KW_BIGINT (269) 18
    KW_MATRIX (270) 19
    KW_POLYNOMIAL (271) 20
    KW_VEC (272) 21 22
    KW_BUF (273) 24
    IDENT (274) 8 9 17 19 20 21 25
    PRIMITIVE_DTYPE (275) 22 23 24
    LIT_INT (276) 13 14 15 16 17 19 51 77 78
    LIT_FLOAT (277) 50
    LIT_STR (278) 52
    LIT_CHAR (279) 49
    LOGICAL_AND (280) 67
    LOGICAL_OR (281) 68
    LOGICAL_NOT (282) 55
    EQ (283) 65
    NEQ (284) 66
    GT (285)
    LT (286)
    GTEQ (287) 63
    LTEQ (288) 64
    KW_TRUE (289) 59
    KW_FALSE (290) 60


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    statements (55)
        on left: 1 2
        on right: 0 1 83 84 85
    statement (56)
        on left: 3 4 5 6 7
        on right: 1
    var (57)
        on left: 8 9
        on right: 23 24 25 26 27 28 29 32 45 70 71 72 73 76
    field_data_type (58)
        on left: 10 11 12
        on right: 28
    group_data_type (59)
        on left: 13 14 15 16 17
        on right: 26
    ring_data_type (60)
        on left: 18 19 20
        on right: 27
    space_data_type (61)
        on left: 21 22
        on right: 29
    declaration (62)
        on left: 23 24 25 26 27 28 29
        on right: 3
    A (63)
        on left: 30 31
        on right: 23 24 25 26 27 28 29
    assignment (64)
        on left: 32
        on right: 4
    expression (65)
        on left: 33 34 35 36 37
        on right: 30 32 69 74 75
    arithmetic_expr (66)
        on left: 38 39 40
        on right: 33 38 39 46 56
    term (67)
        on left: 41 42 43 44
        on right: 38 39 40 41 42 43
    factor (68)
        on left: 45 46 47 48
        on right: 41 42 43 44 47
    constant (69)
        on left: 49 50 51 52
        on right: 48 80 81
    logical_expr (70)
        on left: 53 54 55
        on right: 34 53 55 58 82
    B (71)
        on left: 56 57 58 59 60
        on right: 53 54
    logical_op (72)
        on left: 61 62 63 64 65 66 67 68
        on right: 53
    return_stmt (73)
        on left: 69
        on right: 6
    call_stmt_standalone (74)
        on left: 70 71
        on right: 5
    call_stmt (75)
        on left: 72 73
        on right: 35 57
    pass_param_list (76)
        on left: 74 75
        on right: 70 72 74
    array_access (77)
        on left: 76
        on right: 36
    C (78)
        on left: 77 78
        on right: 76 77
    array_decl (79)
        on left: 79
        on right: 37
    array_list (80)
        on left: 80 81
        on right: 79 80
    if_else_conditional (81)
        on left: 82
        on right: 7 84
    D (82)
        on left: 83 84 85
        on right: 82
    epsilon (83)
        on left: 86
        on right: 2 31


State 0

    0 $accept: • statements $end

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    IDENT      shift, and go to state 4

    $default  reduce using rule 86 (epsilon)

    statements            go to state 5
    statement             go to state 6
    var                   go to state 7
    declaration           go to state 8
    assignment            go to state 9
    return_stmt           go to state 10
    call_stmt_standalone  go to state 11
    if_else_conditional   go to state 12
    epsilon               go to state 13


State 1

   23 declaration: KW_LET • var ':' PRIMITIVE_DTYPE A
   24            | KW_LET • var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   25            | KW_LET • var ':' IDENT A
   26            | KW_LET • var ':' group_data_type A
   27            | KW_LET • var ':' ring_data_type A
   28            | KW_LET • var ':' field_data_type A
   29            | KW_LET • var ':' space_data_type A

    IDENT  shift, and go to state 4

    var  go to state 14


State 2

   69 return_stmt: KW_RETURN • expression

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 26
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    array_access     go to state 34
    array_decl       go to state 35


State 3

   82 if_else_conditional: KW_IF • '(' logical_expr ')' D

    '('  shift, and go to state 36


State 4

    8 var: IDENT •
    9    | IDENT • '.' IDENT

    '.'  shift, and go to state 37

    $default  reduce using rule 8 (var)


State 5

    0 $accept: statements • $end

    $end  shift, and go to state 38


State 6

    1 statements: statement • statements

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    IDENT      shift, and go to state 4

    $default  reduce using rule 86 (epsilon)

    statements            go to state 39
    statement             go to state 6
    var                   go to state 7
    declaration           go to state 8
    assignment            go to state 9
    return_stmt           go to state 10
    call_stmt_standalone  go to state 11
    if_else_conditional   go to state 12
    epsilon               go to state 13


State 7

   32 assignment: var • '=' expression
   70 call_stmt_standalone: var • '(' pass_param_list ')' ';'
   71                     | var • '(' ')' ';'

    '='  shift, and go to state 40
    '('  shift, and go to state 41


State 8

    3 statement: declaration • ';'

    ';'  shift, and go to state 42


State 9

    4 statement: assignment • ';'

    ';'  shift, and go to state 43


State 10

    6 statement: return_stmt • ';'

    ';'  shift, and go to state 44


State 11

    5 statement: call_stmt_standalone •

    $default  reduce using rule 5 (statement)


State 12

    7 statement: if_else_conditional •

    $default  reduce using rule 7 (statement)


State 13

    2 statements: epsilon •

    $default  reduce using rule 2 (statements)


State 14

   23 declaration: KW_LET var • ':' PRIMITIVE_DTYPE A
   24            | KW_LET var • ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A
   25            | KW_LET var • ':' IDENT A
   26            | KW_LET var • ':' group_data_type A
   27            | KW_LET var • ':' ring_data_type A
   28            | KW_LET var • ':' field_data_type A
   29            | KW_LET var • ':' space_data_type A

    ':'  shift, and go to state 45


State 15

   51 constant: LIT_INT •

    $default  reduce using rule 51 (constant)


State 16

   50 constant: LIT_FLOAT •

    $default  reduce using rule 50 (constant)


State 17

   52 constant: LIT_STR •

    $default  reduce using rule 52 (constant)


State 18

   49 constant: LIT_CHAR •

    $default  reduce using rule 49 (constant)


State 19

   55 logical_expr: LOGICAL_NOT • logical_expr

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23

    var              go to state 46
    arithmetic_expr  go to state 47
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 48
    B                go to state 32
    call_stmt        go to state 49


State 20

   59 B: KW_TRUE •

    $default  reduce using rule 59 (B)


State 21

   60 B: KW_FALSE •

    $default  reduce using rule 60 (B)


State 22

   47 factor: '-' • factor

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    factor    go to state 52
    constant  go to state 30


State 23

   46 factor: '(' • arithmetic_expr ')'
   58 B: '(' • logical_expr ')'

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23

    var              go to state 46
    arithmetic_expr  go to state 53
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 54
    B                go to state 32
    call_stmt        go to state 49


State 24

   79 array_decl: '[' • array_list ']'

    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18

    constant    go to state 55
    array_list  go to state 56


State 25

   45 factor: var •
   72 call_stmt: var • '(' pass_param_list ')'
   73          | var • '(' ')'
   76 array_access: var • C

    '('  shift, and go to state 57
    '['  shift, and go to state 58

    $default  reduce using rule 45 (factor)

    C  go to state 59


State 26

   69 return_stmt: KW_RETURN expression •

    $default  reduce using rule 69 (return_stmt)


State 27

   33 expression: arithmetic_expr •
   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   56 B: arithmetic_expr •

    '+'  shift, and go to state 60
    '-'  shift, and go to state 61

    ';'       reduce using rule 33 (expression)
    ';'       [reduce using rule 56 (B)]
    ','       reduce using rule 33 (expression)
    ','       [reduce using rule 56 (B)]
    ')'       reduce using rule 33 (expression)
    ')'       [reduce using rule 56 (B)]
    $default  reduce using rule 56 (B)


State 28

   40 arithmetic_expr: term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 62
    '/'  shift, and go to state 63
    '%'  shift, and go to state 64

    $default  reduce using rule 40 (arithmetic_expr)


State 29

   44 term: factor •

    $default  reduce using rule 44 (term)


State 30

   48 factor: constant •

    $default  reduce using rule 48 (factor)


State 31

   34 expression: logical_expr •

    $default  reduce using rule 34 (expression)


State 32

   53 logical_expr: B • logical_op logical_expr
   54             | B •

    LOGICAL_AND  shift, and go to state 65
    LOGICAL_OR   shift, and go to state 66
    EQ           shift, and go to state 67
    NEQ          shift, and go to state 68
    GTEQ         shift, and go to state 69
    LTEQ         shift, and go to state 70
    '<'          shift, and go to state 71
    '>'          shift, and go to state 72

    $default  reduce using rule 54 (logical_expr)

    logical_op  go to state 73


State 33

   35 expression: call_stmt •
   57 B: call_stmt •

    ';'       reduce using rule 35 (expression)
    ';'       [reduce using rule 57 (B)]
    ','       reduce using rule 35 (expression)
    ','       [reduce using rule 57 (B)]
    ')'       reduce using rule 35 (expression)
    ')'       [reduce using rule 57 (B)]
    $default  reduce using rule 57 (B)


State 34

   36 expression: array_access •

    $default  reduce using rule 36 (expression)


State 35

   37 expression: array_decl •

    $default  reduce using rule 37 (expression)


State 36

   82 if_else_conditional: KW_IF '(' • logical_expr ')' D

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23

    var              go to state 46
    arithmetic_expr  go to state 47
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 74
    B                go to state 32
    call_stmt        go to state 49


State 37

    9 var: IDENT '.' • IDENT

    IDENT  shift, and go to state 75


State 38

    0 $accept: statements $end •

    $default  accept


State 39

    1 statements: statement statements •

    $default  reduce using rule 1 (statements)


State 40

   32 assignment: var '=' • expression

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 76
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    array_access     go to state 34
    array_decl       go to state 35


State 41

   70 call_stmt_standalone: var '(' • pass_param_list ')' ';'
   71                     | var '(' • ')' ';'

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    ')'          shift, and go to state 77
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 78
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    pass_param_list  go to state 79
    array_access     go to state 34
    array_decl       go to state 35


State 42

    3 statement: declaration ';' •

    $default  reduce using rule 3 (statement)


State 43

    4 statement: assignment ';' •

    $default  reduce using rule 4 (statement)


State 44

    6 statement: return_stmt ';' •

    $default  reduce using rule 6 (statement)


State 45

   23 declaration: KW_LET var ':' • PRIMITIVE_DTYPE A
   24            | KW_LET var ':' • KW_BUF '<' PRIMITIVE_DTYPE '>' A
   25            | KW_LET var ':' • IDENT A
   26            | KW_LET var ':' • group_data_type A
   27            | KW_LET var ':' • ring_data_type A
   28            | KW_LET var ':' • field_data_type A
   29            | KW_LET var ':' • space_data_type A

    KW_CYCLIC        shift, and go to state 80
    KW_BIG_RATIONAL  shift, and go to state 81
    KW_COMPLEX       shift, and go to state 82
    KW_SYMMETRIC     shift, and go to state 83
    KW_ALTERNATING   shift, and go to state 84
    KW_DIHEDRAL      shift, and go to state 85
    KW_INV_MAT       shift, and go to state 86
    KW_BIGINT        shift, and go to state 87
    KW_MATRIX        shift, and go to state 88
    KW_POLYNOMIAL    shift, and go to state 89
    KW_VEC           shift, and go to state 90
    KW_BUF           shift, and go to state 91
    IDENT            shift, and go to state 92
    PRIMITIVE_DTYPE  shift, and go to state 93

    $default  reduce using rule 10 (field_data_type)

    field_data_type  go to state 94
    group_data_type  go to state 95
    ring_data_type   go to state 96
    space_data_type  go to state 97


State 46

   45 factor: var •
   72 call_stmt: var • '(' pass_param_list ')'
   73          | var • '(' ')'

    '('  shift, and go to state 57

    $default  reduce using rule 45 (factor)


State 47

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   56 B: arithmetic_expr •

    '+'  shift, and go to state 60
    '-'  shift, and go to state 61

    $default  reduce using rule 56 (B)


State 48

   55 logical_expr: LOGICAL_NOT logical_expr •

    $default  reduce using rule 55 (logical_expr)


State 49

   57 B: call_stmt •

    $default  reduce using rule 57 (B)


State 50

   46 factor: '(' • arithmetic_expr ')'

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var              go to state 51
    arithmetic_expr  go to state 98
    term             go to state 28
    factor           go to state 29
    constant         go to state 30


State 51

   45 factor: var •

    $default  reduce using rule 45 (factor)


State 52

   47 factor: '-' factor •

    $default  reduce using rule 47 (factor)


State 53

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   46 factor: '(' arithmetic_expr • ')'
   56 B: arithmetic_expr •

    '+'  shift, and go to state 60
    '-'  shift, and go to state 61
    ')'  shift, and go to state 99

    ')'       [reduce using rule 56 (B)]
    $default  reduce using rule 56 (B)


State 54

   58 B: '(' logical_expr • ')'

    ')'  shift, and go to state 100


State 55

   80 array_list: constant • ',' array_list
   81           | constant •

    ','  shift, and go to state 101

    $default  reduce using rule 81 (array_list)


State 56

   79 array_decl: '[' array_list • ']'

    ']'  shift, and go to state 102


State 57

   72 call_stmt: var '(' • pass_param_list ')'
   73          | var '(' • ')'

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    ')'          shift, and go to state 103
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 78
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    pass_param_list  go to state 104
    array_access     go to state 34
    array_decl       go to state 35


State 58

   77 C: '[' • LIT_INT ']' C
   78  | '[' • LIT_INT ']'

    LIT_INT  shift, and go to state 105


State 59

   76 array_access: var C •

    $default  reduce using rule 76 (array_access)


State 60

   38 arithmetic_expr: arithmetic_expr '+' • term

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    term      go to state 106
    factor    go to state 29
    constant  go to state 30


State 61

   39 arithmetic_expr: arithmetic_expr '-' • term

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    term      go to state 107
    factor    go to state 29
    constant  go to state 30


State 62

   41 term: term '*' • factor

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    factor    go to state 108
    constant  go to state 30


State 63

   42 term: term '/' • factor

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    factor    go to state 109
    constant  go to state 30


State 64

   43 term: term '%' • factor

    IDENT      shift, and go to state 4
    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18
    '-'        shift, and go to state 22
    '('        shift, and go to state 50

    var       go to state 51
    factor    go to state 110
    constant  go to state 30


State 65

   67 logical_op: LOGICAL_AND •

    $default  reduce using rule 67 (logical_op)


State 66

   68 logical_op: LOGICAL_OR •

    $default  reduce using rule 68 (logical_op)


State 67

   65 logical_op: EQ •

    $default  reduce using rule 65 (logical_op)


State 68

   66 logical_op: NEQ •

    $default  reduce using rule 66 (logical_op)


State 69

   63 logical_op: GTEQ •

    $default  reduce using rule 63 (logical_op)


State 70

   64 logical_op: LTEQ •

    $default  reduce using rule 64 (logical_op)


State 71

   62 logical_op: '<' •

    $default  reduce using rule 62 (logical_op)


State 72

   61 logical_op: '>' •

    $default  reduce using rule 61 (logical_op)


State 73

   53 logical_expr: B logical_op • logical_expr

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23

    var              go to state 46
    arithmetic_expr  go to state 47
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 111
    B                go to state 32
    call_stmt        go to state 49


State 74

   82 if_else_conditional: KW_IF '(' logical_expr • ')' D

    ')'  shift, and go to state 112


State 75

    9 var: IDENT '.' IDENT •

    $default  reduce using rule 9 (var)


State 76

   32 assignment: var '=' expression •

    $default  reduce using rule 32 (assignment)


State 77

   71 call_stmt_standalone: var '(' ')' • ';'

    ';'  shift, and go to state 113


State 78

   74 pass_param_list: expression • ',' pass_param_list
   75                | expression •

    ','  shift, and go to state 114

    $default  reduce using rule 75 (pass_param_list)


State 79

   70 call_stmt_standalone: var '(' pass_param_list • ')' ';'

    ')'  shift, and go to state 115


State 80

   13 group_data_type: KW_CYCLIC • '<' LIT_INT '>'

    '<'  shift, and go to state 116


State 81

   11 field_data_type: KW_BIG_RATIONAL •

    $default  reduce using rule 11 (field_data_type)


State 82

   12 field_data_type: KW_COMPLEX •

    $default  reduce using rule 12 (field_data_type)


State 83

   14 group_data_type: KW_SYMMETRIC • '<' LIT_INT '>'

    '<'  shift, and go to state 117


State 84

   15 group_data_type: KW_ALTERNATING • '<' LIT_INT '>'

    '<'  shift, and go to state 118


State 85

   16 group_data_type: KW_DIHEDRAL • '<' LIT_INT '>'

    '<'  shift, and go to state 119


State 86

   17 group_data_type: KW_INV_MAT • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 120


State 87

   18 ring_data_type: KW_BIGINT •

    $default  reduce using rule 18 (ring_data_type)


State 88

   19 ring_data_type: KW_MATRIX • '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 121


State 89

   20 ring_data_type: KW_POLYNOMIAL • '<' IDENT '>'

    '<'  shift, and go to state 122


State 90

   21 space_data_type: KW_VEC • '<' IDENT '>'
   22                | KW_VEC • '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 123


State 91

   24 declaration: KW_LET var ':' KW_BUF • '<' PRIMITIVE_DTYPE '>' A

    '<'  shift, and go to state 124


State 92

   25 declaration: KW_LET var ':' IDENT • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 126
    epsilon  go to state 127


State 93

   23 declaration: KW_LET var ':' PRIMITIVE_DTYPE • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 128
    epsilon  go to state 127


State 94

   28 declaration: KW_LET var ':' field_data_type • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 129
    epsilon  go to state 127


State 95

   26 declaration: KW_LET var ':' group_data_type • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 130
    epsilon  go to state 127


State 96

   27 declaration: KW_LET var ':' ring_data_type • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 131
    epsilon  go to state 127


State 97

   29 declaration: KW_LET var ':' space_data_type • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 132
    epsilon  go to state 127


State 98

   38 arithmetic_expr: arithmetic_expr • '+' term
   39                | arithmetic_expr • '-' term
   46 factor: '(' arithmetic_expr • ')'

    '+'  shift, and go to state 60
    '-'  shift, and go to state 61
    ')'  shift, and go to state 99


State 99

   46 factor: '(' arithmetic_expr ')' •

    $default  reduce using rule 46 (factor)


State 100

   58 B: '(' logical_expr ')' •

    $default  reduce using rule 58 (B)


State 101

   80 array_list: constant ',' • array_list

    LIT_INT    shift, and go to state 15
    LIT_FLOAT  shift, and go to state 16
    LIT_STR    shift, and go to state 17
    LIT_CHAR   shift, and go to state 18

    constant    go to state 55
    array_list  go to state 133


State 102

   79 array_decl: '[' array_list ']' •

    $default  reduce using rule 79 (array_decl)


State 103

   73 call_stmt: var '(' ')' •

    $default  reduce using rule 73 (call_stmt)


State 104

   72 call_stmt: var '(' pass_param_list • ')'

    ')'  shift, and go to state 134


State 105

   77 C: '[' LIT_INT • ']' C
   78  | '[' LIT_INT • ']'

    ']'  shift, and go to state 135


State 106

   38 arithmetic_expr: arithmetic_expr '+' term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 62
    '/'  shift, and go to state 63
    '%'  shift, and go to state 64

    $default  reduce using rule 38 (arithmetic_expr)


State 107

   39 arithmetic_expr: arithmetic_expr '-' term •
   41 term: term • '*' factor
   42     | term • '/' factor
   43     | term • '%' factor

    '*'  shift, and go to state 62
    '/'  shift, and go to state 63
    '%'  shift, and go to state 64

    $default  reduce using rule 39 (arithmetic_expr)


State 108

   41 term: term '*' factor •

    $default  reduce using rule 41 (term)


State 109

   42 term: term '/' factor •

    $default  reduce using rule 42 (term)


State 110

   43 term: term '%' factor •

    $default  reduce using rule 43 (term)


State 111

   53 logical_expr: B logical_op logical_expr •

    $default  reduce using rule 53 (logical_expr)


State 112

   82 if_else_conditional: KW_IF '(' logical_expr ')' • D

    '{'  shift, and go to state 136

    D  go to state 137


State 113

   71 call_stmt_standalone: var '(' ')' ';' •

    $default  reduce using rule 71 (call_stmt_standalone)


State 114

   74 pass_param_list: expression ',' • pass_param_list

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 78
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    pass_param_list  go to state 138
    array_access     go to state 34
    array_decl       go to state 35


State 115

   70 call_stmt_standalone: var '(' pass_param_list ')' • ';'

    ';'  shift, and go to state 139


State 116

   13 group_data_type: KW_CYCLIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 140


State 117

   14 group_data_type: KW_SYMMETRIC '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 141


State 118

   15 group_data_type: KW_ALTERNATING '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 142


State 119

   16 group_data_type: KW_DIHEDRAL '<' • LIT_INT '>'

    LIT_INT  shift, and go to state 143


State 120

   17 group_data_type: KW_INV_MAT '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 144


State 121

   19 ring_data_type: KW_MATRIX '<' • LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 145


State 122

   20 ring_data_type: KW_POLYNOMIAL '<' • IDENT '>'

    IDENT  shift, and go to state 146


State 123

   21 space_data_type: KW_VEC '<' • IDENT '>'
   22                | KW_VEC '<' • PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 147
    PRIMITIVE_DTYPE  shift, and go to state 148


State 124

   24 declaration: KW_LET var ':' KW_BUF '<' • PRIMITIVE_DTYPE '>' A

    PRIMITIVE_DTYPE  shift, and go to state 149


State 125

   30 A: '=' • expression

    IDENT        shift, and go to state 4
    LIT_INT      shift, and go to state 15
    LIT_FLOAT    shift, and go to state 16
    LIT_STR      shift, and go to state 17
    LIT_CHAR     shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    KW_TRUE      shift, and go to state 20
    KW_FALSE     shift, and go to state 21
    '-'          shift, and go to state 22
    '('          shift, and go to state 23
    '['          shift, and go to state 24

    var              go to state 25
    expression       go to state 150
    arithmetic_expr  go to state 27
    term             go to state 28
    factor           go to state 29
    constant         go to state 30
    logical_expr     go to state 31
    B                go to state 32
    call_stmt        go to state 33
    array_access     go to state 34
    array_decl       go to state 35


State 126

   25 declaration: KW_LET var ':' IDENT A •

    $default  reduce using rule 25 (declaration)


State 127

   31 A: epsilon •

    $default  reduce using rule 31 (A)


State 128

   23 declaration: KW_LET var ':' PRIMITIVE_DTYPE A •

    $default  reduce using rule 23 (declaration)


State 129

   28 declaration: KW_LET var ':' field_data_type A •

    $default  reduce using rule 28 (declaration)


State 130

   26 declaration: KW_LET var ':' group_data_type A •

    $default  reduce using rule 26 (declaration)


State 131

   27 declaration: KW_LET var ':' ring_data_type A •

    $default  reduce using rule 27 (declaration)


State 132

   29 declaration: KW_LET var ':' space_data_type A •

    $default  reduce using rule 29 (declaration)


State 133

   80 array_list: constant ',' array_list •

    $default  reduce using rule 80 (array_list)


State 134

   72 call_stmt: var '(' pass_param_list ')' •

    $default  reduce using rule 72 (call_stmt)


State 135

   77 C: '[' LIT_INT ']' • C
   78  | '[' LIT_INT ']' •

    '['  shift, and go to state 58

    $default  reduce using rule 78 (C)

    C  go to state 151


State 136

   83 D: '{' • statements '}'
   84  | '{' • statements '}' KW_ELSE if_else_conditional
   85  | '{' • statements '}' KW_ELSE '{' statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    IDENT      shift, and go to state 4

    $default  reduce using rule 86 (epsilon)

    statements            go to state 152
    statement             go to state 6
    var                   go to state 7
    declaration           go to state 8
    assignment            go to state 9
    return_stmt           go to state 10
    call_stmt_standalone  go to state 11
    if_else_conditional   go to state 12
    epsilon               go to state 13


State 137

   82 if_else_conditional: KW_IF '(' logical_expr ')' D •

    $default  reduce using rule 82 (if_else_conditional)


State 138

   74 pass_param_list: expression ',' pass_param_list •

    $default  reduce using rule 74 (pass_param_list)


State 139

   70 call_stmt_standalone: var '(' pass_param_list ')' ';' •

    $default  reduce using rule 70 (call_stmt_standalone)


State 140

   13 group_data_type: KW_CYCLIC '<' LIT_INT • '>'

    '>'  shift, and go to state 153


State 141

   14 group_data_type: KW_SYMMETRIC '<' LIT_INT • '>'

    '>'  shift, and go to state 154


State 142

   15 group_data_type: KW_ALTERNATING '<' LIT_INT • '>'

    '>'  shift, and go to state 155


State 143

   16 group_data_type: KW_DIHEDRAL '<' LIT_INT • '>'

    '>'  shift, and go to state 156


State 144

   17 group_data_type: KW_INV_MAT '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 157


State 145

   19 ring_data_type: KW_MATRIX '<' LIT_INT • ',' IDENT '>'

    ','  shift, and go to state 158


State 146

   20 ring_data_type: KW_POLYNOMIAL '<' IDENT • '>'

    '>'  shift, and go to state 159


State 147

   21 space_data_type: KW_VEC '<' IDENT • '>'

    '>'  shift, and go to state 160


State 148

   22 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE • '>'

    '>'  shift, and go to state 161


State 149

   24 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE • '>' A

    '>'  shift, and go to state 162


State 150

   30 A: '=' expression •

    $default  reduce using rule 30 (A)


State 151

   77 C: '[' LIT_INT ']' C •

    $default  reduce using rule 77 (C)


State 152

   83 D: '{' statements • '}'
   84  | '{' statements • '}' KW_ELSE if_else_conditional
   85  | '{' statements • '}' KW_ELSE '{' statements '}'

    '}'  shift, and go to state 163


State 153

   13 group_data_type: KW_CYCLIC '<' LIT_INT '>' •

    $default  reduce using rule 13 (group_data_type)


State 154

   14 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' •

    $default  reduce using rule 14 (group_data_type)


State 155

   15 group_data_type: KW_ALTERNATING '<' LIT_INT '>' •

    $default  reduce using rule 15 (group_data_type)


State 156

   16 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' •

    $default  reduce using rule 16 (group_data_type)


State 157

   17 group_data_type: KW_INV_MAT '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 164


State 158

   19 ring_data_type: KW_MATRIX '<' LIT_INT ',' • IDENT '>'

    IDENT  shift, and go to state 165


State 159

   20 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' •

    $default  reduce using rule 20 (ring_data_type)


State 160

   21 space_data_type: KW_VEC '<' IDENT '>' •

    $default  reduce using rule 21 (space_data_type)


State 161

   22 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' •

    $default  reduce using rule 22 (space_data_type)


State 162

   24 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' • A

    '='  shift, and go to state 125

    $default  reduce using rule 86 (epsilon)

    A        go to state 166
    epsilon  go to state 127


State 163

   83 D: '{' statements '}' •
   84  | '{' statements '}' • KW_ELSE if_else_conditional
   85  | '{' statements '}' • KW_ELSE '{' statements '}'

    KW_ELSE  shift, and go to state 167

    $default  reduce using rule 83 (D)


State 164

   17 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 168


State 165

   19 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT • '>'

    '>'  shift, and go to state 169


State 166

   24 declaration: KW_LET var ':' KW_BUF '<' PRIMITIVE_DTYPE '>' A •

    $default  reduce using rule 24 (declaration)


State 167

   84 D: '{' statements '}' KW_ELSE • if_else_conditional
   85  | '{' statements '}' KW_ELSE • '{' statements '}'

    KW_IF  shift, and go to state 3
    '{'    shift, and go to state 170

    if_else_conditional  go to state 171


State 168

   17 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 17 (group_data_type)


State 169

   19 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' •

    $default  reduce using rule 19 (ring_data_type)


State 170

   85 D: '{' statements '}' KW_ELSE '{' • statements '}'

    KW_LET     shift, and go to state 1
    KW_RETURN  shift, and go to state 2
    KW_IF      shift, and go to state 3
    IDENT      shift, and go to state 4

    $default  reduce using rule 86 (epsilon)

    statements            go to state 172
    statement             go to state 6
    var                   go to state 7
    declaration           go to state 8
    assignment            go to state 9
    return_stmt           go to state 10
    call_stmt_standalone  go to state 11
    if_else_conditional   go to state 12
    epsilon               go to state 13


State 171

   84 D: '{' statements '}' KW_ELSE if_else_conditional •

    $default  reduce using rule 84 (D)


State 172

   85 D: '{' statements '}' KW_ELSE '{' statements • '}'

    '}'  shift, and go to state 173


State 173

   85 D: '{' statements '}' KW_ELSE '{' statements '}' •

    $default  reduce using rule 85 (D)
