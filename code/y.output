Terminals which are not used

   KW_MORPH


Grammar

    0 $accept: P $end

    1 P: declarations
    2  | P function
    3  | P struct
    4  | P forge
    5  | P enum

    6 declarations: declaration ';' declarations
    7             | epsilon

    8 body: '{' statements '}'

    9 statements: statement statements
   10           | epsilon

   11 statement: declaration ';'
   12          | assignment ';'
   13          | call ';'
   14          | return_stmt ';'
   15          | conditional
   16          | switch_case
   17          | loop_stmt
   18          | KW_BREAK ';'
   19          | KW_CONTINUE ';'
   20          | archetype_claim

   21 field_data_type: KW_BIG_RATIONAL
   22                | KW_COMPLEX

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   24                | KW_SYMMETRIC '<' LIT_INT '>'
   25                | KW_ALTERNATING '<' LIT_INT '>'
   26                | KW_DIHEDRAL '<' LIT_INT '>'
   27                | KW_INV_MAT '<' LIT_INT ',' type '>'

   28 ring_data_type: KW_BIGINT
   29               | KW_MATRIX '<' LIT_INT ',' type '>'
   30               | KW_POLYNOMIAL '<' type '>'

   31 space_data_type: KW_VEC '<' type '>'

   32 declaration: KW_LET decl_list

   33 decl_list: decl_item
   34          | decl_item ',' decl_list

   35 decl_item: typ_var
   36          | typ_var '=' expression

   37 type: PRIMITIVE_DTYPE
   38     | KW_BUF '<' PRIMITIVE_DTYPE '>'
   39     | IDENT
   40     | group_data_type
   41     | ring_data_type
   42     | field_data_type
   43     | space_data_type
   44     | '&' type
   45     | cart

   46 var: IDENT
   47    | var '.' IDENT
   48    | '*' var
   49    | '*' '(' expression ')'
   50    | IDENT VARIANT IDENT

   51 assignment: var '=' expression
   52           | array_access '=' expression

   53 constant: LIT_CHAR
   54         | LIT_FLOAT
   55         | LIT_INT
   56         | LIT_STR
   57         | KW_TRUE
   58         | KW_FALSE

   59 expression: '(' expression ')'
   60           | '!' expression
   61           | '-' expression
   62           | expression KW_AS type
   63           | expression '@' expression
   64           | expression '*' expression
   65           | expression '/' expression
   66           | expression '%' expression
   67           | expression '+' expression
   68           | expression '-' expression
   69           | expression '>' expression
   70           | expression '<' expression
   71           | expression rel_op expression
   72           | expression AND expression
   73           | expression OR expression
   74           | var
   75           | constant
   76           | unary_operation
   77           | array_access
   78           | call
   79           | array_decl

   80 return_stmt: KW_RETURN expression

   81 call: IDENT '(' pass_param_list ')'

   82 pass_param_list: expression ',' pass_param_list
   83                | epsilon

   84 unary_operation: var INCR
   85                | var DECR

   86 array_access: var array_decl

   87 array_decl: '[' array_list ']'
   88           | '[' expression SLICE expression ']'

   89 array_list: constant ',' array_list
   90           | constant

   91 conditional: KW_IF '(' expression ')' if_body

   92 if_body: body
   93        | body KW_ELSE conditional
   94        | body KW_ELSE body

   95 loop_stmt: KW_WHILE '(' expression ')' body
   96          | KW_FOR '(' assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR '(' declaration ';' expression ';' loop_mut ')' body
   98          | KW_FOR IDENT KW_IN IDENT body

   99 loop_mut: unary_operation
  100         | epsilon

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' sc_blocks '}'

  103 sc_blocks: KW_CASE constant ':' statements sc_blocks
  104          | epsilon

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  106                | KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  107                | KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  108                | KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

  109 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body

  110 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body

  111 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body

  112 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body

  113 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body

  114 function: function_header body

  115 function_header: KW_FN IDENT '(' parameter_list ')' ':' type

  116 parameter_list: typ_var
  117               | parameter_list ',' typ_var

  118 typ_var: IDENT ':' type

  119 struct: KW_STRUCT IDENT '{' attr_list '}'

  120 attr_list: attr_list ',' typ_var
  121          | typ_var

  122 enum: KW_ENUM IDENT '{' variant_list '}'

  123 variant_list: IDENT
  124             | variant_list ',' IDENT

  125 forge: KW_FORGE '(' parameter_list ')' KW_TO type body

  126 cart: '(' typ_list ')'

  127 typ_list: typ_list ',' type
  128         | type

  129 epsilon: /* empty */


Terminals, with rules where they appear

$end (0) 0
'!' (33) 60
'%' (37) 66
'&' (38) 44
'(' (40) 49 59 81 91 95 96 97 101 102 108 109 110 111 112 113 115 125
    126
')' (41) 49 59 81 91 95 96 97 101 102 108 109 110 111 112 113 115 125
    126
'*' (42) 48 49 64 110
'+' (43) 67 109
',' (44) 27 29 34 82 89 117 120 124 127
'-' (45) 61 68 112
'.' (46) 47
'/' (47) 65
':' (58) 101 103 115 118
';' (59) 6 11 12 13 14 18 19 96 97 105 106 107 108
'<' (60) 23 24 25 26 27 29 30 31 38 70
'=' (61) 36 51 52 108 109 110 111 112 113
'>' (62) 23 24 25 26 27 29 30 31 38 69
'@' (64) 63
'[' (91) 87 88
']' (93) 87 88
'{' (123) 8 101 102 105 106 107 108 119 122
'}' (125) 8 101 102 105 106 107 108 119 122
'~' (126) 113
error (256)
KW_CLAIM (258) 105 106 107 108
KW_IS (259) 105 106 107 108
KW_GROUP (260) 105
KW_RING (261) 106
KW_FIELD (262) 107 108
KW_SPACE (263) 108
KW_LET (264) 32
KW_RETURN (265) 80
KW_IF (266) 91
KW_ELSE (267) 93 94
KW_WHILE (268) 95
KW_FOR (269) 96 97 98
KW_IN (270) 98
KW_SWITCH (271) 101 102
KW_CASE (272) 103
KW_DEFAULT (273) 101
KW_BREAK (274) 18
KW_CONTINUE (275) 19
KW_FN (276) 115
KW_MORPH (277)
KW_FORGE (278) 125
KW_AS (279) 62
KW_STRUCT (280) 119
KW_ENUM (281) 122
KW_TO (282) 125
KW_CYCLIC (283) 23
KW_BIG_RATIONAL (284) 21
KW_COMPLEX (285) 22
KW_SYMMETRIC (286) 24
KW_ALTERNATING (287) 25
KW_DIHEDRAL (288) 26
KW_INV_MAT (289) 27
KW_BIGINT (290) 28
KW_MATRIX (291) 29
KW_POLYNOMIAL (292) 30
KW_VEC (293) 31
KW_BUF (294) 38
IDENT (295) 39 46 47 50 81 98 105 106 107 108 109 110 111 112 113 115
    118 119 122 123 124
PRIMITIVE_DTYPE (296) 37 38
LIT_INT (297) 23 24 25 26 27 29 55 111
LIT_FLOAT (298) 54
LIT_STR (299) 56
LIT_CHAR (300) 53
rel_op (301) 71
KW_TRUE (302) 57
KW_FALSE (303) 58
INCR (304) 84
DECR (305) 85
ARROW (306) 109 110 111 112 113
VARIANT (307) 50
SLICE (308) 88
AND (309) 72
OR (310) 73


Nonterminals, with rules where they appear

$accept (78)
    on left: 0
P (79)
    on left: 1 2 3 4 5, on right: 0 2 3 4 5
declarations (80)
    on left: 6 7, on right: 1 6
body (81)
    on left: 8, on right: 92 93 94 95 96 97 98 109 110 111 112 113
    114 125
statements (82)
    on left: 9 10, on right: 8 9 101 103
statement (83)
    on left: 11 12 13 14 15 16 17 18 19 20, on right: 9
field_data_type (84)
    on left: 21 22, on right: 42
group_data_type (85)
    on left: 23 24 25 26 27, on right: 40
ring_data_type (86)
    on left: 28 29 30, on right: 41
space_data_type (87)
    on left: 31, on right: 43
declaration (88)
    on left: 32, on right: 6 11 97
decl_list (89)
    on left: 33 34, on right: 32 34
decl_item (90)
    on left: 35 36, on right: 33 34
type (91)
    on left: 37 38 39 40 41 42 43 44 45, on right: 27 29 30 31 44 62
    108 115 118 125 127 128
var (92)
    on left: 46 47 48 49 50, on right: 47 48 51 74 84 85 86
assignment (93)
    on left: 51 52, on right: 12 96
constant (94)
    on left: 53 54 55 56 57 58, on right: 75 89 90 103
expression (95)
    on left: 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
    77 78 79, on right: 36 49 51 52 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 80 82 88 91 95 96 97 101 102
return_stmt (96)
    on left: 80, on right: 14
call (97)
    on left: 81, on right: 13 78
pass_param_list (98)
    on left: 82 83, on right: 81 82
unary_operation (99)
    on left: 84 85, on right: 76 99
array_access (100)
    on left: 86, on right: 52 77
array_decl (101)
    on left: 87 88, on right: 79 86
array_list (102)
    on left: 89 90, on right: 87 89
conditional (103)
    on left: 91, on right: 15 93
if_body (104)
    on left: 92 93 94, on right: 91
loop_stmt (105)
    on left: 95 96 97 98, on right: 17
loop_mut (106)
    on left: 99 100, on right: 96 97
switch_case (107)
    on left: 101 102, on right: 16
sc_blocks (108)
    on left: 103 104, on right: 101 102 103
archetype_claim (109)
    on left: 105 106 107 108, on right: 20
additive_rule (110)
    on left: 109, on right: 105 108
mult_rule (111)
    on left: 110, on right: 106 108
identity_rule (112)
    on left: 111, on right: 105 106 108
negation_rule (113)
    on left: 112, on right: 105 108
inverse_rule (114)
    on left: 113, on right: 107
function (115)
    on left: 114, on right: 2
function_header (116)
    on left: 115, on right: 114
parameter_list (117)
    on left: 116 117, on right: 115 117 125
typ_var (118)
    on left: 118, on right: 35 36 116 117 120 121
struct (119)
    on left: 119, on right: 3
attr_list (120)
    on left: 120 121, on right: 119 120
enum (121)
    on left: 122, on right: 5
variant_list (122)
    on left: 123 124, on right: 122 124
forge (123)
    on left: 125, on right: 4
cart (124)
    on left: 126, on right: 45
typ_list (125)
    on left: 127 128, on right: 126 127
epsilon (126)
    on left: 129, on right: 7 10 83 100 104


state 0

    0 $accept: . P $end

    KW_LET  shift, and go to state 1

    $default  reduce using rule 129 (epsilon)

    P             go to state 2
    declarations  go to state 3
    declaration   go to state 4
    epsilon       go to state 5


state 1

   32 declaration: KW_LET . decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 7
    decl_item  go to state 8
    typ_var    go to state 9


state 2

    0 $accept: P . $end
    2 P: P . function
    3  | P . struct
    4  | P . forge
    5  | P . enum

    $end       shift, and go to state 10
    KW_FN      shift, and go to state 11
    KW_FORGE   shift, and go to state 12
    KW_STRUCT  shift, and go to state 13
    KW_ENUM    shift, and go to state 14

    function         go to state 15
    function_header  go to state 16
    struct           go to state 17
    enum             go to state 18
    forge            go to state 19


state 3

    1 P: declarations .

    $default  reduce using rule 1 (P)


state 4

    6 declarations: declaration . ';' declarations

    ';'  shift, and go to state 20


state 5

    7 declarations: epsilon .

    $default  reduce using rule 7 (declarations)


state 6

  118 typ_var: IDENT . ':' type

    ':'  shift, and go to state 21


state 7

   32 declaration: KW_LET decl_list .

    $default  reduce using rule 32 (declaration)


state 8

   33 decl_list: decl_item .
   34          | decl_item . ',' decl_list

    ','  shift, and go to state 22

    $default  reduce using rule 33 (decl_list)


state 9

   35 decl_item: typ_var .
   36          | typ_var . '=' expression

    '='  shift, and go to state 23

    $default  reduce using rule 35 (decl_item)


state 10

    0 $accept: P $end .

    $default  accept


state 11

  115 function_header: KW_FN . IDENT '(' parameter_list ')' ':' type

    IDENT  shift, and go to state 24


state 12

  125 forge: KW_FORGE . '(' parameter_list ')' KW_TO type body

    '('  shift, and go to state 25


state 13

  119 struct: KW_STRUCT . IDENT '{' attr_list '}'

    IDENT  shift, and go to state 26


state 14

  122 enum: KW_ENUM . IDENT '{' variant_list '}'

    IDENT  shift, and go to state 27


state 15

    2 P: P function .

    $default  reduce using rule 2 (P)


state 16

  114 function: function_header . body

    '{'  shift, and go to state 28

    body  go to state 29


state 17

    3 P: P struct .

    $default  reduce using rule 3 (P)


state 18

    5 P: P enum .

    $default  reduce using rule 5 (P)


state 19

    4 P: P forge .

    $default  reduce using rule 4 (P)


state 20

    6 declarations: declaration ';' . declarations

    KW_LET  shift, and go to state 1

    $default  reduce using rule 129 (epsilon)

    declarations  go to state 30
    declaration   go to state 4
    epsilon       go to state 5


state 21

  118 typ_var: IDENT ':' . type

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 51
    cart             go to state 52


state 22

   34 decl_list: decl_item ',' . decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 53
    decl_item  go to state 8
    typ_var    go to state 9


state 23

   36 decl_item: typ_var '=' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 68
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 24

  115 function_header: KW_FN IDENT . '(' parameter_list ')' ':' type

    '('  shift, and go to state 73


state 25

  125 forge: KW_FORGE '(' . parameter_list ')' KW_TO type body

    IDENT  shift, and go to state 6

    parameter_list  go to state 74
    typ_var         go to state 75


state 26

  119 struct: KW_STRUCT IDENT . '{' attr_list '}'

    '{'  shift, and go to state 76


state 27

  122 enum: KW_ENUM IDENT . '{' variant_list '}'

    '{'  shift, and go to state 77


state 28

    8 body: '{' . statements '}'

    KW_CLAIM     shift, and go to state 78
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 79
    KW_IF        shift, and go to state 80
    KW_WHILE     shift, and go to state 81
    KW_FOR       shift, and go to state 82
    KW_SWITCH    shift, and go to state 83
    KW_BREAK     shift, and go to state 84
    KW_CONTINUE  shift, and go to state 85
    IDENT        shift, and go to state 54
    '*'          shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    statements       go to state 86
    statement        go to state 87
    declaration      go to state 88
    var              go to state 89
    assignment       go to state 90
    return_stmt      go to state 91
    call             go to state 92
    array_access     go to state 93
    conditional      go to state 94
    loop_stmt        go to state 95
    switch_case      go to state 96
    archetype_claim  go to state 97
    epsilon          go to state 98


state 29

  114 function: function_header body .

    $default  reduce using rule 114 (function)


state 30

    6 declarations: declaration ';' declarations .

    $default  reduce using rule 6 (declarations)


state 31

   23 group_data_type: KW_CYCLIC . '<' LIT_INT '>'

    '<'  shift, and go to state 99


state 32

   21 field_data_type: KW_BIG_RATIONAL .

    $default  reduce using rule 21 (field_data_type)


state 33

   22 field_data_type: KW_COMPLEX .

    $default  reduce using rule 22 (field_data_type)


state 34

   24 group_data_type: KW_SYMMETRIC . '<' LIT_INT '>'

    '<'  shift, and go to state 100


state 35

   25 group_data_type: KW_ALTERNATING . '<' LIT_INT '>'

    '<'  shift, and go to state 101


state 36

   26 group_data_type: KW_DIHEDRAL . '<' LIT_INT '>'

    '<'  shift, and go to state 102


state 37

   27 group_data_type: KW_INV_MAT . '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 103


state 38

   28 ring_data_type: KW_BIGINT .

    $default  reduce using rule 28 (ring_data_type)


state 39

   29 ring_data_type: KW_MATRIX . '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 104


state 40

   30 ring_data_type: KW_POLYNOMIAL . '<' type '>'

    '<'  shift, and go to state 105


state 41

   31 space_data_type: KW_VEC . '<' type '>'

    '<'  shift, and go to state 106


state 42

   38 type: KW_BUF . '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 107


state 43

   39 type: IDENT .

    $default  reduce using rule 39 (type)


state 44

   37 type: PRIMITIVE_DTYPE .

    $default  reduce using rule 37 (type)


state 45

   44 type: '&' . type

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 108
    cart             go to state 52


state 46

  126 cart: '(' . typ_list ')'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 109
    cart             go to state 52
    typ_list         go to state 110


state 47

   42 type: field_data_type .

    $default  reduce using rule 42 (type)


state 48

   40 type: group_data_type .

    $default  reduce using rule 40 (type)


state 49

   41 type: ring_data_type .

    $default  reduce using rule 41 (type)


state 50

   43 type: space_data_type .

    $default  reduce using rule 43 (type)


state 51

  118 typ_var: IDENT ':' type .

    $default  reduce using rule 118 (typ_var)


state 52

   45 type: cart .

    $default  reduce using rule 45 (type)


state 53

   34 decl_list: decl_item ',' decl_list .

    $default  reduce using rule 34 (decl_list)


state 54

   46 var: IDENT .
   50    | IDENT . VARIANT IDENT
   81 call: IDENT . '(' pass_param_list ')'

    VARIANT  shift, and go to state 111
    '('      shift, and go to state 112

    $default  reduce using rule 46 (var)


state 55

   55 constant: LIT_INT .

    $default  reduce using rule 55 (constant)


state 56

   54 constant: LIT_FLOAT .

    $default  reduce using rule 54 (constant)


state 57

   56 constant: LIT_STR .

    $default  reduce using rule 56 (constant)


state 58

   53 constant: LIT_CHAR .

    $default  reduce using rule 53 (constant)


state 59

   57 constant: KW_TRUE .

    $default  reduce using rule 57 (constant)


state 60

   58 constant: KW_FALSE .

    $default  reduce using rule 58 (constant)


state 61

   60 expression: '!' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 113
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 62

   48 var: '*' . var
   49    | '*' . '(' expression ')'

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 62
    '('    shift, and go to state 115

    var  go to state 116


state 63

   61 expression: '-' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 117
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 64

   59 expression: '(' . expression ')'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 118
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 65

   87 array_decl: '[' . array_list ']'
   88           | '[' . expression SLICE expression ']'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 119
    expression       go to state 120
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72
    array_list       go to state 121


state 66

   47 var: var . '.' IDENT
   74 expression: var .
   84 unary_operation: var . INCR
   85                | var . DECR
   86 array_access: var . array_decl

    INCR  shift, and go to state 122
    DECR  shift, and go to state 123
    '.'   shift, and go to state 124
    '['   shift, and go to state 65

    $default  reduce using rule 74 (expression)

    array_decl  go to state 125


state 67

   75 expression: constant .

    $default  reduce using rule 75 (expression)


state 68

   36 decl_item: typ_var '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 36 (decl_item)


state 69

   78 expression: call .

    $default  reduce using rule 78 (expression)


state 70

   76 expression: unary_operation .

    $default  reduce using rule 76 (expression)


state 71

   77 expression: array_access .

    $default  reduce using rule 77 (expression)


state 72

   79 expression: array_decl .

    $default  reduce using rule 79 (expression)


state 73

  115 function_header: KW_FN IDENT '(' . parameter_list ')' ':' type

    IDENT  shift, and go to state 6

    parameter_list  go to state 138
    typ_var         go to state 75


state 74

  117 parameter_list: parameter_list . ',' typ_var
  125 forge: KW_FORGE '(' parameter_list . ')' KW_TO type body

    ','  shift, and go to state 139
    ')'  shift, and go to state 140


state 75

  116 parameter_list: typ_var .

    $default  reduce using rule 116 (parameter_list)


state 76

  119 struct: KW_STRUCT IDENT '{' . attr_list '}'

    IDENT  shift, and go to state 6

    typ_var    go to state 141
    attr_list  go to state 142


state 77

  122 enum: KW_ENUM IDENT '{' . variant_list '}'

    IDENT  shift, and go to state 143

    variant_list  go to state 144


state 78

  105 archetype_claim: KW_CLAIM . IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  106                | KW_CLAIM . IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  107                | KW_CLAIM . IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  108                | KW_CLAIM . IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    IDENT  shift, and go to state 145


state 79

   80 return_stmt: KW_RETURN . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 146
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 80

   91 conditional: KW_IF . '(' expression ')' if_body

    '('  shift, and go to state 147


state 81

   95 loop_stmt: KW_WHILE . '(' expression ')' body

    '('  shift, and go to state 148


state 82

   96 loop_stmt: KW_FOR . '(' assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR . '(' declaration ';' expression ';' loop_mut ')' body
   98          | KW_FOR . IDENT KW_IN IDENT body

    IDENT  shift, and go to state 149
    '('    shift, and go to state 150


state 83

  101 switch_case: KW_SWITCH . '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH . '(' expression ')' '{' sc_blocks '}'

    '('  shift, and go to state 151


state 84

   18 statement: KW_BREAK . ';'

    ';'  shift, and go to state 152


state 85

   19 statement: KW_CONTINUE . ';'

    ';'  shift, and go to state 153


state 86

    8 body: '{' statements . '}'

    '}'  shift, and go to state 154


state 87

    9 statements: statement . statements

    KW_CLAIM     shift, and go to state 78
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 79
    KW_IF        shift, and go to state 80
    KW_WHILE     shift, and go to state 81
    KW_FOR       shift, and go to state 82
    KW_SWITCH    shift, and go to state 83
    KW_BREAK     shift, and go to state 84
    KW_CONTINUE  shift, and go to state 85
    IDENT        shift, and go to state 54
    '*'          shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    statements       go to state 155
    statement        go to state 87
    declaration      go to state 88
    var              go to state 89
    assignment       go to state 90
    return_stmt      go to state 91
    call             go to state 92
    array_access     go to state 93
    conditional      go to state 94
    loop_stmt        go to state 95
    switch_case      go to state 96
    archetype_claim  go to state 97
    epsilon          go to state 98


state 88

   11 statement: declaration . ';'

    ';'  shift, and go to state 156


state 89

   47 var: var . '.' IDENT
   51 assignment: var . '=' expression
   86 array_access: var . array_decl

    '.'  shift, and go to state 124
    '='  shift, and go to state 157
    '['  shift, and go to state 65

    array_decl  go to state 125


state 90

   12 statement: assignment . ';'

    ';'  shift, and go to state 158


state 91

   14 statement: return_stmt . ';'

    ';'  shift, and go to state 159


state 92

   13 statement: call . ';'

    ';'  shift, and go to state 160


state 93

   52 assignment: array_access . '=' expression

    '='  shift, and go to state 161


state 94

   15 statement: conditional .

    $default  reduce using rule 15 (statement)


state 95

   17 statement: loop_stmt .

    $default  reduce using rule 17 (statement)


state 96

   16 statement: switch_case .

    $default  reduce using rule 16 (statement)


state 97

   20 statement: archetype_claim .

    $default  reduce using rule 20 (statement)


state 98

   10 statements: epsilon .

    $default  reduce using rule 10 (statements)


state 99

   23 group_data_type: KW_CYCLIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 162


state 100

   24 group_data_type: KW_SYMMETRIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 163


state 101

   25 group_data_type: KW_ALTERNATING '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 164


state 102

   26 group_data_type: KW_DIHEDRAL '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 165


state 103

   27 group_data_type: KW_INV_MAT '<' . LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 166


state 104

   29 ring_data_type: KW_MATRIX '<' . LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 167


state 105

   30 ring_data_type: KW_POLYNOMIAL '<' . type '>'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 168
    cart             go to state 52


state 106

   31 space_data_type: KW_VEC '<' . type '>'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 169
    cart             go to state 52


state 107

   38 type: KW_BUF '<' . PRIMITIVE_DTYPE '>'

    PRIMITIVE_DTYPE  shift, and go to state 170


state 108

   44 type: '&' type .

    $default  reduce using rule 44 (type)


state 109

  128 typ_list: type .

    $default  reduce using rule 128 (typ_list)


state 110

  126 cart: '(' typ_list . ')'
  127 typ_list: typ_list . ',' type

    ','  shift, and go to state 171
    ')'  shift, and go to state 172


state 111

   50 var: IDENT VARIANT . IDENT

    IDENT  shift, and go to state 173


state 112

   81 call: IDENT '(' . pass_param_list ')'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    $default  reduce using rule 129 (epsilon)

    var              go to state 66
    constant         go to state 67
    expression       go to state 174
    call             go to state 69
    pass_param_list  go to state 175
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72
    epsilon          go to state 176


state 113

   60 expression: '!' expression .
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 60 (expression)


state 114

   46 var: IDENT .
   50    | IDENT . VARIANT IDENT

    VARIANT  shift, and go to state 111

    $default  reduce using rule 46 (var)


state 115

   49 var: '*' '(' . expression ')'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 177
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 116

   47 var: var . '.' IDENT
   48    | '*' var .

    '.'  shift, and go to state 124

    $default  reduce using rule 48 (var)


state 117

   61 expression: '-' expression .
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 61 (expression)


state 118

   59 expression: '(' expression . ')'
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 178


state 119

   75 expression: constant .
   89 array_list: constant . ',' array_list
   90           | constant .

    ','  shift, and go to state 179

    ']'       reduce using rule 90 (array_list)
    $default  reduce using rule 75 (expression)


state 120

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   88 array_decl: '[' expression . SLICE expression ']'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    SLICE   shift, and go to state 180
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137


state 121

   87 array_decl: '[' array_list . ']'

    ']'  shift, and go to state 181


state 122

   84 unary_operation: var INCR .

    $default  reduce using rule 84 (unary_operation)


state 123

   85 unary_operation: var DECR .

    $default  reduce using rule 85 (unary_operation)


state 124

   47 var: var '.' . IDENT

    IDENT  shift, and go to state 182


state 125

   86 array_access: var array_decl .

    $default  reduce using rule 86 (array_access)


state 126

   62 expression: expression KW_AS . type

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 183
    cart             go to state 52


state 127

   71 expression: expression rel_op . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 184
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 128

   72 expression: expression AND . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 185
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 129

   73 expression: expression OR . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 186
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 130

   63 expression: expression '@' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 187
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 131

   64 expression: expression '*' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 188
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 132

   65 expression: expression '/' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 189
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 133

   66 expression: expression '%' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 190
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 134

   67 expression: expression '+' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 191
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 135

   68 expression: expression '-' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 192
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 136

   69 expression: expression '>' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 193
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 137

   70 expression: expression '<' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 194
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 138

  115 function_header: KW_FN IDENT '(' parameter_list . ')' ':' type
  117 parameter_list: parameter_list . ',' typ_var

    ','  shift, and go to state 139
    ')'  shift, and go to state 195


state 139

  117 parameter_list: parameter_list ',' . typ_var

    IDENT  shift, and go to state 6

    typ_var  go to state 196


state 140

  125 forge: KW_FORGE '(' parameter_list ')' . KW_TO type body

    KW_TO  shift, and go to state 197


state 141

  121 attr_list: typ_var .

    $default  reduce using rule 121 (attr_list)


state 142

  119 struct: KW_STRUCT IDENT '{' attr_list . '}'
  120 attr_list: attr_list . ',' typ_var

    '}'  shift, and go to state 198
    ','  shift, and go to state 199


state 143

  123 variant_list: IDENT .

    $default  reduce using rule 123 (variant_list)


state 144

  122 enum: KW_ENUM IDENT '{' variant_list . '}'
  124 variant_list: variant_list . ',' IDENT

    '}'  shift, and go to state 200
    ','  shift, and go to state 201


state 145

  105 archetype_claim: KW_CLAIM IDENT . KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  106                | KW_CLAIM IDENT . KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  107                | KW_CLAIM IDENT . KW_IS KW_FIELD '{' inverse_rule '}' ';'
  108                | KW_CLAIM IDENT . KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_IS  shift, and go to state 202


state 146

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   80 return_stmt: KW_RETURN expression .

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 80 (return_stmt)


state 147

   91 conditional: KW_IF '(' . expression ')' if_body

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 203
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 148

   95 loop_stmt: KW_WHILE '(' . expression ')' body

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 204
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 149

   98 loop_stmt: KW_FOR IDENT . KW_IN IDENT body

    KW_IN  shift, and go to state 205


state 150

   96 loop_stmt: KW_FOR '(' . assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR '(' . declaration ';' expression ';' loop_mut ')' body

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 114
    '*'     shift, and go to state 62

    declaration   go to state 206
    var           go to state 89
    assignment    go to state 207
    array_access  go to state 93


state 151

  101 switch_case: KW_SWITCH '(' . expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' . expression ')' '{' sc_blocks '}'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 208
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 152

   18 statement: KW_BREAK ';' .

    $default  reduce using rule 18 (statement)


state 153

   19 statement: KW_CONTINUE ';' .

    $default  reduce using rule 19 (statement)


state 154

    8 body: '{' statements '}' .

    $default  reduce using rule 8 (body)


state 155

    9 statements: statement statements .

    $default  reduce using rule 9 (statements)


state 156

   11 statement: declaration ';' .

    $default  reduce using rule 11 (statement)


state 157

   51 assignment: var '=' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 209
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 158

   12 statement: assignment ';' .

    $default  reduce using rule 12 (statement)


state 159

   14 statement: return_stmt ';' .

    $default  reduce using rule 14 (statement)


state 160

   13 statement: call ';' .

    $default  reduce using rule 13 (statement)


state 161

   52 assignment: array_access '=' . expression

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 210
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 162

   23 group_data_type: KW_CYCLIC '<' LIT_INT . '>'

    '>'  shift, and go to state 211


state 163

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT . '>'

    '>'  shift, and go to state 212


state 164

   25 group_data_type: KW_ALTERNATING '<' LIT_INT . '>'

    '>'  shift, and go to state 213


state 165

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT . '>'

    '>'  shift, and go to state 214


state 166

   27 group_data_type: KW_INV_MAT '<' LIT_INT . ',' type '>'

    ','  shift, and go to state 215


state 167

   29 ring_data_type: KW_MATRIX '<' LIT_INT . ',' type '>'

    ','  shift, and go to state 216


state 168

   30 ring_data_type: KW_POLYNOMIAL '<' type . '>'

    '>'  shift, and go to state 217


state 169

   31 space_data_type: KW_VEC '<' type . '>'

    '>'  shift, and go to state 218


state 170

   38 type: KW_BUF '<' PRIMITIVE_DTYPE . '>'

    '>'  shift, and go to state 219


state 171

  127 typ_list: typ_list ',' . type

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 220
    cart             go to state 52


state 172

  126 cart: '(' typ_list ')' .

    $default  reduce using rule 126 (cart)


state 173

   50 var: IDENT VARIANT IDENT .

    $default  reduce using rule 50 (var)


state 174

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   82 pass_param_list: expression . ',' pass_param_list

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ','     shift, and go to state 221


state 175

   81 call: IDENT '(' pass_param_list . ')'

    ')'  shift, and go to state 222


state 176

   83 pass_param_list: epsilon .

    $default  reduce using rule 83 (pass_param_list)


state 177

   49 var: '*' '(' expression . ')'
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 223


state 178

   59 expression: '(' expression ')' .

    $default  reduce using rule 59 (expression)


state 179

   89 array_list: constant ',' . array_list

    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60

    constant    go to state 224
    array_list  go to state 225


state 180

   88 array_decl: '[' expression SLICE . expression ']'

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 226
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 181

   87 array_decl: '[' array_list ']' .

    $default  reduce using rule 87 (array_decl)


state 182

   47 var: var '.' IDENT .

    $default  reduce using rule 47 (var)


state 183

   62 expression: expression KW_AS type .

    $default  reduce using rule 62 (expression)


state 184

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   71           | expression rel_op expression .
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 71 (expression)


state 185

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   72           | expression AND expression .
   73           | expression . OR expression

    OR  shift, and go to state 129

    $default  reduce using rule 72 (expression)


state 186

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   73           | expression OR expression .

    $default  reduce using rule 73 (expression)


state 187

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   63           | expression '@' expression .
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 63 (expression)


state 188

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   64           | expression '*' expression .
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 64 (expression)


state 189

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   65           | expression '/' expression .
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 65 (expression)


state 190

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   66           | expression '%' expression .
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 66 (expression)


state 191

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   67           | expression '+' expression .
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 67 (expression)


state 192

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   68           | expression '-' expression .
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 68 (expression)


state 193

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   69           | expression '>' expression .
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 69 (expression)


state 194

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   70           | expression '<' expression .
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 70 (expression)


state 195

  115 function_header: KW_FN IDENT '(' parameter_list ')' . ':' type

    ':'  shift, and go to state 227


state 196

  117 parameter_list: parameter_list ',' typ_var .

    $default  reduce using rule 117 (parameter_list)


state 197

  125 forge: KW_FORGE '(' parameter_list ')' KW_TO . type body

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 228
    cart             go to state 52


state 198

  119 struct: KW_STRUCT IDENT '{' attr_list '}' .

    $default  reduce using rule 119 (struct)


state 199

  120 attr_list: attr_list ',' . typ_var

    IDENT  shift, and go to state 6

    typ_var  go to state 229


state 200

  122 enum: KW_ENUM IDENT '{' variant_list '}' .

    $default  reduce using rule 122 (enum)


state 201

  124 variant_list: variant_list ',' . IDENT

    IDENT  shift, and go to state 230


state 202

  105 archetype_claim: KW_CLAIM IDENT KW_IS . KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  106                | KW_CLAIM IDENT KW_IS . KW_RING '{' mult_rule identity_rule '}' ';'
  107                | KW_CLAIM IDENT KW_IS . KW_FIELD '{' inverse_rule '}' ';'
  108                | KW_CLAIM IDENT KW_IS . KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_GROUP  shift, and go to state 231
    KW_RING   shift, and go to state 232
    KW_FIELD  shift, and go to state 233
    KW_SPACE  shift, and go to state 234


state 203

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   91 conditional: KW_IF '(' expression . ')' if_body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 235


state 204

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   95 loop_stmt: KW_WHILE '(' expression . ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 236


state 205

   98 loop_stmt: KW_FOR IDENT KW_IN . IDENT body

    IDENT  shift, and go to state 237


state 206

   97 loop_stmt: KW_FOR '(' declaration . ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 238


state 207

   96 loop_stmt: KW_FOR '(' assignment . ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 239


state 208

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
  101 switch_case: KW_SWITCH '(' expression . ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression . ')' '{' sc_blocks '}'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 240


state 209

   51 assignment: var '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 51 (assignment)


state 210

   52 assignment: array_access '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 52 (assignment)


state 211

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>' .

    $default  reduce using rule 23 (group_data_type)


state 212

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' .

    $default  reduce using rule 24 (group_data_type)


state 213

   25 group_data_type: KW_ALTERNATING '<' LIT_INT '>' .

    $default  reduce using rule 25 (group_data_type)


state 214

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' .

    $default  reduce using rule 26 (group_data_type)


state 215

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' . type '>'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 241
    cart             go to state 52


state 216

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' . type '>'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 242
    cart             go to state 52


state 217

   30 ring_data_type: KW_POLYNOMIAL '<' type '>' .

    $default  reduce using rule 30 (ring_data_type)


state 218

   31 space_data_type: KW_VEC '<' type '>' .

    $default  reduce using rule 31 (space_data_type)


state 219

   38 type: KW_BUF '<' PRIMITIVE_DTYPE '>' .

    $default  reduce using rule 38 (type)


state 220

  127 typ_list: typ_list ',' type .

    $default  reduce using rule 127 (typ_list)


state 221

   82 pass_param_list: expression ',' . pass_param_list

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    $default  reduce using rule 129 (epsilon)

    var              go to state 66
    constant         go to state 67
    expression       go to state 174
    call             go to state 69
    pass_param_list  go to state 243
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72
    epsilon          go to state 176


state 222

   81 call: IDENT '(' pass_param_list ')' .

    $default  reduce using rule 81 (call)


state 223

   49 var: '*' '(' expression ')' .

    $default  reduce using rule 49 (var)


state 224

   89 array_list: constant . ',' array_list
   90           | constant .

    ','  shift, and go to state 179

    $default  reduce using rule 90 (array_list)


state 225

   89 array_list: constant ',' array_list .

    $default  reduce using rule 89 (array_list)


state 226

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   88 array_decl: '[' expression SLICE expression . ']'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ']'     shift, and go to state 244


state 227

  115 function_header: KW_FN IDENT '(' parameter_list ')' ':' . type

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 245
    cart             go to state 52


state 228

  125 forge: KW_FORGE '(' parameter_list ')' KW_TO type . body

    '{'  shift, and go to state 28

    body  go to state 246


state 229

  120 attr_list: attr_list ',' typ_var .

    $default  reduce using rule 120 (attr_list)


state 230

  124 variant_list: variant_list ',' IDENT .

    $default  reduce using rule 124 (variant_list)


state 231

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP . '{' additive_rule identity_rule negation_rule '}' ';'

    '{'  shift, and go to state 247


state 232

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING . '{' mult_rule identity_rule '}' ';'

    '{'  shift, and go to state 248


state 233

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD . '{' inverse_rule '}' ';'

    '{'  shift, and go to state 249


state 234

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE . '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '{'  shift, and go to state 250


state 235

   91 conditional: KW_IF '(' expression ')' . if_body

    '{'  shift, and go to state 28

    body     go to state 251
    if_body  go to state 252


state 236

   95 loop_stmt: KW_WHILE '(' expression ')' . body

    '{'  shift, and go to state 28

    body  go to state 253


state 237

   98 loop_stmt: KW_FOR IDENT KW_IN IDENT . body

    '{'  shift, and go to state 28

    body  go to state 254


state 238

   97 loop_stmt: KW_FOR '(' declaration ';' . expression ';' loop_mut ')' body

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 255
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 239

   96 loop_stmt: KW_FOR '(' assignment ';' . expression ';' loop_mut ')' body

    IDENT      shift, and go to state 54
    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60
    '!'        shift, and go to state 61
    '*'        shift, and go to state 62
    '-'        shift, and go to state 63
    '('        shift, and go to state 64
    '['        shift, and go to state 65

    var              go to state 66
    constant         go to state 67
    expression       go to state 256
    call             go to state 69
    unary_operation  go to state 70
    array_access     go to state 71
    array_decl       go to state 72


state 240

  101 switch_case: KW_SWITCH '(' expression ')' . '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' . '{' sc_blocks '}'

    '{'  shift, and go to state 257


state 241

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' type . '>'

    '>'  shift, and go to state 258


state 242

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' type . '>'

    '>'  shift, and go to state 259


state 243

   82 pass_param_list: expression ',' pass_param_list .

    $default  reduce using rule 82 (pass_param_list)


state 244

   88 array_decl: '[' expression SLICE expression ']' .

    $default  reduce using rule 88 (array_decl)


state 245

  115 function_header: KW_FN IDENT '(' parameter_list ')' ':' type .

    $default  reduce using rule 115 (function_header)


state 246

  125 forge: KW_FORGE '(' parameter_list ')' KW_TO type body .

    $default  reduce using rule 125 (forge)


state 247

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' . additive_rule identity_rule negation_rule '}' ';'

    '('  shift, and go to state 260

    additive_rule  go to state 261


state 248

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' . mult_rule identity_rule '}' ';'

    '('  shift, and go to state 262

    mult_rule  go to state 263


state 249

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' . inverse_rule '}' ';'

    '('  shift, and go to state 264

    inverse_rule  go to state 265


state 250

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' . KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_FIELD  shift, and go to state 266


state 251

   92 if_body: body .
   93        | body . KW_ELSE conditional
   94        | body . KW_ELSE body

    KW_ELSE  shift, and go to state 267

    $default  reduce using rule 92 (if_body)


state 252

   91 conditional: KW_IF '(' expression ')' if_body .

    $default  reduce using rule 91 (conditional)


state 253

   95 loop_stmt: KW_WHILE '(' expression ')' body .

    $default  reduce using rule 95 (loop_stmt)


state 254

   98 loop_stmt: KW_FOR IDENT KW_IN IDENT body .

    $default  reduce using rule 98 (loop_stmt)


state 255

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   97 loop_stmt: KW_FOR '(' declaration ';' expression . ';' loop_mut ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ';'     shift, and go to state 268


state 256

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   96 loop_stmt: KW_FOR '(' assignment ';' expression . ';' loop_mut ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ';'     shift, and go to state 269


state 257

  101 switch_case: KW_SWITCH '(' expression ')' '{' . sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' . sc_blocks '}'

    KW_CASE  shift, and go to state 270

    $default  reduce using rule 129 (epsilon)

    sc_blocks  go to state 271
    epsilon    go to state 272


state 258

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' type '>' .

    $default  reduce using rule 27 (group_data_type)


state 259

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' type '>' .

    $default  reduce using rule 29 (ring_data_type)


state 260

  109 additive_rule: '(' . IDENT '=' IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 273


state 261

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule . identity_rule negation_rule '}' ';'

    '('  shift, and go to state 274

    identity_rule  go to state 275


state 262

  110 mult_rule: '(' . IDENT '=' IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 276


state 263

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule . identity_rule '}' ';'

    '('  shift, and go to state 274

    identity_rule  go to state 277


state 264

  113 inverse_rule: '(' . IDENT '=' '~' IDENT ')' ARROW body

    IDENT  shift, and go to state 278


state 265

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule . '}' ';'

    '}'  shift, and go to state 279


state 266

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD . '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '='  shift, and go to state 280


state 267

   93 if_body: body KW_ELSE . conditional
   94        | body KW_ELSE . body

    KW_IF  shift, and go to state 80
    '{'    shift, and go to state 28

    body         go to state 281
    conditional  go to state 282


state 268

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' . loop_mut ')' body

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    var              go to state 283
    unary_operation  go to state 284
    loop_mut         go to state 285
    epsilon          go to state 286


state 269

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' . loop_mut ')' body

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    var              go to state 283
    unary_operation  go to state 284
    loop_mut         go to state 287
    epsilon          go to state 286


state 270

  103 sc_blocks: KW_CASE . constant ':' statements sc_blocks

    LIT_INT    shift, and go to state 55
    LIT_FLOAT  shift, and go to state 56
    LIT_STR    shift, and go to state 57
    LIT_CHAR   shift, and go to state 58
    KW_TRUE    shift, and go to state 59
    KW_FALSE   shift, and go to state 60

    constant  go to state 288


state 271

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks . KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' sc_blocks . '}'

    KW_DEFAULT  shift, and go to state 289
    '}'         shift, and go to state 290


state 272

  104 sc_blocks: epsilon .

    $default  reduce using rule 104 (sc_blocks)


state 273

  109 additive_rule: '(' IDENT . '=' IDENT '+' IDENT ')' ARROW body

    '='  shift, and go to state 291


state 274

  111 identity_rule: '(' . IDENT '=' LIT_INT ')' ARROW body

    IDENT  shift, and go to state 292


state 275

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule . negation_rule '}' ';'

    '('  shift, and go to state 293

    negation_rule  go to state 294


state 276

  110 mult_rule: '(' IDENT . '=' IDENT '*' IDENT ')' ARROW body

    '='  shift, and go to state 295


state 277

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule . '}' ';'

    '}'  shift, and go to state 296


state 278

  113 inverse_rule: '(' IDENT . '=' '~' IDENT ')' ARROW body

    '='  shift, and go to state 297


state 279

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' . ';'

    ';'  shift, and go to state 298


state 280

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' . '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 299


state 281

   94 if_body: body KW_ELSE body .

    $default  reduce using rule 94 (if_body)


state 282

   93 if_body: body KW_ELSE conditional .

    $default  reduce using rule 93 (if_body)


state 283

   47 var: var . '.' IDENT
   84 unary_operation: var . INCR
   85                | var . DECR

    INCR  shift, and go to state 122
    DECR  shift, and go to state 123
    '.'   shift, and go to state 124


state 284

   99 loop_mut: unary_operation .

    $default  reduce using rule 99 (loop_mut)


state 285

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut . ')' body

    ')'  shift, and go to state 300


state 286

  100 loop_mut: epsilon .

    $default  reduce using rule 100 (loop_mut)


state 287

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut . ')' body

    ')'  shift, and go to state 301


state 288

  103 sc_blocks: KW_CASE constant . ':' statements sc_blocks

    ':'  shift, and go to state 302


state 289

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT . ':' statements '}'

    ':'  shift, and go to state 303


state 290

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks '}' .

    $default  reduce using rule 102 (switch_case)


state 291

  109 additive_rule: '(' IDENT '=' . IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 304


state 292

  111 identity_rule: '(' IDENT . '=' LIT_INT ')' ARROW body

    '='  shift, and go to state 305


state 293

  112 negation_rule: '(' . IDENT '=' '-' IDENT ')' ARROW body

    IDENT  shift, and go to state 306


state 294

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule . '}' ';'

    '}'  shift, and go to state 307


state 295

  110 mult_rule: '(' IDENT '=' . IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 308


state 296

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' . ';'

    ';'  shift, and go to state 309


state 297

  113 inverse_rule: '(' IDENT '=' . '~' IDENT ')' ARROW body

    '~'  shift, and go to state 310


state 298

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';' .

    $default  reduce using rule 107 (archetype_claim)


state 299

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' . type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_CYCLIC        shift, and go to state 31
    KW_BIG_RATIONAL  shift, and go to state 32
    KW_COMPLEX       shift, and go to state 33
    KW_SYMMETRIC     shift, and go to state 34
    KW_ALTERNATING   shift, and go to state 35
    KW_DIHEDRAL      shift, and go to state 36
    KW_INV_MAT       shift, and go to state 37
    KW_BIGINT        shift, and go to state 38
    KW_MATRIX        shift, and go to state 39
    KW_POLYNOMIAL    shift, and go to state 40
    KW_VEC           shift, and go to state 41
    KW_BUF           shift, and go to state 42
    IDENT            shift, and go to state 43
    PRIMITIVE_DTYPE  shift, and go to state 44
    '&'              shift, and go to state 45
    '('              shift, and go to state 46

    field_data_type  go to state 47
    group_data_type  go to state 48
    ring_data_type   go to state 49
    space_data_type  go to state 50
    type             go to state 311
    cart             go to state 52


state 300

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' . body

    '{'  shift, and go to state 28

    body  go to state 312


state 301

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' . body

    '{'  shift, and go to state 28

    body  go to state 313


state 302

  103 sc_blocks: KW_CASE constant ':' . statements sc_blocks

    KW_CLAIM     shift, and go to state 78
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 79
    KW_IF        shift, and go to state 80
    KW_WHILE     shift, and go to state 81
    KW_FOR       shift, and go to state 82
    KW_SWITCH    shift, and go to state 83
    KW_BREAK     shift, and go to state 84
    KW_CONTINUE  shift, and go to state 85
    IDENT        shift, and go to state 54
    '*'          shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    statements       go to state 314
    statement        go to state 87
    declaration      go to state 88
    var              go to state 89
    assignment       go to state 90
    return_stmt      go to state 91
    call             go to state 92
    array_access     go to state 93
    conditional      go to state 94
    loop_stmt        go to state 95
    switch_case      go to state 96
    archetype_claim  go to state 97
    epsilon          go to state 98


state 303

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' . statements '}'

    KW_CLAIM     shift, and go to state 78
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 79
    KW_IF        shift, and go to state 80
    KW_WHILE     shift, and go to state 81
    KW_FOR       shift, and go to state 82
    KW_SWITCH    shift, and go to state 83
    KW_BREAK     shift, and go to state 84
    KW_CONTINUE  shift, and go to state 85
    IDENT        shift, and go to state 54
    '*'          shift, and go to state 62

    $default  reduce using rule 129 (epsilon)

    statements       go to state 315
    statement        go to state 87
    declaration      go to state 88
    var              go to state 89
    assignment       go to state 90
    return_stmt      go to state 91
    call             go to state 92
    array_access     go to state 93
    conditional      go to state 94
    loop_stmt        go to state 95
    switch_case      go to state 96
    archetype_claim  go to state 97
    epsilon          go to state 98


state 304

  109 additive_rule: '(' IDENT '=' IDENT . '+' IDENT ')' ARROW body

    '+'  shift, and go to state 316


state 305

  111 identity_rule: '(' IDENT '=' . LIT_INT ')' ARROW body

    LIT_INT  shift, and go to state 317


state 306

  112 negation_rule: '(' IDENT . '=' '-' IDENT ')' ARROW body

    '='  shift, and go to state 318


state 307

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' . ';'

    ';'  shift, and go to state 319


state 308

  110 mult_rule: '(' IDENT '=' IDENT . '*' IDENT ')' ARROW body

    '*'  shift, and go to state 320


state 309

  106 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';' .

    $default  reduce using rule 106 (archetype_claim)


state 310

  113 inverse_rule: '(' IDENT '=' '~' . IDENT ')' ARROW body

    IDENT  shift, and go to state 321


state 311

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type . ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ')'  shift, and go to state 322


state 312

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' body .

    $default  reduce using rule 97 (loop_stmt)


state 313

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' body .

    $default  reduce using rule 96 (loop_stmt)


state 314

  103 sc_blocks: KW_CASE constant ':' statements . sc_blocks

    KW_CASE  shift, and go to state 270

    $default  reduce using rule 129 (epsilon)

    sc_blocks  go to state 323
    epsilon    go to state 272


state 315

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements . '}'

    '}'  shift, and go to state 324


state 316

  109 additive_rule: '(' IDENT '=' IDENT '+' . IDENT ')' ARROW body

    IDENT  shift, and go to state 325


state 317

  111 identity_rule: '(' IDENT '=' LIT_INT . ')' ARROW body

    ')'  shift, and go to state 326


state 318

  112 negation_rule: '(' IDENT '=' . '-' IDENT ')' ARROW body

    '-'  shift, and go to state 327


state 319

  105 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';' .

    $default  reduce using rule 105 (archetype_claim)


state 320

  110 mult_rule: '(' IDENT '=' IDENT '*' . IDENT ')' ARROW body

    IDENT  shift, and go to state 328


state 321

  113 inverse_rule: '(' IDENT '=' '~' IDENT . ')' ARROW body

    ')'  shift, and go to state 329


state 322

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' . ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ';'  shift, and go to state 330


state 323

  103 sc_blocks: KW_CASE constant ':' statements sc_blocks .

    $default  reduce using rule 103 (sc_blocks)


state 324

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}' .

    $default  reduce using rule 101 (switch_case)


state 325

  109 additive_rule: '(' IDENT '=' IDENT '+' IDENT . ')' ARROW body

    ')'  shift, and go to state 331


state 326

  111 identity_rule: '(' IDENT '=' LIT_INT ')' . ARROW body

    ARROW  shift, and go to state 332


state 327

  112 negation_rule: '(' IDENT '=' '-' . IDENT ')' ARROW body

    IDENT  shift, and go to state 333


state 328

  110 mult_rule: '(' IDENT '=' IDENT '*' IDENT . ')' ARROW body

    ')'  shift, and go to state 334


state 329

  113 inverse_rule: '(' IDENT '=' '~' IDENT ')' . ARROW body

    ARROW  shift, and go to state 335


state 330

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' . additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 260

    additive_rule  go to state 336


state 331

  109 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' . ARROW body

    ARROW  shift, and go to state 337


state 332

  111 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW . body

    '{'  shift, and go to state 28

    body  go to state 338


state 333

  112 negation_rule: '(' IDENT '=' '-' IDENT . ')' ARROW body

    ')'  shift, and go to state 339


state 334

  110 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' . ARROW body

    ARROW  shift, and go to state 340


state 335

  113 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW . body

    '{'  shift, and go to state 28

    body  go to state 341


state 336

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule . negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 293

    negation_rule  go to state 342


state 337

  109 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW . body

    '{'  shift, and go to state 28

    body  go to state 343


state 338

  111 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body .

    $default  reduce using rule 111 (identity_rule)


state 339

  112 negation_rule: '(' IDENT '=' '-' IDENT ')' . ARROW body

    ARROW  shift, and go to state 344


state 340

  110 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW . body

    '{'  shift, and go to state 28

    body  go to state 345


state 341

  113 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body .

    $default  reduce using rule 113 (inverse_rule)


state 342

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule . identity_rule mult_rule '}' ';'

    '('  shift, and go to state 274

    identity_rule  go to state 346


state 343

  109 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body .

    $default  reduce using rule 109 (additive_rule)


state 344

  112 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW . body

    '{'  shift, and go to state 28

    body  go to state 347


state 345

  110 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body .

    $default  reduce using rule 110 (mult_rule)


state 346

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule . mult_rule '}' ';'

    '('  shift, and go to state 262

    mult_rule  go to state 348


state 347

  112 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body .

    $default  reduce using rule 112 (negation_rule)


state 348

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule . '}' ';'

    '}'  shift, and go to state 349


state 349

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' . ';'

    ';'  shift, and go to state 350


state 350

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';' .

    $default  reduce using rule 108 (archetype_claim)
