Terminals which are not used

   KW_FN
   KW_MORPH
   KW_FORGE
   KW_STRUCT
   KW_ENUM
   GROUP
   RING
   FIELD
   SPACE
   VARIANT


Grammar

    0 $accept: statements $end

    1 statements: statement statements
    2           | epsilon

    3 statement: declaration ';'
    4          | assignment ';'
    5          | call_stmt_standalone
    6          | return_stmt ';'
    7          | if_else_conditional
    8          | switch_case
    9          | loop_stmt
   10          | KW_PRINT '(' pass_param_list ')' ';'
   11          | KW_BREAK ';'
   12          | KW_CONTINUE ';'
   13          | archetype_claim

   14 body: '{' statements '}'

   15 var: IDENT
   16    | IDENT '.' IDENT

   17 field_data_type: /* empty */
   18                | KW_BIG_RATIONAL
   19                | KW_COMPLEX

   20 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   21                | KW_SYMMETRIC '<' LIT_INT '>'
   22                | KW_ALTERNATING '<' LIT_INT '>'
   23                | KW_DIHEDRAL '<' LIT_INT '>'
   24                | KW_INV_MAT '<' LIT_INT ',' IDENT '>'

   25 ring_data_type: KW_BIGINT
   26               | KW_MATRIX '<' LIT_INT ',' IDENT '>'
   27               | KW_POLYNOMIAL '<' IDENT '>'

   28 space_data_type: KW_VEC '<' IDENT '>'
   29                | KW_VEC '<' PRIMITIVE_DTYPE '>'

   30 declaration: KW_LET decl_tail

   31 decl_tail: var ':' decl_type decl_cntd

   32 decl_type: PRIMITIVE_DTYPE
   33          | KW_BUF '<' PRIMITIVE_DTYPE '>'
   34          | IDENT
   35          | group_data_type
   36          | ring_data_type
   37          | field_data_type
   38          | space_data_type

   39 decl_cntd: '=' expression
   40          | ',' decl_tail
   41          | epsilon

   42 assignment: var '=' expression
   43           | array_access '=' expression

   44 constant: LIT_CHAR
   45         | LIT_FLOAT
   46         | LIT_INT
   47         | LIT_STR

   48 expression: expression '+' expression
   49           | expression '-' expression
   50           | expression '*' expression
   51           | expression '/' expression
   52           | expression '%' expression
   53           | '(' expression ')'
   54           | expression log_op expression
   55           | '!' expression
   56           | expression rel_op expression
   57           | expression '>' expression
   58           | expression '<' expression
   59           | var
   60           | constant
   61           | unary_operation
   62           | array_access
   63           | call_stmt
   64           | KW_TRUE
   65           | KW_FALSE
   66           | expression '@' expression
   67           | array_decl

   68 return_stmt: KW_RETURN expression

   69 call_stmt_standalone: var '(' pass_param_list ')' ';'
   70                     | var '(' ')' ';'

   71 call_stmt: var '(' pass_param_list ')'
   72          | var '(' ')'

   73 pass_param_list: expression ',' pass_param_list
   74                | expression

   75 unary_operation: var INCR
   76                | var DECR

   77 array_access: var C

   78 C: '[' LIT_INT ']' C
   79  | '[' LIT_INT ']'

   80 array_decl: '[' array_list ']'

   81 array_list: constant ',' array_list
   82           | constant

   83 if_else_conditional: KW_IF '(' expression ')' if_body

   84 if_body: body
   85        | body KW_ELSE if_else_conditional
   86        | body KW_ELSE body

   87 loop_stmt: KW_WHILE '(' expression ')' body
   88          | KW_FOR '(' assignment ';' expression ';' V ')' body
   89          | KW_FOR '(' declaration ';' expression ';' V ')' body
   90          | KW_FOR IDENT KW_IN IDENT body

   91 V: unary_operation
   92  | epsilon

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' expression ')' '{' switch_case_blocks '}'

   95 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks
   96                   | KW_CASE LIT_INT ':' statements switch_case_blocks
   97                   | KW_CASE LIT_FLOAT ':' statements switch_case_blocks
   98                   | epsilon

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  100                | KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  101                | KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  102                | KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

  103 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body

  105 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body

  106 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' ARROW body

  107 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body

  108 epsilon: /* empty */


Terminals, with rules where they appear

$end (0) 0
'!' (33) 55
'%' (37) 52
'(' (40) 10 53 69 70 71 72 83 87 88 89 93 94 102 103 104 105 106 107
')' (41) 10 53 69 70 71 72 83 87 88 89 93 94 102 103 104 105 106 107
'*' (42) 50 104
'+' (43) 48 103
',' (44) 24 26 40 73 81
'-' (45) 49 106
'.' (46) 16
'/' (47) 51
':' (58) 31 93 95 96 97
';' (59) 3 4 6 10 11 12 69 70 88 89 99 100 101 102
'<' (60) 20 21 22 23 24 26 27 28 29 33 58
'=' (61) 39 42 43 102 103 104 105 106 107
'>' (62) 20 21 22 23 24 26 27 28 29 33 57
'@' (64) 66
'[' (91) 78 79 80
']' (93) 78 79 80
'{' (123) 14 93 94 99 100 101 102
'}' (125) 14 93 94 99 100 101 102
'~' (126) 107
error (256)
KW_CLAIM (258) 99 100 101 102
KW_IS (259) 99 100 101 102
KW_GROUP (260) 99
KW_RING (261) 100
KW_FIELD (262) 101 102
KW_SPACE (263) 102
KW_PRINT (264) 10
KW_LET (265) 30
KW_RETURN (266) 68
KW_IF (267) 83
KW_ELSE (268) 85 86
KW_WHILE (269) 87
KW_FOR (270) 88 89 90
KW_IN (271) 90
KW_SWITCH (272) 93 94
KW_CASE (273) 95 96 97
KW_DEFAULT (274) 93
KW_BREAK (275) 11
KW_CONTINUE (276) 12
KW_FN (277)
KW_MORPH (278)
KW_FORGE (279)
KW_STRUCT (280)
KW_ENUM (281)
KW_CYCLIC (282) 20
KW_BIG_RATIONAL (283) 18
KW_COMPLEX (284) 19
KW_SYMMETRIC (285) 21
KW_ALTERNATING (286) 22
KW_DIHEDRAL (287) 23
KW_INV_MAT (288) 24
KW_BIGINT (289) 25
KW_MATRIX (290) 26
KW_POLYNOMIAL (291) 27
KW_VEC (292) 28 29
KW_BUF (293) 33
IDENT (294) 15 16 24 26 27 28 34 90 99 100 101 102 103 104 105 106
    107
PRIMITIVE_DTYPE (295) 29 32 33
LIT_INT (296) 20 21 22 23 24 26 46 78 79 96 105
LIT_FLOAT (297) 45 97
LIT_STR (298) 47
LIT_CHAR (299) 44 95
log_op (300) 54
rel_op (301) 56
KW_TRUE (302) 64
KW_FALSE (303) 65
GROUP (304)
RING (305)
FIELD (306)
SPACE (307)
INCR (308) 75
DECR (309) 76
ARROW (310) 103 104 105 106 107
VARIANT (311)


Nonterminals, with rules where they appear

$accept (78)
    on left: 0
statements (79)
    on left: 1 2, on right: 0 1 14 93 95 96 97
statement (80)
    on left: 3 4 5 6 7 8 9 10 11 12 13, on right: 1
body (81)
    on left: 14, on right: 84 85 86 87 88 89 90 103 104 105 106 107
var (82)
    on left: 15 16, on right: 31 42 59 69 70 71 72 75 76 77
field_data_type (83)
    on left: 17 18 19, on right: 37
group_data_type (84)
    on left: 20 21 22 23 24, on right: 35
ring_data_type (85)
    on left: 25 26 27, on right: 36
space_data_type (86)
    on left: 28 29, on right: 38
declaration (87)
    on left: 30, on right: 3 89
decl_tail (88)
    on left: 31, on right: 30 40
decl_type (89)
    on left: 32 33 34 35 36 37 38, on right: 31
decl_cntd (90)
    on left: 39 40 41, on right: 31
assignment (91)
    on left: 42 43, on right: 4 88
constant (92)
    on left: 44 45 46 47, on right: 60 81 82
expression (93)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65
    66 67, on right: 39 42 43 48 49 50 51 52 53 54 55 56 57 58 66 68
    73 74 83 87 88 89 93 94
return_stmt (94)
    on left: 68, on right: 6
call_stmt_standalone (95)
    on left: 69 70, on right: 5
call_stmt (96)
    on left: 71 72, on right: 63
pass_param_list (97)
    on left: 73 74, on right: 10 69 71 73
unary_operation (98)
    on left: 75 76, on right: 61 91
array_access (99)
    on left: 77, on right: 43 62
C (100)
    on left: 78 79, on right: 77 78
array_decl (101)
    on left: 80, on right: 67
array_list (102)
    on left: 81 82, on right: 80 81
if_else_conditional (103)
    on left: 83, on right: 7 85
if_body (104)
    on left: 84 85 86, on right: 83
loop_stmt (105)
    on left: 87 88 89 90, on right: 9
V (106)
    on left: 91 92, on right: 88 89
switch_case (107)
    on left: 93 94, on right: 8
switch_case_blocks (108)
    on left: 95 96 97 98, on right: 93 94 95 96 97
archetype_claim (109)
    on left: 99 100 101 102, on right: 13
group_closure_rule (110)
    on left: 103, on right: 99 102
ring_closure_rule (111)
    on left: 104, on right: 100 102
identity_rule (112)
    on left: 105, on right: 99 100 102
group_inverse_rule (113)
    on left: 106, on right: 99 102
field_inverse_rule (114)
    on left: 107, on right: 101
epsilon (115)
    on left: 108, on right: 2 41 92 98


state 0

    0 $accept: . statements $end

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 12
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 1

   99 archetype_claim: KW_CLAIM . IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  100                | KW_CLAIM . IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  101                | KW_CLAIM . IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  102                | KW_CLAIM . IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    IDENT  shift, and go to state 25


state 2

   10 statement: KW_PRINT . '(' pass_param_list ')' ';'

    '('  shift, and go to state 26


state 3

   30 declaration: KW_LET . decl_tail

    IDENT  shift, and go to state 11

    var        go to state 27
    decl_tail  go to state 28


state 4

   68 return_stmt: KW_RETURN . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 40
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 5

   83 if_else_conditional: KW_IF . '(' expression ')' if_body

    '('  shift, and go to state 45


state 6

   87 loop_stmt: KW_WHILE . '(' expression ')' body

    '('  shift, and go to state 46


state 7

   88 loop_stmt: KW_FOR . '(' assignment ';' expression ';' V ')' body
   89          | KW_FOR . '(' declaration ';' expression ';' V ')' body
   90          | KW_FOR . IDENT KW_IN IDENT body

    IDENT  shift, and go to state 47
    '('    shift, and go to state 48


state 8

   93 switch_case: KW_SWITCH . '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH . '(' expression ')' '{' switch_case_blocks '}'

    '('  shift, and go to state 49


state 9

   11 statement: KW_BREAK . ';'

    ';'  shift, and go to state 50


state 10

   12 statement: KW_CONTINUE . ';'

    ';'  shift, and go to state 51


state 11

   15 var: IDENT .
   16    | IDENT . '.' IDENT

    '.'  shift, and go to state 52

    $default  reduce using rule 15 (var)


state 12

    0 $accept: statements . $end

    $end  shift, and go to state 53


state 13

    1 statements: statement . statements

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 54
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 14

   42 assignment: var . '=' expression
   69 call_stmt_standalone: var . '(' pass_param_list ')' ';'
   70                     | var . '(' ')' ';'
   77 array_access: var . C

    '('  shift, and go to state 55
    '='  shift, and go to state 56
    '['  shift, and go to state 57

    C  go to state 58


state 15

    3 statement: declaration . ';'

    ';'  shift, and go to state 59


state 16

    4 statement: assignment . ';'

    ';'  shift, and go to state 60


state 17

    6 statement: return_stmt . ';'

    ';'  shift, and go to state 61


state 18

    5 statement: call_stmt_standalone .

    $default  reduce using rule 5 (statement)


state 19

   43 assignment: array_access . '=' expression

    '='  shift, and go to state 62


state 20

    7 statement: if_else_conditional .

    $default  reduce using rule 7 (statement)


state 21

    9 statement: loop_stmt .

    $default  reduce using rule 9 (statement)


state 22

    8 statement: switch_case .

    $default  reduce using rule 8 (statement)


state 23

   13 statement: archetype_claim .

    $default  reduce using rule 13 (statement)


state 24

    2 statements: epsilon .

    $default  reduce using rule 2 (statements)


state 25

   99 archetype_claim: KW_CLAIM IDENT . KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  100                | KW_CLAIM IDENT . KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';'
  101                | KW_CLAIM IDENT . KW_IS KW_FIELD '{' field_inverse_rule '}' ';'
  102                | KW_CLAIM IDENT . KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_IS  shift, and go to state 63


state 26

   10 statement: KW_PRINT '(' . pass_param_list ')' ';'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 64
    call_stmt        go to state 41
    pass_param_list  go to state 65
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 27

   31 decl_tail: var . ':' decl_type decl_cntd

    ':'  shift, and go to state 66


state 28

   30 declaration: KW_LET decl_tail .

    $default  reduce using rule 30 (declaration)


state 29

   46 constant: LIT_INT .

    $default  reduce using rule 46 (constant)


state 30

   45 constant: LIT_FLOAT .

    $default  reduce using rule 45 (constant)


state 31

   47 constant: LIT_STR .

    $default  reduce using rule 47 (constant)


state 32

   44 constant: LIT_CHAR .

    $default  reduce using rule 44 (constant)


state 33

   64 expression: KW_TRUE .

    $default  reduce using rule 64 (expression)


state 34

   65 expression: KW_FALSE .

    $default  reduce using rule 65 (expression)


state 35

   55 expression: '!' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 67
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 36

   53 expression: '(' . expression ')'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 68
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 37

   80 array_decl: '[' . array_list ']'

    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32

    constant    go to state 69
    array_list  go to state 70


state 38

   59 expression: var .
   71 call_stmt: var . '(' pass_param_list ')'
   72          | var . '(' ')'
   75 unary_operation: var . INCR
   76                | var . DECR
   77 array_access: var . C

    INCR  shift, and go to state 71
    DECR  shift, and go to state 72
    '('   shift, and go to state 73
    '['   shift, and go to state 57

    $default  reduce using rule 59 (expression)

    C  go to state 58


state 39

   60 expression: constant .

    $default  reduce using rule 60 (expression)


state 40

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   68 return_stmt: KW_RETURN expression .

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83

    $default  reduce using rule 68 (return_stmt)


state 41

   63 expression: call_stmt .

    $default  reduce using rule 63 (expression)


state 42

   61 expression: unary_operation .

    $default  reduce using rule 61 (expression)


state 43

   62 expression: array_access .

    $default  reduce using rule 62 (expression)


state 44

   67 expression: array_decl .

    $default  reduce using rule 67 (expression)


state 45

   83 if_else_conditional: KW_IF '(' . expression ')' if_body

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 84
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 46

   87 loop_stmt: KW_WHILE '(' . expression ')' body

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 85
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 47

   90 loop_stmt: KW_FOR IDENT . KW_IN IDENT body

    KW_IN  shift, and go to state 86


state 48

   88 loop_stmt: KW_FOR '(' . assignment ';' expression ';' V ')' body
   89          | KW_FOR '(' . declaration ';' expression ';' V ')' body

    KW_LET  shift, and go to state 3
    IDENT   shift, and go to state 11

    var           go to state 87
    declaration   go to state 88
    assignment    go to state 89
    array_access  go to state 19


state 49

   93 switch_case: KW_SWITCH '(' . expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' . expression ')' '{' switch_case_blocks '}'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 90
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 50

   11 statement: KW_BREAK ';' .

    $default  reduce using rule 11 (statement)


state 51

   12 statement: KW_CONTINUE ';' .

    $default  reduce using rule 12 (statement)


state 52

   16 var: IDENT '.' . IDENT

    IDENT  shift, and go to state 91


state 53

    0 $accept: statements $end .

    $default  accept


state 54

    1 statements: statement statements .

    $default  reduce using rule 1 (statements)


state 55

   69 call_stmt_standalone: var '(' . pass_param_list ')' ';'
   70                     | var '(' . ')' ';'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    ')'        shift, and go to state 92
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 64
    call_stmt        go to state 41
    pass_param_list  go to state 93
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 56

   42 assignment: var '=' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 94
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 57

   78 C: '[' . LIT_INT ']' C
   79  | '[' . LIT_INT ']'

    LIT_INT  shift, and go to state 95


state 58

   77 array_access: var C .

    $default  reduce using rule 77 (array_access)


state 59

    3 statement: declaration ';' .

    $default  reduce using rule 3 (statement)


state 60

    4 statement: assignment ';' .

    $default  reduce using rule 4 (statement)


state 61

    6 statement: return_stmt ';' .

    $default  reduce using rule 6 (statement)


state 62

   43 assignment: array_access '=' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 96
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 63

   99 archetype_claim: KW_CLAIM IDENT KW_IS . KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';'
  100                | KW_CLAIM IDENT KW_IS . KW_RING '{' ring_closure_rule identity_rule '}' ';'
  101                | KW_CLAIM IDENT KW_IS . KW_FIELD '{' field_inverse_rule '}' ';'
  102                | KW_CLAIM IDENT KW_IS . KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_GROUP  shift, and go to state 97
    KW_RING   shift, and go to state 98
    KW_FIELD  shift, and go to state 99
    KW_SPACE  shift, and go to state 100


state 64

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   73 pass_param_list: expression . ',' pass_param_list
   74                | expression .

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ','     shift, and go to state 101

    $default  reduce using rule 74 (pass_param_list)


state 65

   10 statement: KW_PRINT '(' pass_param_list . ')' ';'

    ')'  shift, and go to state 102


state 66

   31 decl_tail: var ':' . decl_type decl_cntd

    KW_CYCLIC        shift, and go to state 103
    KW_BIG_RATIONAL  shift, and go to state 104
    KW_COMPLEX       shift, and go to state 105
    KW_SYMMETRIC     shift, and go to state 106
    KW_ALTERNATING   shift, and go to state 107
    KW_DIHEDRAL      shift, and go to state 108
    KW_INV_MAT       shift, and go to state 109
    KW_BIGINT        shift, and go to state 110
    KW_MATRIX        shift, and go to state 111
    KW_POLYNOMIAL    shift, and go to state 112
    KW_VEC           shift, and go to state 113
    KW_BUF           shift, and go to state 114
    IDENT            shift, and go to state 115
    PRIMITIVE_DTYPE  shift, and go to state 116

    $default  reduce using rule 17 (field_data_type)

    field_data_type  go to state 117
    group_data_type  go to state 118
    ring_data_type   go to state 119
    space_data_type  go to state 120
    decl_type        go to state 121


state 67

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   55           | '!' expression .
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 55 (expression)


state 68

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   53           | '(' expression . ')'
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ')'     shift, and go to state 122


state 69

   81 array_list: constant . ',' array_list
   82           | constant .

    ','  shift, and go to state 123

    $default  reduce using rule 82 (array_list)


state 70

   80 array_decl: '[' array_list . ']'

    ']'  shift, and go to state 124


state 71

   75 unary_operation: var INCR .

    $default  reduce using rule 75 (unary_operation)


state 72

   76 unary_operation: var DECR .

    $default  reduce using rule 76 (unary_operation)


state 73

   71 call_stmt: var '(' . pass_param_list ')'
   72          | var '(' . ')'

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    ')'        shift, and go to state 125
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 64
    call_stmt        go to state 41
    pass_param_list  go to state 126
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 74

   54 expression: expression log_op . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 127
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 75

   56 expression: expression rel_op . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 128
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 76

   57 expression: expression '>' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 129
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 77

   58 expression: expression '<' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 130
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 78

   48 expression: expression '+' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 131
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 79

   49 expression: expression '-' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 132
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 80

   50 expression: expression '*' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 133
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 81

   51 expression: expression '/' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 134
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 82

   52 expression: expression '%' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 135
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 83

   66 expression: expression '@' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 136
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 84

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   83 if_else_conditional: KW_IF '(' expression . ')' if_body

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ')'     shift, and go to state 137


state 85

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   87 loop_stmt: KW_WHILE '(' expression . ')' body

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ')'     shift, and go to state 138


state 86

   90 loop_stmt: KW_FOR IDENT KW_IN . IDENT body

    IDENT  shift, and go to state 139


state 87

   42 assignment: var . '=' expression
   77 array_access: var . C

    '='  shift, and go to state 56
    '['  shift, and go to state 57

    C  go to state 58


state 88

   89 loop_stmt: KW_FOR '(' declaration . ';' expression ';' V ')' body

    ';'  shift, and go to state 140


state 89

   88 loop_stmt: KW_FOR '(' assignment . ';' expression ';' V ')' body

    ';'  shift, and go to state 141


state 90

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   93 switch_case: KW_SWITCH '(' expression . ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' expression . ')' '{' switch_case_blocks '}'

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ')'     shift, and go to state 142


state 91

   16 var: IDENT '.' IDENT .

    $default  reduce using rule 16 (var)


state 92

   70 call_stmt_standalone: var '(' ')' . ';'

    ';'  shift, and go to state 143


state 93

   69 call_stmt_standalone: var '(' pass_param_list . ')' ';'

    ')'  shift, and go to state 144


state 94

   42 assignment: var '=' expression .
   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83

    $default  reduce using rule 42 (assignment)


state 95

   78 C: '[' LIT_INT . ']' C
   79  | '[' LIT_INT . ']'

    ']'  shift, and go to state 145


state 96

   43 assignment: array_access '=' expression .
   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83

    $default  reduce using rule 43 (assignment)


state 97

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP . '{' group_closure_rule identity_rule group_inverse_rule '}' ';'

    '{'  shift, and go to state 146


state 98

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING . '{' ring_closure_rule identity_rule '}' ';'

    '{'  shift, and go to state 147


state 99

  101 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD . '{' field_inverse_rule '}' ';'

    '{'  shift, and go to state 148


state 100

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE . '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '{'  shift, and go to state 149


state 101

   73 pass_param_list: expression ',' . pass_param_list

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 64
    call_stmt        go to state 41
    pass_param_list  go to state 150
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 102

   10 statement: KW_PRINT '(' pass_param_list ')' . ';'

    ';'  shift, and go to state 151


state 103

   20 group_data_type: KW_CYCLIC . '<' LIT_INT '>'

    '<'  shift, and go to state 152


state 104

   18 field_data_type: KW_BIG_RATIONAL .

    $default  reduce using rule 18 (field_data_type)


state 105

   19 field_data_type: KW_COMPLEX .

    $default  reduce using rule 19 (field_data_type)


state 106

   21 group_data_type: KW_SYMMETRIC . '<' LIT_INT '>'

    '<'  shift, and go to state 153


state 107

   22 group_data_type: KW_ALTERNATING . '<' LIT_INT '>'

    '<'  shift, and go to state 154


state 108

   23 group_data_type: KW_DIHEDRAL . '<' LIT_INT '>'

    '<'  shift, and go to state 155


state 109

   24 group_data_type: KW_INV_MAT . '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 156


state 110

   25 ring_data_type: KW_BIGINT .

    $default  reduce using rule 25 (ring_data_type)


state 111

   26 ring_data_type: KW_MATRIX . '<' LIT_INT ',' IDENT '>'

    '<'  shift, and go to state 157


state 112

   27 ring_data_type: KW_POLYNOMIAL . '<' IDENT '>'

    '<'  shift, and go to state 158


state 113

   28 space_data_type: KW_VEC . '<' IDENT '>'
   29                | KW_VEC . '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 159


state 114

   33 decl_type: KW_BUF . '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 160


state 115

   34 decl_type: IDENT .

    $default  reduce using rule 34 (decl_type)


state 116

   32 decl_type: PRIMITIVE_DTYPE .

    $default  reduce using rule 32 (decl_type)


state 117

   37 decl_type: field_data_type .

    $default  reduce using rule 37 (decl_type)


state 118

   35 decl_type: group_data_type .

    $default  reduce using rule 35 (decl_type)


state 119

   36 decl_type: ring_data_type .

    $default  reduce using rule 36 (decl_type)


state 120

   38 decl_type: space_data_type .

    $default  reduce using rule 38 (decl_type)


state 121

   31 decl_tail: var ':' decl_type . decl_cntd

    ','  shift, and go to state 161
    '='  shift, and go to state 162

    $default  reduce using rule 108 (epsilon)

    decl_cntd  go to state 163
    epsilon    go to state 164


state 122

   53 expression: '(' expression ')' .

    $default  reduce using rule 53 (expression)


state 123

   81 array_list: constant ',' . array_list

    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32

    constant    go to state 69
    array_list  go to state 165


state 124

   80 array_decl: '[' array_list ']' .

    $default  reduce using rule 80 (array_decl)


state 125

   72 call_stmt: var '(' ')' .

    $default  reduce using rule 72 (call_stmt)


state 126

   71 call_stmt: var '(' pass_param_list . ')'

    ')'  shift, and go to state 166


state 127

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   54           | expression log_op expression .
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '%'  shift, and go to state 82
    '@'  shift, and go to state 83

    $default  reduce using rule 54 (expression)


state 128

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   56           | expression rel_op expression .
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '%'  shift, and go to state 82
    '@'  shift, and go to state 83

    $default  reduce using rule 56 (expression)


state 129

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   57           | expression '>' expression .
   58           | expression . '<' expression
   66           | expression . '@' expression

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '%'  shift, and go to state 82
    '@'  shift, and go to state 83

    $default  reduce using rule 57 (expression)


state 130

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   58           | expression '<' expression .
   66           | expression . '@' expression

    '+'  shift, and go to state 78
    '-'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '%'  shift, and go to state 82
    '@'  shift, and go to state 83

    $default  reduce using rule 58 (expression)


state 131

   48 expression: expression . '+' expression
   48           | expression '+' expression .
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 48 (expression)


state 132

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   49           | expression '-' expression .
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 49 (expression)


state 133

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   50           | expression '*' expression .
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 50 (expression)


state 134

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   51           | expression '/' expression .
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 51 (expression)


state 135

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   52           | expression '%' expression .
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    $default  reduce using rule 52 (expression)


state 136

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   66           | expression '@' expression .

    $default  reduce using rule 66 (expression)


state 137

   83 if_else_conditional: KW_IF '(' expression ')' . if_body

    '{'  shift, and go to state 167

    body     go to state 168
    if_body  go to state 169


state 138

   87 loop_stmt: KW_WHILE '(' expression ')' . body

    '{'  shift, and go to state 167

    body  go to state 170


state 139

   90 loop_stmt: KW_FOR IDENT KW_IN IDENT . body

    '{'  shift, and go to state 167

    body  go to state 171


state 140

   89 loop_stmt: KW_FOR '(' declaration ';' . expression ';' V ')' body

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 172
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 141

   88 loop_stmt: KW_FOR '(' assignment ';' . expression ';' V ')' body

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 173
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 142

   93 switch_case: KW_SWITCH '(' expression ')' . '{' switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' expression ')' . '{' switch_case_blocks '}'

    '{'  shift, and go to state 174


state 143

   70 call_stmt_standalone: var '(' ')' ';' .

    $default  reduce using rule 70 (call_stmt_standalone)


state 144

   69 call_stmt_standalone: var '(' pass_param_list ')' . ';'

    ';'  shift, and go to state 175


state 145

   78 C: '[' LIT_INT ']' . C
   79  | '[' LIT_INT ']' .

    '['  shift, and go to state 57

    $default  reduce using rule 79 (C)

    C  go to state 176


state 146

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' . group_closure_rule identity_rule group_inverse_rule '}' ';'

    '('  shift, and go to state 177

    group_closure_rule  go to state 178


state 147

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' . ring_closure_rule identity_rule '}' ';'

    '('  shift, and go to state 179

    ring_closure_rule  go to state 180


state 148

  101 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' . field_inverse_rule '}' ';'

    '('  shift, and go to state 181

    field_inverse_rule  go to state 182


state 149

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' . KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    KW_FIELD  shift, and go to state 183


state 150

   73 pass_param_list: expression ',' pass_param_list .

    $default  reduce using rule 73 (pass_param_list)


state 151

   10 statement: KW_PRINT '(' pass_param_list ')' ';' .

    $default  reduce using rule 10 (statement)


state 152

   20 group_data_type: KW_CYCLIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 184


state 153

   21 group_data_type: KW_SYMMETRIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 185


state 154

   22 group_data_type: KW_ALTERNATING '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 186


state 155

   23 group_data_type: KW_DIHEDRAL '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 187


state 156

   24 group_data_type: KW_INV_MAT '<' . LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 188


state 157

   26 ring_data_type: KW_MATRIX '<' . LIT_INT ',' IDENT '>'

    LIT_INT  shift, and go to state 189


state 158

   27 ring_data_type: KW_POLYNOMIAL '<' . IDENT '>'

    IDENT  shift, and go to state 190


state 159

   28 space_data_type: KW_VEC '<' . IDENT '>'
   29                | KW_VEC '<' . PRIMITIVE_DTYPE '>'

    IDENT            shift, and go to state 191
    PRIMITIVE_DTYPE  shift, and go to state 192


state 160

   33 decl_type: KW_BUF '<' . PRIMITIVE_DTYPE '>'

    PRIMITIVE_DTYPE  shift, and go to state 193


state 161

   40 decl_cntd: ',' . decl_tail

    IDENT  shift, and go to state 11

    var        go to state 27
    decl_tail  go to state 194


state 162

   39 decl_cntd: '=' . expression

    IDENT      shift, and go to state 11
    LIT_INT    shift, and go to state 29
    LIT_FLOAT  shift, and go to state 30
    LIT_STR    shift, and go to state 31
    LIT_CHAR   shift, and go to state 32
    KW_TRUE    shift, and go to state 33
    KW_FALSE   shift, and go to state 34
    '!'        shift, and go to state 35
    '('        shift, and go to state 36
    '['        shift, and go to state 37

    var              go to state 38
    constant         go to state 39
    expression       go to state 195
    call_stmt        go to state 41
    unary_operation  go to state 42
    array_access     go to state 43
    array_decl       go to state 44


state 163

   31 decl_tail: var ':' decl_type decl_cntd .

    $default  reduce using rule 31 (decl_tail)


state 164

   41 decl_cntd: epsilon .

    $default  reduce using rule 41 (decl_cntd)


state 165

   81 array_list: constant ',' array_list .

    $default  reduce using rule 81 (array_list)


state 166

   71 call_stmt: var '(' pass_param_list ')' .

    $default  reduce using rule 71 (call_stmt)


state 167

   14 body: '{' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 196
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 168

   84 if_body: body .
   85        | body . KW_ELSE if_else_conditional
   86        | body . KW_ELSE body

    KW_ELSE  shift, and go to state 197

    $default  reduce using rule 84 (if_body)


state 169

   83 if_else_conditional: KW_IF '(' expression ')' if_body .

    $default  reduce using rule 83 (if_else_conditional)


state 170

   87 loop_stmt: KW_WHILE '(' expression ')' body .

    $default  reduce using rule 87 (loop_stmt)


state 171

   90 loop_stmt: KW_FOR IDENT KW_IN IDENT body .

    $default  reduce using rule 90 (loop_stmt)


state 172

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   89 loop_stmt: KW_FOR '(' declaration ';' expression . ';' V ')' body

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ';'     shift, and go to state 198


state 173

   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression
   88 loop_stmt: KW_FOR '(' assignment ';' expression . ';' V ')' body

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83
    ';'     shift, and go to state 199


state 174

   93 switch_case: KW_SWITCH '(' expression ')' '{' . switch_case_blocks KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' expression ')' '{' . switch_case_blocks '}'

    KW_CASE  shift, and go to state 200

    $default  reduce using rule 108 (epsilon)

    switch_case_blocks  go to state 201
    epsilon             go to state 202


state 175

   69 call_stmt_standalone: var '(' pass_param_list ')' ';' .

    $default  reduce using rule 69 (call_stmt_standalone)


state 176

   78 C: '[' LIT_INT ']' C .

    $default  reduce using rule 78 (C)


state 177

  103 group_closure_rule: '(' . IDENT '=' IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 203


state 178

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule . identity_rule group_inverse_rule '}' ';'

    '('  shift, and go to state 204

    identity_rule  go to state 205


state 179

  104 ring_closure_rule: '(' . IDENT '=' IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 206


state 180

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule . identity_rule '}' ';'

    '('  shift, and go to state 204

    identity_rule  go to state 207


state 181

  107 field_inverse_rule: '(' . IDENT '=' '~' IDENT ')' ARROW body

    IDENT  shift, and go to state 208


state 182

  101 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule . '}' ';'

    '}'  shift, and go to state 209


state 183

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD . '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '='  shift, and go to state 210


state 184

   20 group_data_type: KW_CYCLIC '<' LIT_INT . '>'

    '>'  shift, and go to state 211


state 185

   21 group_data_type: KW_SYMMETRIC '<' LIT_INT . '>'

    '>'  shift, and go to state 212


state 186

   22 group_data_type: KW_ALTERNATING '<' LIT_INT . '>'

    '>'  shift, and go to state 213


state 187

   23 group_data_type: KW_DIHEDRAL '<' LIT_INT . '>'

    '>'  shift, and go to state 214


state 188

   24 group_data_type: KW_INV_MAT '<' LIT_INT . ',' IDENT '>'

    ','  shift, and go to state 215


state 189

   26 ring_data_type: KW_MATRIX '<' LIT_INT . ',' IDENT '>'

    ','  shift, and go to state 216


state 190

   27 ring_data_type: KW_POLYNOMIAL '<' IDENT . '>'

    '>'  shift, and go to state 217


state 191

   28 space_data_type: KW_VEC '<' IDENT . '>'

    '>'  shift, and go to state 218


state 192

   29 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE . '>'

    '>'  shift, and go to state 219


state 193

   33 decl_type: KW_BUF '<' PRIMITIVE_DTYPE . '>'

    '>'  shift, and go to state 220


state 194

   40 decl_cntd: ',' decl_tail .

    $default  reduce using rule 40 (decl_cntd)


state 195

   39 decl_cntd: '=' expression .
   48 expression: expression . '+' expression
   49           | expression . '-' expression
   50           | expression . '*' expression
   51           | expression . '/' expression
   52           | expression . '%' expression
   54           | expression . log_op expression
   56           | expression . rel_op expression
   57           | expression . '>' expression
   58           | expression . '<' expression
   66           | expression . '@' expression

    log_op  shift, and go to state 74
    rel_op  shift, and go to state 75
    '>'     shift, and go to state 76
    '<'     shift, and go to state 77
    '+'     shift, and go to state 78
    '-'     shift, and go to state 79
    '*'     shift, and go to state 80
    '/'     shift, and go to state 81
    '%'     shift, and go to state 82
    '@'     shift, and go to state 83

    $default  reduce using rule 39 (decl_cntd)


state 196

   14 body: '{' statements . '}'

    '}'  shift, and go to state 221


state 197

   85 if_body: body KW_ELSE . if_else_conditional
   86        | body KW_ELSE . body

    KW_IF  shift, and go to state 5
    '{'    shift, and go to state 167

    body                 go to state 222
    if_else_conditional  go to state 223


state 198

   89 loop_stmt: KW_FOR '(' declaration ';' expression ';' . V ')' body

    IDENT  shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    var              go to state 224
    unary_operation  go to state 225
    V                go to state 226
    epsilon          go to state 227


state 199

   88 loop_stmt: KW_FOR '(' assignment ';' expression ';' . V ')' body

    IDENT  shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    var              go to state 224
    unary_operation  go to state 225
    V                go to state 228
    epsilon          go to state 227


state 200

   95 switch_case_blocks: KW_CASE . LIT_CHAR ':' statements switch_case_blocks
   96                   | KW_CASE . LIT_INT ':' statements switch_case_blocks
   97                   | KW_CASE . LIT_FLOAT ':' statements switch_case_blocks

    LIT_INT    shift, and go to state 229
    LIT_FLOAT  shift, and go to state 230
    LIT_CHAR   shift, and go to state 231


state 201

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks . KW_DEFAULT ':' statements '}'
   94            | KW_SWITCH '(' expression ')' '{' switch_case_blocks . '}'

    KW_DEFAULT  shift, and go to state 232
    '}'         shift, and go to state 233


state 202

   98 switch_case_blocks: epsilon .

    $default  reduce using rule 98 (switch_case_blocks)


state 203

  103 group_closure_rule: '(' IDENT . '=' IDENT '+' IDENT ')' ARROW body

    '='  shift, and go to state 234


state 204

  105 identity_rule: '(' . IDENT '=' LIT_INT ')' ARROW body

    IDENT  shift, and go to state 235


state 205

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule . group_inverse_rule '}' ';'

    '('  shift, and go to state 236

    group_inverse_rule  go to state 237


state 206

  104 ring_closure_rule: '(' IDENT . '=' IDENT '*' IDENT ')' ARROW body

    '='  shift, and go to state 238


state 207

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule . '}' ';'

    '}'  shift, and go to state 239


state 208

  107 field_inverse_rule: '(' IDENT . '=' '~' IDENT ')' ARROW body

    '='  shift, and go to state 240


state 209

  101 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' . ';'

    ';'  shift, and go to state 241


state 210

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' . '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 242


state 211

   20 group_data_type: KW_CYCLIC '<' LIT_INT '>' .

    $default  reduce using rule 20 (group_data_type)


state 212

   21 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' .

    $default  reduce using rule 21 (group_data_type)


state 213

   22 group_data_type: KW_ALTERNATING '<' LIT_INT '>' .

    $default  reduce using rule 22 (group_data_type)


state 214

   23 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' .

    $default  reduce using rule 23 (group_data_type)


state 215

   24 group_data_type: KW_INV_MAT '<' LIT_INT ',' . IDENT '>'

    IDENT  shift, and go to state 243


state 216

   26 ring_data_type: KW_MATRIX '<' LIT_INT ',' . IDENT '>'

    IDENT  shift, and go to state 244


state 217

   27 ring_data_type: KW_POLYNOMIAL '<' IDENT '>' .

    $default  reduce using rule 27 (ring_data_type)


state 218

   28 space_data_type: KW_VEC '<' IDENT '>' .

    $default  reduce using rule 28 (space_data_type)


state 219

   29 space_data_type: KW_VEC '<' PRIMITIVE_DTYPE '>' .

    $default  reduce using rule 29 (space_data_type)


state 220

   33 decl_type: KW_BUF '<' PRIMITIVE_DTYPE '>' .

    $default  reduce using rule 33 (decl_type)


state 221

   14 body: '{' statements '}' .

    $default  reduce using rule 14 (body)


state 222

   86 if_body: body KW_ELSE body .

    $default  reduce using rule 86 (if_body)


state 223

   85 if_body: body KW_ELSE if_else_conditional .

    $default  reduce using rule 85 (if_body)


state 224

   75 unary_operation: var . INCR
   76                | var . DECR

    INCR  shift, and go to state 71
    DECR  shift, and go to state 72


state 225

   91 V: unary_operation .

    $default  reduce using rule 91 (V)


state 226

   89 loop_stmt: KW_FOR '(' declaration ';' expression ';' V . ')' body

    ')'  shift, and go to state 245


state 227

   92 V: epsilon .

    $default  reduce using rule 92 (V)


state 228

   88 loop_stmt: KW_FOR '(' assignment ';' expression ';' V . ')' body

    ')'  shift, and go to state 246


state 229

   96 switch_case_blocks: KW_CASE LIT_INT . ':' statements switch_case_blocks

    ':'  shift, and go to state 247


state 230

   97 switch_case_blocks: KW_CASE LIT_FLOAT . ':' statements switch_case_blocks

    ':'  shift, and go to state 248


state 231

   95 switch_case_blocks: KW_CASE LIT_CHAR . ':' statements switch_case_blocks

    ':'  shift, and go to state 249


state 232

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT . ':' statements '}'

    ':'  shift, and go to state 250


state 233

   94 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks '}' .

    $default  reduce using rule 94 (switch_case)


state 234

  103 group_closure_rule: '(' IDENT '=' . IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 251


state 235

  105 identity_rule: '(' IDENT . '=' LIT_INT ')' ARROW body

    '='  shift, and go to state 252


state 236

  106 group_inverse_rule: '(' . IDENT '=' '-' IDENT ')' ARROW body

    IDENT  shift, and go to state 253


state 237

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule . '}' ';'

    '}'  shift, and go to state 254


state 238

  104 ring_closure_rule: '(' IDENT '=' . IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 255


state 239

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' . ';'

    ';'  shift, and go to state 256


state 240

  107 field_inverse_rule: '(' IDENT '=' . '~' IDENT ')' ARROW body

    '~'  shift, and go to state 257


state 241

  101 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' field_inverse_rule '}' ';' .

    $default  reduce using rule 101 (archetype_claim)


state 242

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' . IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    IDENT  shift, and go to state 258


state 243

   24 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT . '>'

    '>'  shift, and go to state 259


state 244

   26 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT . '>'

    '>'  shift, and go to state 260


state 245

   89 loop_stmt: KW_FOR '(' declaration ';' expression ';' V ')' . body

    '{'  shift, and go to state 167

    body  go to state 261


state 246

   88 loop_stmt: KW_FOR '(' assignment ';' expression ';' V ')' . body

    '{'  shift, and go to state 167

    body  go to state 262


state 247

   96 switch_case_blocks: KW_CASE LIT_INT ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 263
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 248

   97 switch_case_blocks: KW_CASE LIT_FLOAT ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 264
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 249

   95 switch_case_blocks: KW_CASE LIT_CHAR ':' . statements switch_case_blocks

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 265
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 250

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' . statements '}'

    KW_CLAIM     shift, and go to state 1
    KW_PRINT     shift, and go to state 2
    KW_LET       shift, and go to state 3
    KW_RETURN    shift, and go to state 4
    KW_IF        shift, and go to state 5
    KW_WHILE     shift, and go to state 6
    KW_FOR       shift, and go to state 7
    KW_SWITCH    shift, and go to state 8
    KW_BREAK     shift, and go to state 9
    KW_CONTINUE  shift, and go to state 10
    IDENT        shift, and go to state 11

    $default  reduce using rule 108 (epsilon)

    statements            go to state 266
    statement             go to state 13
    var                   go to state 14
    declaration           go to state 15
    assignment            go to state 16
    return_stmt           go to state 17
    call_stmt_standalone  go to state 18
    array_access          go to state 19
    if_else_conditional   go to state 20
    loop_stmt             go to state 21
    switch_case           go to state 22
    archetype_claim       go to state 23
    epsilon               go to state 24


state 251

  103 group_closure_rule: '(' IDENT '=' IDENT . '+' IDENT ')' ARROW body

    '+'  shift, and go to state 267


state 252

  105 identity_rule: '(' IDENT '=' . LIT_INT ')' ARROW body

    LIT_INT  shift, and go to state 268


state 253

  106 group_inverse_rule: '(' IDENT . '=' '-' IDENT ')' ARROW body

    '='  shift, and go to state 269


state 254

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' . ';'

    ';'  shift, and go to state 270


state 255

  104 ring_closure_rule: '(' IDENT '=' IDENT . '*' IDENT ')' ARROW body

    '*'  shift, and go to state 271


state 256

  100 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' ring_closure_rule identity_rule '}' ';' .

    $default  reduce using rule 100 (archetype_claim)


state 257

  107 field_inverse_rule: '(' IDENT '=' '~' . IDENT ')' ARROW body

    IDENT  shift, and go to state 272


state 258

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT . ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    ')'  shift, and go to state 273


state 259

   24 group_data_type: KW_INV_MAT '<' LIT_INT ',' IDENT '>' .

    $default  reduce using rule 24 (group_data_type)


state 260

   26 ring_data_type: KW_MATRIX '<' LIT_INT ',' IDENT '>' .

    $default  reduce using rule 26 (ring_data_type)


state 261

   89 loop_stmt: KW_FOR '(' declaration ';' expression ';' V ')' body .

    $default  reduce using rule 89 (loop_stmt)


state 262

   88 loop_stmt: KW_FOR '(' assignment ';' expression ';' V ')' body .

    $default  reduce using rule 88 (loop_stmt)


state 263

   96 switch_case_blocks: KW_CASE LIT_INT ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 200

    $default  reduce using rule 108 (epsilon)

    switch_case_blocks  go to state 274
    epsilon             go to state 202


state 264

   97 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 200

    $default  reduce using rule 108 (epsilon)

    switch_case_blocks  go to state 275
    epsilon             go to state 202


state 265

   95 switch_case_blocks: KW_CASE LIT_CHAR ':' statements . switch_case_blocks

    KW_CASE  shift, and go to state 200

    $default  reduce using rule 108 (epsilon)

    switch_case_blocks  go to state 276
    epsilon             go to state 202


state 266

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements . '}'

    '}'  shift, and go to state 277


state 267

  103 group_closure_rule: '(' IDENT '=' IDENT '+' . IDENT ')' ARROW body

    IDENT  shift, and go to state 278


state 268

  105 identity_rule: '(' IDENT '=' LIT_INT . ')' ARROW body

    ')'  shift, and go to state 279


state 269

  106 group_inverse_rule: '(' IDENT '=' . '-' IDENT ')' ARROW body

    '-'  shift, and go to state 280


state 270

   99 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' group_closure_rule identity_rule group_inverse_rule '}' ';' .

    $default  reduce using rule 99 (archetype_claim)


state 271

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' . IDENT ')' ARROW body

    IDENT  shift, and go to state 281


state 272

  107 field_inverse_rule: '(' IDENT '=' '~' IDENT . ')' ARROW body

    ')'  shift, and go to state 282


state 273

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' . ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    ';'  shift, and go to state 283


state 274

   96 switch_case_blocks: KW_CASE LIT_INT ':' statements switch_case_blocks .

    $default  reduce using rule 96 (switch_case_blocks)


state 275

   97 switch_case_blocks: KW_CASE LIT_FLOAT ':' statements switch_case_blocks .

    $default  reduce using rule 97 (switch_case_blocks)


state 276

   95 switch_case_blocks: KW_CASE LIT_CHAR ':' statements switch_case_blocks .

    $default  reduce using rule 95 (switch_case_blocks)


state 277

   93 switch_case: KW_SWITCH '(' expression ')' '{' switch_case_blocks KW_DEFAULT ':' statements '}' .

    $default  reduce using rule 93 (switch_case)


state 278

  103 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT . ')' ARROW body

    ')'  shift, and go to state 284


state 279

  105 identity_rule: '(' IDENT '=' LIT_INT ')' . ARROW body

    ARROW  shift, and go to state 285


state 280

  106 group_inverse_rule: '(' IDENT '=' '-' . IDENT ')' ARROW body

    IDENT  shift, and go to state 286


state 281

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT . ')' ARROW body

    ')'  shift, and go to state 287


state 282

  107 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' . ARROW body

    ARROW  shift, and go to state 288


state 283

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' . group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 177

    group_closure_rule  go to state 289


state 284

  103 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' . ARROW body

    ARROW  shift, and go to state 290


state 285

  105 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW . body

    '{'  shift, and go to state 167

    body  go to state 291


state 286

  106 group_inverse_rule: '(' IDENT '=' '-' IDENT . ')' ARROW body

    ')'  shift, and go to state 292


state 287

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' . ARROW body

    ARROW  shift, and go to state 293


state 288

  107 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW . body

    '{'  shift, and go to state 167

    body  go to state 294


state 289

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule . group_inverse_rule identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 236

    group_inverse_rule  go to state 295


state 290

  103 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW . body

    '{'  shift, and go to state 167

    body  go to state 296


state 291

  105 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body .

    $default  reduce using rule 105 (identity_rule)


state 292

  106 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' . ARROW body

    ARROW  shift, and go to state 297


state 293

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW . body

    '{'  shift, and go to state 167

    body  go to state 298


state 294

  107 field_inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body .

    $default  reduce using rule 107 (field_inverse_rule)


state 295

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule . identity_rule ring_closure_rule '}' ';'

    '('  shift, and go to state 204

    identity_rule  go to state 299


state 296

  103 group_closure_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body .

    $default  reduce using rule 103 (group_closure_rule)


state 297

  106 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' ARROW . body

    '{'  shift, and go to state 167

    body  go to state 300


state 298

  104 ring_closure_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body .

    $default  reduce using rule 104 (ring_closure_rule)


state 299

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule . ring_closure_rule '}' ';'

    '('  shift, and go to state 179

    ring_closure_rule  go to state 301


state 300

  106 group_inverse_rule: '(' IDENT '=' '-' IDENT ')' ARROW body .

    $default  reduce using rule 106 (group_inverse_rule)


state 301

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule . '}' ';'

    '}'  shift, and go to state 302


state 302

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' . ';'

    ';'  shift, and go to state 303


state 303

  102 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' IDENT ')' ';' group_closure_rule group_inverse_rule identity_rule ring_closure_rule '}' ';' .

    $default  reduce using rule 102 (archetype_claim)
