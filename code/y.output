Terminals which are not used

   KW_MORPH


Grammar

    0 $accept: P $end

    1 P: declarations
    2  | P function
    3  | P struct
    4  | P forge
    5  | P enum

    6 declarations: declaration ';' declarations
    7             | epsilon

    8 body: '{' statements '}'

    9 statements: statement statements
   10           | epsilon

   11 statement: declaration ';'
   12          | assignment ';'
   13          | call ';'
   14          | return_stmt ';'
   15          | conditional
   16          | switch_case
   17          | loop_stmt
   18          | KW_BREAK ';'
   19          | KW_CONTINUE ';'
   20          | archetype_claim

   21 field_data_type: KW_BIG_RATIONAL
   22                | KW_COMPLEX

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   24                | KW_SYMMETRIC '<' LIT_INT '>'
   25                | KW_ALTERNATING '<' LIT_INT '>'
   26                | KW_DIHEDRAL '<' LIT_INT '>'
   27                | KW_INV_MAT '<' LIT_INT ',' type '>'

   28 ring_data_type: KW_BIGINT
   29               | KW_MATRIX '<' LIT_INT ',' type '>'
   30               | KW_POLYNOMIAL '<' type '>'

   31 space_data_type: KW_VEC '<' type '>'

   32 declaration: KW_LET decl_list

   33 decl_list: decl_item
   34          | decl_item ',' decl_list

   35 decl_item: typ_var
   36          | typ_var '=' expression

   37 type: PRIMITIVE_DTYPE
   38     | KW_BUF '<' PRIMITIVE_DTYPE '>'
   39     | IDENT
   40     | group_data_type
   41     | ring_data_type
   42     | field_data_type
   43     | space_data_type
   44     | '&' type
   45     | cart

   46 var: IDENT
   47    | var '.' IDENT
   48    | '*' var
   49    | '*' '(' expression ')'
   50    | IDENT VARIANT IDENT

   51 assignment: var '=' expression
   52           | array_access '=' expression

   53 constant: LIT_CHAR
   54         | LIT_FLOAT
   55         | LIT_INT
   56         | LIT_STR
   57         | KW_TRUE
   58         | KW_FALSE

   59 expression: '(' expression ')'
   60           | '!' expression
   61           | '-' expression
   62           | expression KW_AS type
   63           | expression '@' expression
   64           | expression '*' expression
   65           | expression '/' expression
   66           | expression '%' expression
   67           | expression '+' expression
   68           | expression '-' expression
   69           | expression '>' expression
   70           | expression '<' expression
   71           | expression rel_op expression
   72           | expression AND expression
   73           | expression OR expression
   74           | var
   75           | constant
   76           | unary_operation
   77           | array_access
   78           | call
   79           | array_decl

   80 return_stmt: KW_RETURN expression

   81 call: IDENT '(' pass_param_list ')'

   82 pass_param_list: expression ',' pass_param_list
   83                | epsilon

   84 unary_operation: var INCR
   85                | var DECR

   86 array_access: var array_decl

   87 array_decl: '[' array_list ']'
   88           | '[' expression SLICE expression ']'

   89 array_list: constant ',' array_list
   90           | constant

   91 conditional: KW_IF '(' expression ')' if_body

   92 if_body: body
   93        | body KW_ELSE conditional
   94        | body KW_ELSE body

   95 loop_stmt: KW_WHILE '(' expression ')' body
   96          | KW_FOR '(' assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR '(' declaration ';' expression ';' loop_mut ')' body
   98          | KW_FOR IDENT KW_IN IDENT body

   99 loop_mut: unary_operation
  100         | epsilon

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' sc_blocks '}'

  103 sc_blocks: KW_CASE LIT_CHAR ':' statements sc_blocks
  104          | KW_CASE LIT_INT ':' statements sc_blocks
  105          | KW_CASE LIT_FLOAT ':' statements sc_blocks
  106          | epsilon

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  108                | KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  109                | KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  110                | KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

  111 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body

  112 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body

  113 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body

  114 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body

  115 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body

  116 function: function_header '{' function_body '}'

  117 function_header: KW_FN IDENT '(' parameter_list ')' ':' type

  118 function_body: statements

  119 parameter_list: typ_var
  120               | parameter_list ',' typ_var

  121 typ_var: IDENT ':' type

  122 struct: KW_STRUCT IDENT '{' attr_list '}'

  123 attr_list: IDENT
  124          | typ_var ',' IDENT

  125 enum: KW_ENUM IDENT '{' variant_list '}'

  126 variant_list: IDENT
  127             | variant_list ',' IDENT

  128 forge: KW_FORGE type '(' parameter_list '{' statements '}'

  129 cart: '(' typ_list ')'

  130 typ_list: typ_list ',' type
  131         | type

  132 epsilon: /* empty */


Terminals, with rules where they appear

$end (0) 0
'!' (33) 60
'%' (37) 66
'&' (38) 44
'(' (40) 49 59 81 91 95 96 97 101 102 110 111 112 113 114 115 117 128
    129
')' (41) 49 59 81 91 95 96 97 101 102 110 111 112 113 114 115 117 129
'*' (42) 48 49 64 112
'+' (43) 67 111
',' (44) 27 29 34 82 89 120 124 127 130
'-' (45) 61 68 114
'.' (46) 47
'/' (47) 65
':' (58) 101 103 104 105 117 121
';' (59) 6 11 12 13 14 18 19 96 97 107 108 109 110
'<' (60) 23 24 25 26 27 29 30 31 38 70
'=' (61) 36 51 52 110 111 112 113 114 115
'>' (62) 23 24 25 26 27 29 30 31 38 69
'@' (64) 63
'[' (91) 87 88
']' (93) 87 88
'{' (123) 8 101 102 107 108 109 110 116 122 125 128
'}' (125) 8 101 102 107 108 109 110 116 122 125 128
'~' (126) 115
error (256)
KW_CLAIM (258) 107 108 109 110
KW_IS (259) 107 108 109 110
KW_GROUP (260) 107
KW_RING (261) 108
KW_FIELD (262) 109 110
KW_SPACE (263) 110
KW_LET (264) 32
KW_RETURN (265) 80
KW_IF (266) 91
KW_ELSE (267) 93 94
KW_WHILE (268) 95
KW_FOR (269) 96 97 98
KW_IN (270) 98
KW_SWITCH (271) 101 102
KW_CASE (272) 103 104 105
KW_DEFAULT (273) 101
KW_BREAK (274) 18
KW_CONTINUE (275) 19
KW_FN (276) 117
KW_MORPH (277)
KW_FORGE (278) 128
KW_AS (279) 62
KW_STRUCT (280) 122
KW_ENUM (281) 125
KW_CYCLIC (282) 23
KW_BIG_RATIONAL (283) 21
KW_COMPLEX (284) 22
KW_SYMMETRIC (285) 24
KW_ALTERNATING (286) 25
KW_DIHEDRAL (287) 26
KW_INV_MAT (288) 27
KW_BIGINT (289) 28
KW_MATRIX (290) 29
KW_POLYNOMIAL (291) 30
KW_VEC (292) 31
KW_BUF (293) 38
IDENT (294) 39 46 47 50 81 98 107 108 109 110 111 112 113 114 115 117
    121 122 123 124 125 126 127
PRIMITIVE_DTYPE (295) 37 38
LIT_INT (296) 23 24 25 26 27 29 55 104 113
LIT_FLOAT (297) 54 105
LIT_STR (298) 56
LIT_CHAR (299) 53 103
rel_op (300) 71
KW_TRUE (301) 57
KW_FALSE (302) 58
INCR (303) 84
DECR (304) 85
ARROW (305) 111 112 113 114 115
VARIANT (306) 50
SLICE (307) 88
AND (308) 72
OR (309) 73


Nonterminals, with rules where they appear

$accept (77)
    on left: 0
P (78)
    on left: 1 2 3 4 5, on right: 0 2 3 4 5
declarations (79)
    on left: 6 7, on right: 1 6
body (80)
    on left: 8, on right: 92 93 94 95 96 97 98 111 112 113 114 115
statements (81)
    on left: 9 10, on right: 8 9 101 103 104 105 118 128
statement (82)
    on left: 11 12 13 14 15 16 17 18 19 20, on right: 9
field_data_type (83)
    on left: 21 22, on right: 42
group_data_type (84)
    on left: 23 24 25 26 27, on right: 40
ring_data_type (85)
    on left: 28 29 30, on right: 41
space_data_type (86)
    on left: 31, on right: 43
declaration (87)
    on left: 32, on right: 6 11 97
decl_list (88)
    on left: 33 34, on right: 32 34
decl_item (89)
    on left: 35 36, on right: 33 34
type (90)
    on left: 37 38 39 40 41 42 43 44 45, on right: 27 29 30 31 44 62
    110 117 121 128 130 131
var (91)
    on left: 46 47 48 49 50, on right: 47 48 51 74 84 85 86
assignment (92)
    on left: 51 52, on right: 12 96
constant (93)
    on left: 53 54 55 56 57 58, on right: 75 89 90
expression (94)
    on left: 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
    77 78 79, on right: 36 49 51 52 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 80 82 88 91 95 96 97 101 102
return_stmt (95)
    on left: 80, on right: 14
call (96)
    on left: 81, on right: 13 78
pass_param_list (97)
    on left: 82 83, on right: 81 82
unary_operation (98)
    on left: 84 85, on right: 76 99
array_access (99)
    on left: 86, on right: 52 77
array_decl (100)
    on left: 87 88, on right: 79 86
array_list (101)
    on left: 89 90, on right: 87 89
conditional (102)
    on left: 91, on right: 15 93
if_body (103)
    on left: 92 93 94, on right: 91
loop_stmt (104)
    on left: 95 96 97 98, on right: 17
loop_mut (105)
    on left: 99 100, on right: 96 97
switch_case (106)
    on left: 101 102, on right: 16
sc_blocks (107)
    on left: 103 104 105 106, on right: 101 102 103 104 105
archetype_claim (108)
    on left: 107 108 109 110, on right: 20
additive_rule (109)
    on left: 111, on right: 107 110
mult_rule (110)
    on left: 112, on right: 108 110
identity_rule (111)
    on left: 113, on right: 107 108 110
negation_rule (112)
    on left: 114, on right: 107 110
inverse_rule (113)
    on left: 115, on right: 109
function (114)
    on left: 116, on right: 2
function_header (115)
    on left: 117, on right: 116
function_body (116)
    on left: 118, on right: 116
parameter_list (117)
    on left: 119 120, on right: 117 120 128
typ_var (118)
    on left: 121, on right: 35 36 119 120 124
struct (119)
    on left: 122, on right: 3
attr_list (120)
    on left: 123 124, on right: 122
enum (121)
    on left: 125, on right: 5
variant_list (122)
    on left: 126 127, on right: 125 127
forge (123)
    on left: 128, on right: 4
cart (124)
    on left: 129, on right: 45
typ_list (125)
    on left: 130 131, on right: 129 130
epsilon (126)
    on left: 132, on right: 7 10 83 100 106


state 0

    0 $accept: . P $end

    KW_LET  shift, and go to state 1

    $default  reduce using rule 132 (epsilon)

    P             go to state 2
    declarations  go to state 3
    declaration   go to state 4
    epsilon       go to state 5


state 1

   32 declaration: KW_LET . decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 7
    decl_item  go to state 8
    typ_var    go to state 9


state 2

    0 $accept: P . $end
    2 P: P . function
    3  | P . struct
    4  | P . forge
    5  | P . enum

    $end       shift, and go to state 10
    KW_FN      shift, and go to state 11
    KW_FORGE   shift, and go to state 12
    KW_STRUCT  shift, and go to state 13
    KW_ENUM    shift, and go to state 14

    function         go to state 15
    function_header  go to state 16
    struct           go to state 17
    enum             go to state 18
    forge            go to state 19


state 3

    1 P: declarations .

    $default  reduce using rule 1 (P)


state 4

    6 declarations: declaration . ';' declarations

    ';'  shift, and go to state 20


state 5

    7 declarations: epsilon .

    $default  reduce using rule 7 (declarations)


state 6

  121 typ_var: IDENT . ':' type

    ':'  shift, and go to state 21


state 7

   32 declaration: KW_LET decl_list .

    $default  reduce using rule 32 (declaration)


state 8

   33 decl_list: decl_item .
   34          | decl_item . ',' decl_list

    ','  shift, and go to state 22

    $default  reduce using rule 33 (decl_list)


state 9

   35 decl_item: typ_var .
   36          | typ_var . '=' expression

    '='  shift, and go to state 23

    $default  reduce using rule 35 (decl_item)


state 10

    0 $accept: P $end .

    $default  accept


state 11

  117 function_header: KW_FN . IDENT '(' parameter_list ')' ':' type

    IDENT  shift, and go to state 24


state 12

  128 forge: KW_FORGE . type '(' parameter_list '{' statements '}'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 45
    cart             go to state 46


state 13

  122 struct: KW_STRUCT . IDENT '{' attr_list '}'

    IDENT  shift, and go to state 47


state 14

  125 enum: KW_ENUM . IDENT '{' variant_list '}'

    IDENT  shift, and go to state 48


state 15

    2 P: P function .

    $default  reduce using rule 2 (P)


state 16

  116 function: function_header . '{' function_body '}'

    '{'  shift, and go to state 49


state 17

    3 P: P struct .

    $default  reduce using rule 3 (P)


state 18

    5 P: P enum .

    $default  reduce using rule 5 (P)


state 19

    4 P: P forge .

    $default  reduce using rule 4 (P)


state 20

    6 declarations: declaration ';' . declarations

    KW_LET  shift, and go to state 1

    $default  reduce using rule 132 (epsilon)

    declarations  go to state 50
    declaration   go to state 4
    epsilon       go to state 5


state 21

  121 typ_var: IDENT ':' . type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 51
    cart             go to state 46


state 22

   34 decl_list: decl_item ',' . decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 52
    decl_item  go to state 8
    typ_var    go to state 9


state 23

   36 decl_item: typ_var '=' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 67
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 24

  117 function_header: KW_FN IDENT . '(' parameter_list ')' ':' type

    '('  shift, and go to state 72


state 25

   23 group_data_type: KW_CYCLIC . '<' LIT_INT '>'

    '<'  shift, and go to state 73


state 26

   21 field_data_type: KW_BIG_RATIONAL .

    $default  reduce using rule 21 (field_data_type)


state 27

   22 field_data_type: KW_COMPLEX .

    $default  reduce using rule 22 (field_data_type)


state 28

   24 group_data_type: KW_SYMMETRIC . '<' LIT_INT '>'

    '<'  shift, and go to state 74


state 29

   25 group_data_type: KW_ALTERNATING . '<' LIT_INT '>'

    '<'  shift, and go to state 75


state 30

   26 group_data_type: KW_DIHEDRAL . '<' LIT_INT '>'

    '<'  shift, and go to state 76


state 31

   27 group_data_type: KW_INV_MAT . '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 77


state 32

   28 ring_data_type: KW_BIGINT .

    $default  reduce using rule 28 (ring_data_type)


state 33

   29 ring_data_type: KW_MATRIX . '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 78


state 34

   30 ring_data_type: KW_POLYNOMIAL . '<' type '>'

    '<'  shift, and go to state 79


state 35

   31 space_data_type: KW_VEC . '<' type '>'

    '<'  shift, and go to state 80


state 36

   38 type: KW_BUF . '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 81


state 37

   39 type: IDENT .

    $default  reduce using rule 39 (type)


state 38

   37 type: PRIMITIVE_DTYPE .

    $default  reduce using rule 37 (type)


state 39

   44 type: '&' . type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 82
    cart             go to state 46


state 40

  129 cart: '(' . typ_list ')'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 83
    cart             go to state 46
    typ_list         go to state 84


state 41

   42 type: field_data_type .

    $default  reduce using rule 42 (type)


state 42

   40 type: group_data_type .

    $default  reduce using rule 40 (type)


state 43

   41 type: ring_data_type .

    $default  reduce using rule 41 (type)


state 44

   43 type: space_data_type .

    $default  reduce using rule 43 (type)


state 45

  128 forge: KW_FORGE type . '(' parameter_list '{' statements '}'

    '('  shift, and go to state 85


state 46

   45 type: cart .

    $default  reduce using rule 45 (type)


state 47

  122 struct: KW_STRUCT IDENT . '{' attr_list '}'

    '{'  shift, and go to state 86


state 48

  125 enum: KW_ENUM IDENT . '{' variant_list '}'

    '{'  shift, and go to state 87


state 49

  116 function: function_header '{' . function_body '}'

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 96
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    function_body    go to state 108
    epsilon          go to state 109


state 50

    6 declarations: declaration ';' declarations .

    $default  reduce using rule 6 (declarations)


state 51

  121 typ_var: IDENT ':' type .

    $default  reduce using rule 121 (typ_var)


state 52

   34 decl_list: decl_item ',' decl_list .

    $default  reduce using rule 34 (decl_list)


state 53

   46 var: IDENT .
   50    | IDENT . VARIANT IDENT
   81 call: IDENT . '(' pass_param_list ')'

    VARIANT  shift, and go to state 110
    '('      shift, and go to state 111

    $default  reduce using rule 46 (var)


state 54

   55 constant: LIT_INT .

    $default  reduce using rule 55 (constant)


state 55

   54 constant: LIT_FLOAT .

    $default  reduce using rule 54 (constant)


state 56

   56 constant: LIT_STR .

    $default  reduce using rule 56 (constant)


state 57

   53 constant: LIT_CHAR .

    $default  reduce using rule 53 (constant)


state 58

   57 constant: KW_TRUE .

    $default  reduce using rule 57 (constant)


state 59

   58 constant: KW_FALSE .

    $default  reduce using rule 58 (constant)


state 60

   60 expression: '!' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 112
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 61

   48 var: '*' . var
   49    | '*' . '(' expression ')'

    IDENT  shift, and go to state 113
    '*'    shift, and go to state 61
    '('    shift, and go to state 114

    var  go to state 115


state 62

   61 expression: '-' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 116
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 63

   59 expression: '(' . expression ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 117
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 64

   87 array_decl: '[' . array_list ']'
   88           | '[' . expression SLICE expression ']'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 118
    expression       go to state 119
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    array_list       go to state 120


state 65

   47 var: var . '.' IDENT
   74 expression: var .
   84 unary_operation: var . INCR
   85                | var . DECR
   86 array_access: var . array_decl

    INCR  shift, and go to state 121
    DECR  shift, and go to state 122
    '.'   shift, and go to state 123
    '['   shift, and go to state 64

    $default  reduce using rule 74 (expression)

    array_decl  go to state 124


state 66

   75 expression: constant .

    $default  reduce using rule 75 (expression)


state 67

   36 decl_item: typ_var '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 36 (decl_item)


state 68

   78 expression: call .

    $default  reduce using rule 78 (expression)


state 69

   76 expression: unary_operation .

    $default  reduce using rule 76 (expression)


state 70

   77 expression: array_access .

    $default  reduce using rule 77 (expression)


state 71

   79 expression: array_decl .

    $default  reduce using rule 79 (expression)


state 72

  117 function_header: KW_FN IDENT '(' . parameter_list ')' ':' type

    IDENT  shift, and go to state 6

    parameter_list  go to state 137
    typ_var         go to state 138


state 73

   23 group_data_type: KW_CYCLIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 139


state 74

   24 group_data_type: KW_SYMMETRIC '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 140


state 75

   25 group_data_type: KW_ALTERNATING '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 141


state 76

   26 group_data_type: KW_DIHEDRAL '<' . LIT_INT '>'

    LIT_INT  shift, and go to state 142


state 77

   27 group_data_type: KW_INV_MAT '<' . LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 143


state 78

   29 ring_data_type: KW_MATRIX '<' . LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 144


state 79

   30 ring_data_type: KW_POLYNOMIAL '<' . type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 145
    cart             go to state 46


state 80

   31 space_data_type: KW_VEC '<' . type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 146
    cart             go to state 46


state 81

   38 type: KW_BUF '<' . PRIMITIVE_DTYPE '>'

    PRIMITIVE_DTYPE  shift, and go to state 147


state 82

   44 type: '&' type .

    $default  reduce using rule 44 (type)


state 83

  131 typ_list: type .

    $default  reduce using rule 131 (typ_list)


state 84

  129 cart: '(' typ_list . ')'
  130 typ_list: typ_list . ',' type

    ','  shift, and go to state 148
    ')'  shift, and go to state 149


state 85

  128 forge: KW_FORGE type '(' . parameter_list '{' statements '}'

    IDENT  shift, and go to state 6

    parameter_list  go to state 150
    typ_var         go to state 138


state 86

  122 struct: KW_STRUCT IDENT '{' . attr_list '}'

    IDENT  shift, and go to state 151

    typ_var    go to state 152
    attr_list  go to state 153


state 87

  125 enum: KW_ENUM IDENT '{' . variant_list '}'

    IDENT  shift, and go to state 154

    variant_list  go to state 155


state 88

  107 archetype_claim: KW_CLAIM . IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  108                | KW_CLAIM . IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  109                | KW_CLAIM . IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  110                | KW_CLAIM . IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    IDENT  shift, and go to state 156


state 89

   80 return_stmt: KW_RETURN . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 157
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 90

   91 conditional: KW_IF . '(' expression ')' if_body

    '('  shift, and go to state 158


state 91

   95 loop_stmt: KW_WHILE . '(' expression ')' body

    '('  shift, and go to state 159


state 92

   96 loop_stmt: KW_FOR . '(' assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR . '(' declaration ';' expression ';' loop_mut ')' body
   98          | KW_FOR . IDENT KW_IN IDENT body

    IDENT  shift, and go to state 160
    '('    shift, and go to state 161


state 93

  101 switch_case: KW_SWITCH . '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH . '(' expression ')' '{' sc_blocks '}'

    '('  shift, and go to state 162


state 94

   18 statement: KW_BREAK . ';'

    ';'  shift, and go to state 163


state 95

   19 statement: KW_CONTINUE . ';'

    ';'  shift, and go to state 164


state 96

  118 function_body: statements .

    $default  reduce using rule 118 (function_body)


state 97

    9 statements: statement . statements

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 165
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 98

   11 statement: declaration . ';'

    ';'  shift, and go to state 166


state 99

   47 var: var . '.' IDENT
   51 assignment: var . '=' expression
   86 array_access: var . array_decl

    '.'  shift, and go to state 123
    '='  shift, and go to state 167
    '['  shift, and go to state 64

    array_decl  go to state 124


state 100

   12 statement: assignment . ';'

    ';'  shift, and go to state 168


state 101

   14 statement: return_stmt . ';'

    ';'  shift, and go to state 169


state 102

   13 statement: call . ';'

    ';'  shift, and go to state 170


state 103

   52 assignment: array_access . '=' expression

    '='  shift, and go to state 171


state 104

   15 statement: conditional .

    $default  reduce using rule 15 (statement)


state 105

   17 statement: loop_stmt .

    $default  reduce using rule 17 (statement)


state 106

   16 statement: switch_case .

    $default  reduce using rule 16 (statement)


state 107

   20 statement: archetype_claim .

    $default  reduce using rule 20 (statement)


state 108

  116 function: function_header '{' function_body . '}'

    '}'  shift, and go to state 172


state 109

   10 statements: epsilon .

    $default  reduce using rule 10 (statements)


state 110

   50 var: IDENT VARIANT . IDENT

    IDENT  shift, and go to state 173


state 111

   81 call: IDENT '(' . pass_param_list ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    $default  reduce using rule 132 (epsilon)

    var              go to state 65
    constant         go to state 66
    expression       go to state 174
    call             go to state 68
    pass_param_list  go to state 175
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    epsilon          go to state 176


state 112

   60 expression: '!' expression .
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 60 (expression)


state 113

   46 var: IDENT .
   50    | IDENT . VARIANT IDENT

    VARIANT  shift, and go to state 110

    $default  reduce using rule 46 (var)


state 114

   49 var: '*' '(' . expression ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 177
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 115

   47 var: var . '.' IDENT
   48    | '*' var .

    '.'  shift, and go to state 123

    $default  reduce using rule 48 (var)


state 116

   61 expression: '-' expression .
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 61 (expression)


state 117

   59 expression: '(' expression . ')'
   62           | expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ')'     shift, and go to state 178


state 118

   75 expression: constant .
   89 array_list: constant . ',' array_list
   90           | constant .

    ','  shift, and go to state 179

    ']'       reduce using rule 90 (array_list)
    $default  reduce using rule 75 (expression)


state 119

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   88 array_decl: '[' expression . SLICE expression ']'

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    SLICE   shift, and go to state 180
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136


state 120

   87 array_decl: '[' array_list . ']'

    ']'  shift, and go to state 181


state 121

   84 unary_operation: var INCR .

    $default  reduce using rule 84 (unary_operation)


state 122

   85 unary_operation: var DECR .

    $default  reduce using rule 85 (unary_operation)


state 123

   47 var: var '.' . IDENT

    IDENT  shift, and go to state 182


state 124

   86 array_access: var array_decl .

    $default  reduce using rule 86 (array_access)


state 125

   62 expression: expression KW_AS . type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 183
    cart             go to state 46


state 126

   71 expression: expression rel_op . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 184
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 127

   72 expression: expression AND . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 185
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 128

   73 expression: expression OR . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 186
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 129

   63 expression: expression '@' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 187
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 130

   64 expression: expression '*' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 188
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 131

   65 expression: expression '/' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 189
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 132

   66 expression: expression '%' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 190
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 133

   67 expression: expression '+' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 191
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 134

   68 expression: expression '-' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 192
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 135

   69 expression: expression '>' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 193
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 136

   70 expression: expression '<' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 194
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 137

  117 function_header: KW_FN IDENT '(' parameter_list . ')' ':' type
  120 parameter_list: parameter_list . ',' typ_var

    ','  shift, and go to state 195
    ')'  shift, and go to state 196


state 138

  119 parameter_list: typ_var .

    $default  reduce using rule 119 (parameter_list)


state 139

   23 group_data_type: KW_CYCLIC '<' LIT_INT . '>'

    '>'  shift, and go to state 197


state 140

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT . '>'

    '>'  shift, and go to state 198


state 141

   25 group_data_type: KW_ALTERNATING '<' LIT_INT . '>'

    '>'  shift, and go to state 199


state 142

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT . '>'

    '>'  shift, and go to state 200


state 143

   27 group_data_type: KW_INV_MAT '<' LIT_INT . ',' type '>'

    ','  shift, and go to state 201


state 144

   29 ring_data_type: KW_MATRIX '<' LIT_INT . ',' type '>'

    ','  shift, and go to state 202


state 145

   30 ring_data_type: KW_POLYNOMIAL '<' type . '>'

    '>'  shift, and go to state 203


state 146

   31 space_data_type: KW_VEC '<' type . '>'

    '>'  shift, and go to state 204


state 147

   38 type: KW_BUF '<' PRIMITIVE_DTYPE . '>'

    '>'  shift, and go to state 205


state 148

  130 typ_list: typ_list ',' . type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 206
    cart             go to state 46


state 149

  129 cart: '(' typ_list ')' .

    $default  reduce using rule 129 (cart)


state 150

  120 parameter_list: parameter_list . ',' typ_var
  128 forge: KW_FORGE type '(' parameter_list . '{' statements '}'

    '{'  shift, and go to state 207
    ','  shift, and go to state 195


state 151

  121 typ_var: IDENT . ':' type
  123 attr_list: IDENT .

    ':'  shift, and go to state 21

    $default  reduce using rule 123 (attr_list)


state 152

  124 attr_list: typ_var . ',' IDENT

    ','  shift, and go to state 208


state 153

  122 struct: KW_STRUCT IDENT '{' attr_list . '}'

    '}'  shift, and go to state 209


state 154

  126 variant_list: IDENT .

    $default  reduce using rule 126 (variant_list)


state 155

  125 enum: KW_ENUM IDENT '{' variant_list . '}'
  127 variant_list: variant_list . ',' IDENT

    '}'  shift, and go to state 210
    ','  shift, and go to state 211


state 156

  107 archetype_claim: KW_CLAIM IDENT . KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  108                | KW_CLAIM IDENT . KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  109                | KW_CLAIM IDENT . KW_IS KW_FIELD '{' inverse_rule '}' ';'
  110                | KW_CLAIM IDENT . KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_IS  shift, and go to state 212


state 157

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   80 return_stmt: KW_RETURN expression .

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 80 (return_stmt)


state 158

   91 conditional: KW_IF '(' . expression ')' if_body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 213
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 159

   95 loop_stmt: KW_WHILE '(' . expression ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 214
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 160

   98 loop_stmt: KW_FOR IDENT . KW_IN IDENT body

    KW_IN  shift, and go to state 215


state 161

   96 loop_stmt: KW_FOR '(' . assignment ';' expression ';' loop_mut ')' body
   97          | KW_FOR '(' . declaration ';' expression ';' loop_mut ')' body

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 113
    '*'     shift, and go to state 61

    declaration   go to state 216
    var           go to state 99
    assignment    go to state 217
    array_access  go to state 103


state 162

  101 switch_case: KW_SWITCH '(' . expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' . expression ')' '{' sc_blocks '}'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 218
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 163

   18 statement: KW_BREAK ';' .

    $default  reduce using rule 18 (statement)


state 164

   19 statement: KW_CONTINUE ';' .

    $default  reduce using rule 19 (statement)


state 165

    9 statements: statement statements .

    $default  reduce using rule 9 (statements)


state 166

   11 statement: declaration ';' .

    $default  reduce using rule 11 (statement)


state 167

   51 assignment: var '=' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 219
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 168

   12 statement: assignment ';' .

    $default  reduce using rule 12 (statement)


state 169

   14 statement: return_stmt ';' .

    $default  reduce using rule 14 (statement)


state 170

   13 statement: call ';' .

    $default  reduce using rule 13 (statement)


state 171

   52 assignment: array_access '=' . expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 220
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 172

  116 function: function_header '{' function_body '}' .

    $default  reduce using rule 116 (function)


state 173

   50 var: IDENT VARIANT IDENT .

    $default  reduce using rule 50 (var)


state 174

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   82 pass_param_list: expression . ',' pass_param_list

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ','     shift, and go to state 221


state 175

   81 call: IDENT '(' pass_param_list . ')'

    ')'  shift, and go to state 222


state 176

   83 pass_param_list: epsilon .

    $default  reduce using rule 83 (pass_param_list)


state 177

   49 var: '*' '(' expression . ')'
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ')'     shift, and go to state 223


state 178

   59 expression: '(' expression ')' .

    $default  reduce using rule 59 (expression)


state 179

   89 array_list: constant ',' . array_list

    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59

    constant    go to state 224
    array_list  go to state 225


state 180

   88 array_decl: '[' expression SLICE . expression ']'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 226
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 181

   87 array_decl: '[' array_list ']' .

    $default  reduce using rule 87 (array_decl)


state 182

   47 var: var '.' IDENT .

    $default  reduce using rule 47 (var)


state 183

   62 expression: expression KW_AS type .

    $default  reduce using rule 62 (expression)


state 184

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   71           | expression rel_op expression .
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    $default  reduce using rule 71 (expression)


state 185

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   72           | expression AND expression .
   73           | expression . OR expression

    OR  shift, and go to state 128

    $default  reduce using rule 72 (expression)


state 186

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   73           | expression OR expression .

    $default  reduce using rule 73 (expression)


state 187

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   63           | expression '@' expression .
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 63 (expression)


state 188

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   64           | expression '*' expression .
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 64 (expression)


state 189

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   65           | expression '/' expression .
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 65 (expression)


state 190

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   66           | expression '%' expression .
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 66 (expression)


state 191

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   67           | expression '+' expression .
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 67 (expression)


state 192

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   68           | expression '-' expression .
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 68 (expression)


state 193

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   69           | expression '>' expression .
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    $default  reduce using rule 69 (expression)


state 194

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   70           | expression '<' expression .
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    AND  shift, and go to state 127
    OR   shift, and go to state 128

    $default  reduce using rule 70 (expression)


state 195

  120 parameter_list: parameter_list ',' . typ_var

    IDENT  shift, and go to state 6

    typ_var  go to state 227


state 196

  117 function_header: KW_FN IDENT '(' parameter_list ')' . ':' type

    ':'  shift, and go to state 228


state 197

   23 group_data_type: KW_CYCLIC '<' LIT_INT '>' .

    $default  reduce using rule 23 (group_data_type)


state 198

   24 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' .

    $default  reduce using rule 24 (group_data_type)


state 199

   25 group_data_type: KW_ALTERNATING '<' LIT_INT '>' .

    $default  reduce using rule 25 (group_data_type)


state 200

   26 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' .

    $default  reduce using rule 26 (group_data_type)


state 201

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' . type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 229
    cart             go to state 46


state 202

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' . type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 230
    cart             go to state 46


state 203

   30 ring_data_type: KW_POLYNOMIAL '<' type '>' .

    $default  reduce using rule 30 (ring_data_type)


state 204

   31 space_data_type: KW_VEC '<' type '>' .

    $default  reduce using rule 31 (space_data_type)


state 205

   38 type: KW_BUF '<' PRIMITIVE_DTYPE '>' .

    $default  reduce using rule 38 (type)


state 206

  130 typ_list: typ_list ',' type .

    $default  reduce using rule 130 (typ_list)


state 207

  128 forge: KW_FORGE type '(' parameter_list '{' . statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 231
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 208

  124 attr_list: typ_var ',' . IDENT

    IDENT  shift, and go to state 232


state 209

  122 struct: KW_STRUCT IDENT '{' attr_list '}' .

    $default  reduce using rule 122 (struct)


state 210

  125 enum: KW_ENUM IDENT '{' variant_list '}' .

    $default  reduce using rule 125 (enum)


state 211

  127 variant_list: variant_list ',' . IDENT

    IDENT  shift, and go to state 233


state 212

  107 archetype_claim: KW_CLAIM IDENT KW_IS . KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  108                | KW_CLAIM IDENT KW_IS . KW_RING '{' mult_rule identity_rule '}' ';'
  109                | KW_CLAIM IDENT KW_IS . KW_FIELD '{' inverse_rule '}' ';'
  110                | KW_CLAIM IDENT KW_IS . KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_GROUP  shift, and go to state 234
    KW_RING   shift, and go to state 235
    KW_FIELD  shift, and go to state 236
    KW_SPACE  shift, and go to state 237


state 213

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   91 conditional: KW_IF '(' expression . ')' if_body

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ')'     shift, and go to state 238


state 214

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   95 loop_stmt: KW_WHILE '(' expression . ')' body

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ')'     shift, and go to state 239


state 215

   98 loop_stmt: KW_FOR IDENT KW_IN . IDENT body

    IDENT  shift, and go to state 240


state 216

   97 loop_stmt: KW_FOR '(' declaration . ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 241


state 217

   96 loop_stmt: KW_FOR '(' assignment . ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 242


state 218

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
  101 switch_case: KW_SWITCH '(' expression . ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression . ')' '{' sc_blocks '}'

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ')'     shift, and go to state 243


state 219

   51 assignment: var '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 51 (assignment)


state 220

   52 assignment: array_access '=' expression .
   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136

    $default  reduce using rule 52 (assignment)


state 221

   82 pass_param_list: expression ',' . pass_param_list

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    $default  reduce using rule 132 (epsilon)

    var              go to state 65
    constant         go to state 66
    expression       go to state 174
    call             go to state 68
    pass_param_list  go to state 244
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    epsilon          go to state 176


state 222

   81 call: IDENT '(' pass_param_list ')' .

    $default  reduce using rule 81 (call)


state 223

   49 var: '*' '(' expression ')' .

    $default  reduce using rule 49 (var)


state 224

   89 array_list: constant . ',' array_list
   90           | constant .

    ','  shift, and go to state 179

    $default  reduce using rule 90 (array_list)


state 225

   89 array_list: constant ',' array_list .

    $default  reduce using rule 89 (array_list)


state 226

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   88 array_decl: '[' expression SLICE expression . ']'

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ']'     shift, and go to state 245


state 227

  120 parameter_list: parameter_list ',' typ_var .

    $default  reduce using rule 120 (parameter_list)


state 228

  117 function_header: KW_FN IDENT '(' parameter_list ')' ':' . type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 246
    cart             go to state 46


state 229

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' type . '>'

    '>'  shift, and go to state 247


state 230

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' type . '>'

    '>'  shift, and go to state 248


state 231

  128 forge: KW_FORGE type '(' parameter_list '{' statements . '}'

    '}'  shift, and go to state 249


state 232

  124 attr_list: typ_var ',' IDENT .

    $default  reduce using rule 124 (attr_list)


state 233

  127 variant_list: variant_list ',' IDENT .

    $default  reduce using rule 127 (variant_list)


state 234

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP . '{' additive_rule identity_rule negation_rule '}' ';'

    '{'  shift, and go to state 250


state 235

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING . '{' mult_rule identity_rule '}' ';'

    '{'  shift, and go to state 251


state 236

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD . '{' inverse_rule '}' ';'

    '{'  shift, and go to state 252


state 237

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE . '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '{'  shift, and go to state 253


state 238

   91 conditional: KW_IF '(' expression ')' . if_body

    '{'  shift, and go to state 254

    body     go to state 255
    if_body  go to state 256


state 239

   95 loop_stmt: KW_WHILE '(' expression ')' . body

    '{'  shift, and go to state 254

    body  go to state 257


state 240

   98 loop_stmt: KW_FOR IDENT KW_IN IDENT . body

    '{'  shift, and go to state 254

    body  go to state 258


state 241

   97 loop_stmt: KW_FOR '(' declaration ';' . expression ';' loop_mut ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 259
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 242

   96 loop_stmt: KW_FOR '(' assignment ';' . expression ';' loop_mut ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 260
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


state 243

  101 switch_case: KW_SWITCH '(' expression ')' . '{' sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' . '{' sc_blocks '}'

    '{'  shift, and go to state 261


state 244

   82 pass_param_list: expression ',' pass_param_list .

    $default  reduce using rule 82 (pass_param_list)


state 245

   88 array_decl: '[' expression SLICE expression ']' .

    $default  reduce using rule 88 (array_decl)


state 246

  117 function_header: KW_FN IDENT '(' parameter_list ')' ':' type .

    $default  reduce using rule 117 (function_header)


state 247

   27 group_data_type: KW_INV_MAT '<' LIT_INT ',' type '>' .

    $default  reduce using rule 27 (group_data_type)


state 248

   29 ring_data_type: KW_MATRIX '<' LIT_INT ',' type '>' .

    $default  reduce using rule 29 (ring_data_type)


state 249

  128 forge: KW_FORGE type '(' parameter_list '{' statements '}' .

    $default  reduce using rule 128 (forge)


state 250

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' . additive_rule identity_rule negation_rule '}' ';'

    '('  shift, and go to state 262

    additive_rule  go to state 263


state 251

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' . mult_rule identity_rule '}' ';'

    '('  shift, and go to state 264

    mult_rule  go to state 265


state 252

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' . inverse_rule '}' ';'

    '('  shift, and go to state 266

    inverse_rule  go to state 267


state 253

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' . KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_FIELD  shift, and go to state 268


state 254

    8 body: '{' . statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 269
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 255

   92 if_body: body .
   93        | body . KW_ELSE conditional
   94        | body . KW_ELSE body

    KW_ELSE  shift, and go to state 270

    $default  reduce using rule 92 (if_body)


state 256

   91 conditional: KW_IF '(' expression ')' if_body .

    $default  reduce using rule 91 (conditional)


state 257

   95 loop_stmt: KW_WHILE '(' expression ')' body .

    $default  reduce using rule 95 (loop_stmt)


state 258

   98 loop_stmt: KW_FOR IDENT KW_IN IDENT body .

    $default  reduce using rule 98 (loop_stmt)


state 259

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   97 loop_stmt: KW_FOR '(' declaration ';' expression . ';' loop_mut ')' body

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ';'     shift, and go to state 271


state 260

   62 expression: expression . KW_AS type
   63           | expression . '@' expression
   64           | expression . '*' expression
   65           | expression . '/' expression
   66           | expression . '%' expression
   67           | expression . '+' expression
   68           | expression . '-' expression
   69           | expression . '>' expression
   70           | expression . '<' expression
   71           | expression . rel_op expression
   72           | expression . AND expression
   73           | expression . OR expression
   96 loop_stmt: KW_FOR '(' assignment ';' expression . ';' loop_mut ')' body

    KW_AS   shift, and go to state 125
    rel_op  shift, and go to state 126
    AND     shift, and go to state 127
    OR      shift, and go to state 128
    '@'     shift, and go to state 129
    '*'     shift, and go to state 130
    '/'     shift, and go to state 131
    '%'     shift, and go to state 132
    '+'     shift, and go to state 133
    '-'     shift, and go to state 134
    '>'     shift, and go to state 135
    '<'     shift, and go to state 136
    ';'     shift, and go to state 272


state 261

  101 switch_case: KW_SWITCH '(' expression ')' '{' . sc_blocks KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' . sc_blocks '}'

    KW_CASE  shift, and go to state 273

    $default  reduce using rule 132 (epsilon)

    sc_blocks  go to state 274
    epsilon    go to state 275


state 262

  111 additive_rule: '(' . IDENT '=' IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 276


state 263

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule . identity_rule negation_rule '}' ';'

    '('  shift, and go to state 277

    identity_rule  go to state 278


state 264

  112 mult_rule: '(' . IDENT '=' IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 279


state 265

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule . identity_rule '}' ';'

    '('  shift, and go to state 277

    identity_rule  go to state 280


state 266

  115 inverse_rule: '(' . IDENT '=' '~' IDENT ')' ARROW body

    IDENT  shift, and go to state 281


state 267

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule . '}' ';'

    '}'  shift, and go to state 282


state 268

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD . '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '='  shift, and go to state 283


state 269

    8 body: '{' statements . '}'

    '}'  shift, and go to state 284


state 270

   93 if_body: body KW_ELSE . conditional
   94        | body KW_ELSE . body

    KW_IF  shift, and go to state 90
    '{'    shift, and go to state 254

    body         go to state 285
    conditional  go to state 286


state 271

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' . loop_mut ')' body

    IDENT  shift, and go to state 113
    '*'    shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    var              go to state 287
    unary_operation  go to state 288
    loop_mut         go to state 289
    epsilon          go to state 290


state 272

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' . loop_mut ')' body

    IDENT  shift, and go to state 113
    '*'    shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    var              go to state 287
    unary_operation  go to state 288
    loop_mut         go to state 291
    epsilon          go to state 290


state 273

  103 sc_blocks: KW_CASE . LIT_CHAR ':' statements sc_blocks
  104          | KW_CASE . LIT_INT ':' statements sc_blocks
  105          | KW_CASE . LIT_FLOAT ':' statements sc_blocks

    LIT_INT    shift, and go to state 292
    LIT_FLOAT  shift, and go to state 293
    LIT_CHAR   shift, and go to state 294


state 274

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks . KW_DEFAULT ':' statements '}'
  102            | KW_SWITCH '(' expression ')' '{' sc_blocks . '}'

    KW_DEFAULT  shift, and go to state 295
    '}'         shift, and go to state 296


state 275

  106 sc_blocks: epsilon .

    $default  reduce using rule 106 (sc_blocks)


state 276

  111 additive_rule: '(' IDENT . '=' IDENT '+' IDENT ')' ARROW body

    '='  shift, and go to state 297


state 277

  113 identity_rule: '(' . IDENT '=' LIT_INT ')' ARROW body

    IDENT  shift, and go to state 298


state 278

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule . negation_rule '}' ';'

    '('  shift, and go to state 299

    negation_rule  go to state 300


state 279

  112 mult_rule: '(' IDENT . '=' IDENT '*' IDENT ')' ARROW body

    '='  shift, and go to state 301


state 280

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule . '}' ';'

    '}'  shift, and go to state 302


state 281

  115 inverse_rule: '(' IDENT . '=' '~' IDENT ')' ARROW body

    '='  shift, and go to state 303


state 282

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' . ';'

    ';'  shift, and go to state 304


state 283

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' . '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 305


state 284

    8 body: '{' statements '}' .

    $default  reduce using rule 8 (body)


state 285

   94 if_body: body KW_ELSE body .

    $default  reduce using rule 94 (if_body)


state 286

   93 if_body: body KW_ELSE conditional .

    $default  reduce using rule 93 (if_body)


state 287

   47 var: var . '.' IDENT
   84 unary_operation: var . INCR
   85                | var . DECR

    INCR  shift, and go to state 121
    DECR  shift, and go to state 122
    '.'   shift, and go to state 123


state 288

   99 loop_mut: unary_operation .

    $default  reduce using rule 99 (loop_mut)


state 289

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut . ')' body

    ')'  shift, and go to state 306


state 290

  100 loop_mut: epsilon .

    $default  reduce using rule 100 (loop_mut)


state 291

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut . ')' body

    ')'  shift, and go to state 307


state 292

  104 sc_blocks: KW_CASE LIT_INT . ':' statements sc_blocks

    ':'  shift, and go to state 308


state 293

  105 sc_blocks: KW_CASE LIT_FLOAT . ':' statements sc_blocks

    ':'  shift, and go to state 309


state 294

  103 sc_blocks: KW_CASE LIT_CHAR . ':' statements sc_blocks

    ':'  shift, and go to state 310


state 295

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT . ':' statements '}'

    ':'  shift, and go to state 311


state 296

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks '}' .

    $default  reduce using rule 102 (switch_case)


state 297

  111 additive_rule: '(' IDENT '=' . IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 312


state 298

  113 identity_rule: '(' IDENT . '=' LIT_INT ')' ARROW body

    '='  shift, and go to state 313


state 299

  114 negation_rule: '(' . IDENT '=' '-' IDENT ')' ARROW body

    IDENT  shift, and go to state 314


state 300

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule . '}' ';'

    '}'  shift, and go to state 315


state 301

  112 mult_rule: '(' IDENT '=' . IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 316


state 302

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' . ';'

    ';'  shift, and go to state 317


state 303

  115 inverse_rule: '(' IDENT '=' . '~' IDENT ')' ARROW body

    '~'  shift, and go to state 318


state 304

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';' .

    $default  reduce using rule 109 (archetype_claim)


state 305

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' . type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '&'              shift, and go to state 39
    '('              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 319
    cart             go to state 46


state 306

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' . body

    '{'  shift, and go to state 254

    body  go to state 320


state 307

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' . body

    '{'  shift, and go to state 254

    body  go to state 321


state 308

  104 sc_blocks: KW_CASE LIT_INT ':' . statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 322
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 309

  105 sc_blocks: KW_CASE LIT_FLOAT ':' . statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 323
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 310

  103 sc_blocks: KW_CASE LIT_CHAR ':' . statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 324
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 311

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' . statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 89
    KW_IF        shift, and go to state 90
    KW_WHILE     shift, and go to state 91
    KW_FOR       shift, and go to state 92
    KW_SWITCH    shift, and go to state 93
    KW_BREAK     shift, and go to state 94
    KW_CONTINUE  shift, and go to state 95
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 132 (epsilon)

    statements       go to state 325
    statement        go to state 97
    declaration      go to state 98
    var              go to state 99
    assignment       go to state 100
    return_stmt      go to state 101
    call             go to state 102
    array_access     go to state 103
    conditional      go to state 104
    loop_stmt        go to state 105
    switch_case      go to state 106
    archetype_claim  go to state 107
    epsilon          go to state 109


state 312

  111 additive_rule: '(' IDENT '=' IDENT . '+' IDENT ')' ARROW body

    '+'  shift, and go to state 326


state 313

  113 identity_rule: '(' IDENT '=' . LIT_INT ')' ARROW body

    LIT_INT  shift, and go to state 327


state 314

  114 negation_rule: '(' IDENT . '=' '-' IDENT ')' ARROW body

    '='  shift, and go to state 328


state 315

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' . ';'

    ';'  shift, and go to state 329


state 316

  112 mult_rule: '(' IDENT '=' IDENT . '*' IDENT ')' ARROW body

    '*'  shift, and go to state 330


state 317

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';' .

    $default  reduce using rule 108 (archetype_claim)


state 318

  115 inverse_rule: '(' IDENT '=' '~' . IDENT ')' ARROW body

    IDENT  shift, and go to state 331


state 319

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type . ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ')'  shift, and go to state 332


state 320

   97 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' body .

    $default  reduce using rule 97 (loop_stmt)


state 321

   96 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' body .

    $default  reduce using rule 96 (loop_stmt)


state 322

  104 sc_blocks: KW_CASE LIT_INT ':' statements . sc_blocks

    KW_CASE  shift, and go to state 273

    $default  reduce using rule 132 (epsilon)

    sc_blocks  go to state 333
    epsilon    go to state 275


state 323

  105 sc_blocks: KW_CASE LIT_FLOAT ':' statements . sc_blocks

    KW_CASE  shift, and go to state 273

    $default  reduce using rule 132 (epsilon)

    sc_blocks  go to state 334
    epsilon    go to state 275


state 324

  103 sc_blocks: KW_CASE LIT_CHAR ':' statements . sc_blocks

    KW_CASE  shift, and go to state 273

    $default  reduce using rule 132 (epsilon)

    sc_blocks  go to state 335
    epsilon    go to state 275


state 325

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements . '}'

    '}'  shift, and go to state 336


state 326

  111 additive_rule: '(' IDENT '=' IDENT '+' . IDENT ')' ARROW body

    IDENT  shift, and go to state 337


state 327

  113 identity_rule: '(' IDENT '=' LIT_INT . ')' ARROW body

    ')'  shift, and go to state 338


state 328

  114 negation_rule: '(' IDENT '=' . '-' IDENT ')' ARROW body

    '-'  shift, and go to state 339


state 329

  107 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';' .

    $default  reduce using rule 107 (archetype_claim)


state 330

  112 mult_rule: '(' IDENT '=' IDENT '*' . IDENT ')' ARROW body

    IDENT  shift, and go to state 340


state 331

  115 inverse_rule: '(' IDENT '=' '~' IDENT . ')' ARROW body

    ')'  shift, and go to state 341


state 332

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' . ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ';'  shift, and go to state 342


state 333

  104 sc_blocks: KW_CASE LIT_INT ':' statements sc_blocks .

    $default  reduce using rule 104 (sc_blocks)


state 334

  105 sc_blocks: KW_CASE LIT_FLOAT ':' statements sc_blocks .

    $default  reduce using rule 105 (sc_blocks)


state 335

  103 sc_blocks: KW_CASE LIT_CHAR ':' statements sc_blocks .

    $default  reduce using rule 103 (sc_blocks)


state 336

  101 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}' .

    $default  reduce using rule 101 (switch_case)


state 337

  111 additive_rule: '(' IDENT '=' IDENT '+' IDENT . ')' ARROW body

    ')'  shift, and go to state 343


state 338

  113 identity_rule: '(' IDENT '=' LIT_INT ')' . ARROW body

    ARROW  shift, and go to state 344


state 339

  114 negation_rule: '(' IDENT '=' '-' . IDENT ')' ARROW body

    IDENT  shift, and go to state 345


state 340

  112 mult_rule: '(' IDENT '=' IDENT '*' IDENT . ')' ARROW body

    ')'  shift, and go to state 346


state 341

  115 inverse_rule: '(' IDENT '=' '~' IDENT ')' . ARROW body

    ARROW  shift, and go to state 347


state 342

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' . additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 262

    additive_rule  go to state 348


state 343

  111 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' . ARROW body

    ARROW  shift, and go to state 349


state 344

  113 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW . body

    '{'  shift, and go to state 254

    body  go to state 350


state 345

  114 negation_rule: '(' IDENT '=' '-' IDENT . ')' ARROW body

    ')'  shift, and go to state 351


state 346

  112 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' . ARROW body

    ARROW  shift, and go to state 352


state 347

  115 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW . body

    '{'  shift, and go to state 254

    body  go to state 353


state 348

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule . negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 299

    negation_rule  go to state 354


state 349

  111 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW . body

    '{'  shift, and go to state 254

    body  go to state 355


state 350

  113 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body .

    $default  reduce using rule 113 (identity_rule)


state 351

  114 negation_rule: '(' IDENT '=' '-' IDENT ')' . ARROW body

    ARROW  shift, and go to state 356


state 352

  112 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW . body

    '{'  shift, and go to state 254

    body  go to state 357


state 353

  115 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body .

    $default  reduce using rule 115 (inverse_rule)


state 354

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule . identity_rule mult_rule '}' ';'

    '('  shift, and go to state 277

    identity_rule  go to state 358


state 355

  111 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body .

    $default  reduce using rule 111 (additive_rule)


state 356

  114 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW . body

    '{'  shift, and go to state 254

    body  go to state 359


state 357

  112 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body .

    $default  reduce using rule 112 (mult_rule)


state 358

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule . mult_rule '}' ';'

    '('  shift, and go to state 264

    mult_rule  go to state 360


state 359

  114 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body .

    $default  reduce using rule 114 (negation_rule)


state 360

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule . '}' ';'

    '}'  shift, and go to state 361


state 361

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' . ';'

    ';'  shift, and go to state 362


state 362

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';' .

    $default  reduce using rule 110 (archetype_claim)
