Terminals unused in grammar

    KW_MORPH


Grammar

    0 $accept: P $end

    1 P: declarations
    2  | P function
    3  | P struct
    4  | P forge
    5  | P enum

    6 declarations: declaration ';' declarations
    7             | epsilon

    8 body: '{' statements '}'

    9 statements: statement statements
   10           | epsilon

   11 statement: declaration ';'
   12          | assignment ';'
   13          | call ';'
   14          | return_stmt ';'
   15          | conditional
   16          | switch_case
   17          | loop_stmt
   18          | KW_PRINT '(' pass_param_list ')' ';'
   19          | KW_BREAK ';'
   20          | KW_CONTINUE ';'
   21          | archetype_claim

   22 field_data_type: KW_BIG_RATIONAL
   23                | KW_COMPLEX

   24 group_data_type: KW_CYCLIC '<' LIT_INT '>'
   25                | KW_SYMMETRIC '<' LIT_INT '>'
   26                | KW_ALTERNATING '<' LIT_INT '>'
   27                | KW_DIHEDRAL '<' LIT_INT '>'
   28                | KW_INV_MAT '<' LIT_INT ',' type '>'

   29 ring_data_type: KW_BIGINT
   30               | KW_MATRIX '<' LIT_INT ',' type '>'
   31               | KW_POLYNOMIAL '<' type '>'

   32 space_data_type: KW_VEC '<' type '>'

   33 declaration: KW_LET decl_list

   34 decl_list: decl_item
   35          | decl_item ',' decl_list

   36 decl_item: typ_var
   37          | typ_var '=' expression

   38 type: PRIMITIVE_DTYPE
   39     | KW_BUF '<' PRIMITIVE_DTYPE '>'
   40     | IDENT
   41     | group_data_type
   42     | ring_data_type
   43     | field_data_type
   44     | space_data_type
   45     | '&' type
   46     | cart

   47 var: IDENT
   48    | var '.' IDENT
   49    | '*' var
   50    | '*' '(' expression ')'
   51    | IDENT VARIANT IDENT

   52 assignment: var '=' expression
   53           | array_access '=' expression

   54 constant: LIT_CHAR
   55         | LIT_FLOAT
   56         | LIT_INT
   57         | LIT_STR
   58         | KW_TRUE
   59         | KW_FALSE

   60 expression: '(' expression ')'
   61           | '!' expression
   62           | '-' expression
   63           | expression KW_AS type
   64           | expression '@' expression
   65           | expression '*' expression
   66           | expression '/' expression
   67           | expression '%' expression
   68           | expression '+' expression
   69           | expression '-' expression
   70           | expression '>' expression
   71           | expression '<' expression
   72           | expression rel_op expression
   73           | expression AND expression
   74           | expression OR expression
   75           | var
   76           | constant
   77           | unary_operation
   78           | array_access
   79           | call
   80           | array_decl

   81 return_stmt: KW_RETURN expression

   82 call: IDENT '(' pass_param_list ')'

   83 pass_param_list: expression ',' pass_param_list
   84                | epsilon

   85 unary_operation: var INCR
   86                | var DECR

   87 array_access: var array_decl

   88 array_decl: '[' array_list ']'
   89           | '[' expression SLICE expression ']'

   90 array_list: constant ',' array_list
   91           | constant

   92 conditional: KW_IF '(' expression ')' if_body

   93 if_body: body
   94        | body KW_ELSE conditional
   95        | body KW_ELSE body

   96 loop_stmt: KW_WHILE '(' expression ')' body
   97          | KW_FOR '(' assignment ';' expression ';' loop_mut ')' body
   98          | KW_FOR '(' declaration ';' expression ';' loop_mut ')' body
   99          | KW_FOR IDENT KW_IN IDENT body

  100 loop_mut: unary_operation
  101         | epsilon

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' expression ')' '{' sc_blocks '}'

  104 sc_blocks: KW_CASE LIT_CHAR ':' statements sc_blocks
  105          | KW_CASE LIT_INT ':' statements sc_blocks
  106          | KW_CASE LIT_FLOAT ':' statements sc_blocks
  107          | epsilon

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  109                | KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  110                | KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  111                | KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

  112 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body

  113 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body

  114 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body

  115 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body

  116 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body

  117 function: function_header '{' function_body '}'

  118 function_header: KW_FN IDENT '(' parameter_list ')' ':' type

  119 function_body: statements

  120 parameter_list: typ_var
  121               | parameter_list ',' typ_var

  122 typ_var: IDENT ':' type

  123 struct: KW_STRUCT IDENT '{' attr_list '}'

  124 attr_list: IDENT
  125          | typ_var ',' IDENT

  126 enum: KW_ENUM IDENT '{' variant_list '}'

  127 variant_list: IDENT
  128             | variant_list ',' IDENT

  129 forge: KW_FORGE type '(' parameter_list '{' statements '}'

  130 cart: '(' typ_list ')'

  131 typ_list: typ_list ',' type
  132         | type

  133 epsilon: Îµ


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 61
    '%' (37) 67
    '&' (38) 45
    '(' (40) 18 50 60 82 92 96 97 98 102 103 111 112 113 114 115 116 118 129 130
    ')' (41) 18 50 60 82 92 96 97 98 102 103 111 112 113 114 115 116 118 130
    '*' (42) 49 50 65 113
    '+' (43) 68 112
    ',' (44) 28 30 35 83 90 121 125 128 131
    '-' (45) 62 69 115
    '.' (46) 48
    '/' (47) 66
    ':' (58) 102 104 105 106 118 122
    ';' (59) 6 11 12 13 14 18 19 20 97 98 108 109 110 111
    '<' (60) 24 25 26 27 28 30 31 32 39 71
    '=' (61) 37 52 53 111 112 113 114 115 116
    '>' (62) 24 25 26 27 28 30 31 32 39 70
    '@' (64) 64
    '[' (91) 88 89
    ']' (93) 88 89
    '{' (123) 8 102 103 108 109 110 111 117 123 126 129
    '}' (125) 8 102 103 108 109 110 111 117 123 126 129
    '~' (126) 116
    error (256)
    KW_CLAIM (258) 108 109 110 111
    KW_IS (259) 108 109 110 111
    KW_GROUP (260) 108
    KW_RING (261) 109
    KW_FIELD (262) 110 111
    KW_SPACE (263) 111
    KW_PRINT (264) 18
    KW_LET (265) 33
    KW_RETURN (266) 81
    KW_IF (267) 92
    KW_ELSE (268) 94 95
    KW_WHILE (269) 96
    KW_FOR (270) 97 98 99
    KW_IN (271) 99
    KW_SWITCH (272) 102 103
    KW_CASE (273) 104 105 106
    KW_DEFAULT (274) 102
    KW_BREAK (275) 19
    KW_CONTINUE (276) 20
    KW_FN (277) 118
    KW_MORPH (278)
    KW_FORGE (279) 129
    KW_AS (280) 63
    KW_STRUCT (281) 123
    KW_ENUM (282) 126
    KW_CYCLIC (283) 24
    KW_BIG_RATIONAL (284) 22
    KW_COMPLEX (285) 23
    KW_SYMMETRIC (286) 25
    KW_ALTERNATING (287) 26
    KW_DIHEDRAL (288) 27
    KW_INV_MAT (289) 28
    KW_BIGINT (290) 29
    KW_MATRIX (291) 30
    KW_POLYNOMIAL (292) 31
    KW_VEC (293) 32
    KW_BUF (294) 39
    IDENT (295) 40 47 48 51 82 99 108 109 110 111 112 113 114 115 116 118 122 123 124 125 126 127 128
    PRIMITIVE_DTYPE (296) 38 39
    LIT_INT (297) 24 25 26 27 28 30 56 105 114
    LIT_FLOAT (298) 55 106
    LIT_STR (299) 57
    LIT_CHAR (300) 54 104
    rel_op (301) 72
    KW_TRUE (302) 58
    KW_FALSE (303) 59
    INCR (304) 85
    DECR (305) 86
    ARROW (306) 112 113 114 115 116
    VARIANT (307) 51
    SLICE (308) 89
    AND (309) 73
    OR (310) 74


Nonterminals, with rules where they appear

    $accept (78)
        on left: 0
    P (79)
        on left: 1 2 3 4 5
        on right: 0 2 3 4 5
    declarations (80)
        on left: 6 7
        on right: 1 6
    body (81)
        on left: 8
        on right: 93 94 95 96 97 98 99 112 113 114 115 116
    statements (82)
        on left: 9 10
        on right: 8 9 102 104 105 106 119 129
    statement (83)
        on left: 11 12 13 14 15 16 17 18 19 20 21
        on right: 9
    field_data_type (84)
        on left: 22 23
        on right: 43
    group_data_type (85)
        on left: 24 25 26 27 28
        on right: 41
    ring_data_type (86)
        on left: 29 30 31
        on right: 42
    space_data_type (87)
        on left: 32
        on right: 44
    declaration (88)
        on left: 33
        on right: 6 11 98
    decl_list (89)
        on left: 34 35
        on right: 33 35
    decl_item (90)
        on left: 36 37
        on right: 34 35
    type (91)
        on left: 38 39 40 41 42 43 44 45 46
        on right: 28 30 31 32 45 63 111 118 122 129 131 132
    var (92)
        on left: 47 48 49 50 51
        on right: 48 49 52 75 85 86 87
    assignment (93)
        on left: 52 53
        on right: 12 97
    constant (94)
        on left: 54 55 56 57 58 59
        on right: 76 90 91
    expression (95)
        on left: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
        on right: 37 50 52 53 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 81 83 89 92 96 97 98 102 103
    return_stmt (96)
        on left: 81
        on right: 14
    call (97)
        on left: 82
        on right: 13 79
    pass_param_list (98)
        on left: 83 84
        on right: 18 82 83
    unary_operation (99)
        on left: 85 86
        on right: 77 100
    array_access (100)
        on left: 87
        on right: 53 78
    array_decl (101)
        on left: 88 89
        on right: 80 87
    array_list (102)
        on left: 90 91
        on right: 88 90
    conditional (103)
        on left: 92
        on right: 15 94
    if_body (104)
        on left: 93 94 95
        on right: 92
    loop_stmt (105)
        on left: 96 97 98 99
        on right: 17
    loop_mut (106)
        on left: 100 101
        on right: 97 98
    switch_case (107)
        on left: 102 103
        on right: 16
    sc_blocks (108)
        on left: 104 105 106 107
        on right: 102 103 104 105 106
    archetype_claim (109)
        on left: 108 109 110 111
        on right: 21
    additive_rule (110)
        on left: 112
        on right: 108 111
    mult_rule (111)
        on left: 113
        on right: 109 111
    identity_rule (112)
        on left: 114
        on right: 108 109 111
    negation_rule (113)
        on left: 115
        on right: 108 111
    inverse_rule (114)
        on left: 116
        on right: 110
    function (115)
        on left: 117
        on right: 2
    function_header (116)
        on left: 118
        on right: 117
    function_body (117)
        on left: 119
        on right: 117
    parameter_list (118)
        on left: 120 121
        on right: 118 121 129
    typ_var (119)
        on left: 122
        on right: 36 37 120 121 125
    struct (120)
        on left: 123
        on right: 3
    attr_list (121)
        on left: 124 125
        on right: 123
    enum (122)
        on left: 126
        on right: 5
    variant_list (123)
        on left: 127 128
        on right: 126 128
    forge (124)
        on left: 129
        on right: 4
    cart (125)
        on left: 130
        on right: 46
    typ_list (126)
        on left: 131 132
        on right: 130 131
    epsilon (127)
        on left: 133
        on right: 7 10 84 101 107


State 0

    0 $accept: â¢ P $end

    KW_LET  shift, and go to state 1

    $default  reduce using rule 133 (epsilon)

    P             go to state 2
    declarations  go to state 3
    declaration   go to state 4
    epsilon       go to state 5


State 1

   33 declaration: KW_LET â¢ decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 7
    decl_item  go to state 8
    typ_var    go to state 9


State 2

    0 $accept: P â¢ $end
    2 P: P â¢ function
    3  | P â¢ struct
    4  | P â¢ forge
    5  | P â¢ enum

    $end       shift, and go to state 10
    KW_FN      shift, and go to state 11
    KW_FORGE   shift, and go to state 12
    KW_STRUCT  shift, and go to state 13
    KW_ENUM    shift, and go to state 14

    function         go to state 15
    function_header  go to state 16
    struct           go to state 17
    enum             go to state 18
    forge            go to state 19


State 3

    1 P: declarations â¢

    $default  reduce using rule 1 (P)


State 4

    6 declarations: declaration â¢ ';' declarations

    ';'  shift, and go to state 20


State 5

    7 declarations: epsilon â¢

    $default  reduce using rule 7 (declarations)


State 6

  122 typ_var: IDENT â¢ ':' type

    ':'  shift, and go to state 21


State 7

   33 declaration: KW_LET decl_list â¢

    $default  reduce using rule 33 (declaration)


State 8

   34 decl_list: decl_item â¢
   35          | decl_item â¢ ',' decl_list

    ','  shift, and go to state 22

    $default  reduce using rule 34 (decl_list)


State 9

   36 decl_item: typ_var â¢
   37          | typ_var â¢ '=' expression

    '='  shift, and go to state 23

    $default  reduce using rule 36 (decl_item)


State 10

    0 $accept: P $end â¢

    $default  accept


State 11

  118 function_header: KW_FN â¢ IDENT '(' parameter_list ')' ':' type

    IDENT  shift, and go to state 24


State 12

  129 forge: KW_FORGE â¢ type '(' parameter_list '{' statements '}'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 45
    cart             go to state 46


State 13

  123 struct: KW_STRUCT â¢ IDENT '{' attr_list '}'

    IDENT  shift, and go to state 47


State 14

  126 enum: KW_ENUM â¢ IDENT '{' variant_list '}'

    IDENT  shift, and go to state 48


State 15

    2 P: P function â¢

    $default  reduce using rule 2 (P)


State 16

  117 function: function_header â¢ '{' function_body '}'

    '{'  shift, and go to state 49


State 17

    3 P: P struct â¢

    $default  reduce using rule 3 (P)


State 18

    5 P: P enum â¢

    $default  reduce using rule 5 (P)


State 19

    4 P: P forge â¢

    $default  reduce using rule 4 (P)


State 20

    6 declarations: declaration ';' â¢ declarations

    KW_LET  shift, and go to state 1

    $default  reduce using rule 133 (epsilon)

    declarations  go to state 50
    declaration   go to state 4
    epsilon       go to state 5


State 21

  122 typ_var: IDENT ':' â¢ type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 51
    cart             go to state 46


State 22

   35 decl_list: decl_item ',' â¢ decl_list

    IDENT  shift, and go to state 6

    decl_list  go to state 52
    decl_item  go to state 8
    typ_var    go to state 9


State 23

   37 decl_item: typ_var '=' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 67
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 24

  118 function_header: KW_FN IDENT â¢ '(' parameter_list ')' ':' type

    '('  shift, and go to state 72


State 25

   24 group_data_type: KW_CYCLIC â¢ '<' LIT_INT '>'

    '<'  shift, and go to state 73


State 26

   22 field_data_type: KW_BIG_RATIONAL â¢

    $default  reduce using rule 22 (field_data_type)


State 27

   23 field_data_type: KW_COMPLEX â¢

    $default  reduce using rule 23 (field_data_type)


State 28

   25 group_data_type: KW_SYMMETRIC â¢ '<' LIT_INT '>'

    '<'  shift, and go to state 74


State 29

   26 group_data_type: KW_ALTERNATING â¢ '<' LIT_INT '>'

    '<'  shift, and go to state 75


State 30

   27 group_data_type: KW_DIHEDRAL â¢ '<' LIT_INT '>'

    '<'  shift, and go to state 76


State 31

   28 group_data_type: KW_INV_MAT â¢ '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 77


State 32

   29 ring_data_type: KW_BIGINT â¢

    $default  reduce using rule 29 (ring_data_type)


State 33

   30 ring_data_type: KW_MATRIX â¢ '<' LIT_INT ',' type '>'

    '<'  shift, and go to state 78


State 34

   31 ring_data_type: KW_POLYNOMIAL â¢ '<' type '>'

    '<'  shift, and go to state 79


State 35

   32 space_data_type: KW_VEC â¢ '<' type '>'

    '<'  shift, and go to state 80


State 36

   39 type: KW_BUF â¢ '<' PRIMITIVE_DTYPE '>'

    '<'  shift, and go to state 81


State 37

   40 type: IDENT â¢

    $default  reduce using rule 40 (type)


State 38

   38 type: PRIMITIVE_DTYPE â¢

    $default  reduce using rule 38 (type)


State 39

  130 cart: '(' â¢ typ_list ')'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 82
    cart             go to state 46
    typ_list         go to state 83


State 40

   45 type: '&' â¢ type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 84
    cart             go to state 46


State 41

   43 type: field_data_type â¢

    $default  reduce using rule 43 (type)


State 42

   41 type: group_data_type â¢

    $default  reduce using rule 41 (type)


State 43

   42 type: ring_data_type â¢

    $default  reduce using rule 42 (type)


State 44

   44 type: space_data_type â¢

    $default  reduce using rule 44 (type)


State 45

  129 forge: KW_FORGE type â¢ '(' parameter_list '{' statements '}'

    '('  shift, and go to state 85


State 46

   46 type: cart â¢

    $default  reduce using rule 46 (type)


State 47

  123 struct: KW_STRUCT IDENT â¢ '{' attr_list '}'

    '{'  shift, and go to state 86


State 48

  126 enum: KW_ENUM IDENT â¢ '{' variant_list '}'

    '{'  shift, and go to state 87


State 49

  117 function: function_header '{' â¢ function_body '}'

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 97
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    function_body    go to state 109
    epsilon          go to state 110


State 50

    6 declarations: declaration ';' declarations â¢

    $default  reduce using rule 6 (declarations)


State 51

  122 typ_var: IDENT ':' type â¢

    $default  reduce using rule 122 (typ_var)


State 52

   35 decl_list: decl_item ',' decl_list â¢

    $default  reduce using rule 35 (decl_list)


State 53

   47 var: IDENT â¢
   51    | IDENT â¢ VARIANT IDENT
   82 call: IDENT â¢ '(' pass_param_list ')'

    VARIANT  shift, and go to state 111
    '('      shift, and go to state 112

    $default  reduce using rule 47 (var)


State 54

   56 constant: LIT_INT â¢

    $default  reduce using rule 56 (constant)


State 55

   55 constant: LIT_FLOAT â¢

    $default  reduce using rule 55 (constant)


State 56

   57 constant: LIT_STR â¢

    $default  reduce using rule 57 (constant)


State 57

   54 constant: LIT_CHAR â¢

    $default  reduce using rule 54 (constant)


State 58

   58 constant: KW_TRUE â¢

    $default  reduce using rule 58 (constant)


State 59

   59 constant: KW_FALSE â¢

    $default  reduce using rule 59 (constant)


State 60

   61 expression: '!' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 113
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 61

   49 var: '*' â¢ var
   50    | '*' â¢ '(' expression ')'

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 61
    '('    shift, and go to state 115

    var  go to state 116


State 62

   62 expression: '-' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 117
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 63

   60 expression: '(' â¢ expression ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 118
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 64

   88 array_decl: '[' â¢ array_list ']'
   89           | '[' â¢ expression SLICE expression ']'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 119
    expression       go to state 120
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    array_list       go to state 121


State 65

   48 var: var â¢ '.' IDENT
   75 expression: var â¢
   85 unary_operation: var â¢ INCR
   86                | var â¢ DECR
   87 array_access: var â¢ array_decl

    INCR  shift, and go to state 122
    DECR  shift, and go to state 123
    '.'   shift, and go to state 124
    '['   shift, and go to state 64

    $default  reduce using rule 75 (expression)

    array_decl  go to state 125


State 66

   76 expression: constant â¢

    $default  reduce using rule 76 (expression)


State 67

   37 decl_item: typ_var '=' expression â¢
   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 37 (decl_item)


State 68

   79 expression: call â¢

    $default  reduce using rule 79 (expression)


State 69

   77 expression: unary_operation â¢

    $default  reduce using rule 77 (expression)


State 70

   78 expression: array_access â¢

    $default  reduce using rule 78 (expression)


State 71

   80 expression: array_decl â¢

    $default  reduce using rule 80 (expression)


State 72

  118 function_header: KW_FN IDENT '(' â¢ parameter_list ')' ':' type

    IDENT  shift, and go to state 6

    parameter_list  go to state 138
    typ_var         go to state 139


State 73

   24 group_data_type: KW_CYCLIC '<' â¢ LIT_INT '>'

    LIT_INT  shift, and go to state 140


State 74

   25 group_data_type: KW_SYMMETRIC '<' â¢ LIT_INT '>'

    LIT_INT  shift, and go to state 141


State 75

   26 group_data_type: KW_ALTERNATING '<' â¢ LIT_INT '>'

    LIT_INT  shift, and go to state 142


State 76

   27 group_data_type: KW_DIHEDRAL '<' â¢ LIT_INT '>'

    LIT_INT  shift, and go to state 143


State 77

   28 group_data_type: KW_INV_MAT '<' â¢ LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 144


State 78

   30 ring_data_type: KW_MATRIX '<' â¢ LIT_INT ',' type '>'

    LIT_INT  shift, and go to state 145


State 79

   31 ring_data_type: KW_POLYNOMIAL '<' â¢ type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 146
    cart             go to state 46


State 80

   32 space_data_type: KW_VEC '<' â¢ type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 147
    cart             go to state 46


State 81

   39 type: KW_BUF '<' â¢ PRIMITIVE_DTYPE '>'

    PRIMITIVE_DTYPE  shift, and go to state 148


State 82

  132 typ_list: type â¢

    $default  reduce using rule 132 (typ_list)


State 83

  130 cart: '(' typ_list â¢ ')'
  131 typ_list: typ_list â¢ ',' type

    ')'  shift, and go to state 149
    ','  shift, and go to state 150


State 84

   45 type: '&' type â¢

    $default  reduce using rule 45 (type)


State 85

  129 forge: KW_FORGE type '(' â¢ parameter_list '{' statements '}'

    IDENT  shift, and go to state 6

    parameter_list  go to state 151
    typ_var         go to state 139


State 86

  123 struct: KW_STRUCT IDENT '{' â¢ attr_list '}'

    IDENT  shift, and go to state 152

    typ_var    go to state 153
    attr_list  go to state 154


State 87

  126 enum: KW_ENUM IDENT '{' â¢ variant_list '}'

    IDENT  shift, and go to state 155

    variant_list  go to state 156


State 88

  108 archetype_claim: KW_CLAIM â¢ IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  109                | KW_CLAIM â¢ IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  110                | KW_CLAIM â¢ IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';'
  111                | KW_CLAIM â¢ IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    IDENT  shift, and go to state 157


State 89

   18 statement: KW_PRINT â¢ '(' pass_param_list ')' ';'

    '('  shift, and go to state 158


State 90

   81 return_stmt: KW_RETURN â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 159
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 91

   92 conditional: KW_IF â¢ '(' expression ')' if_body

    '('  shift, and go to state 160


State 92

   96 loop_stmt: KW_WHILE â¢ '(' expression ')' body

    '('  shift, and go to state 161


State 93

   97 loop_stmt: KW_FOR â¢ '(' assignment ';' expression ';' loop_mut ')' body
   98          | KW_FOR â¢ '(' declaration ';' expression ';' loop_mut ')' body
   99          | KW_FOR â¢ IDENT KW_IN IDENT body

    IDENT  shift, and go to state 162
    '('    shift, and go to state 163


State 94

  102 switch_case: KW_SWITCH â¢ '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH â¢ '(' expression ')' '{' sc_blocks '}'

    '('  shift, and go to state 164


State 95

   19 statement: KW_BREAK â¢ ';'

    ';'  shift, and go to state 165


State 96

   20 statement: KW_CONTINUE â¢ ';'

    ';'  shift, and go to state 166


State 97

  119 function_body: statements â¢

    $default  reduce using rule 119 (function_body)


State 98

    9 statements: statement â¢ statements

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 167
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 99

   11 statement: declaration â¢ ';'

    ';'  shift, and go to state 168


State 100

   48 var: var â¢ '.' IDENT
   52 assignment: var â¢ '=' expression
   87 array_access: var â¢ array_decl

    '.'  shift, and go to state 124
    '='  shift, and go to state 169
    '['  shift, and go to state 64

    array_decl  go to state 125


State 101

   12 statement: assignment â¢ ';'

    ';'  shift, and go to state 170


State 102

   14 statement: return_stmt â¢ ';'

    ';'  shift, and go to state 171


State 103

   13 statement: call â¢ ';'

    ';'  shift, and go to state 172


State 104

   53 assignment: array_access â¢ '=' expression

    '='  shift, and go to state 173


State 105

   15 statement: conditional â¢

    $default  reduce using rule 15 (statement)


State 106

   17 statement: loop_stmt â¢

    $default  reduce using rule 17 (statement)


State 107

   16 statement: switch_case â¢

    $default  reduce using rule 16 (statement)


State 108

   21 statement: archetype_claim â¢

    $default  reduce using rule 21 (statement)


State 109

  117 function: function_header '{' function_body â¢ '}'

    '}'  shift, and go to state 174


State 110

   10 statements: epsilon â¢

    $default  reduce using rule 10 (statements)


State 111

   51 var: IDENT VARIANT â¢ IDENT

    IDENT  shift, and go to state 175


State 112

   82 call: IDENT '(' â¢ pass_param_list ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    $default  reduce using rule 133 (epsilon)

    var              go to state 65
    constant         go to state 66
    expression       go to state 176
    call             go to state 68
    pass_param_list  go to state 177
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    epsilon          go to state 178


State 113

   61 expression: '!' expression â¢
   63           | expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 61 (expression)


State 114

   47 var: IDENT â¢
   51    | IDENT â¢ VARIANT IDENT

    VARIANT  shift, and go to state 111

    $default  reduce using rule 47 (var)


State 115

   50 var: '*' '(' â¢ expression ')'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 179
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 116

   48 var: var â¢ '.' IDENT
   49    | '*' var â¢

    '.'  shift, and go to state 124

    $default  reduce using rule 49 (var)


State 117

   62 expression: '-' expression â¢
   63           | expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 62 (expression)


State 118

   60 expression: '(' expression â¢ ')'
   63           | expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 180


State 119

   76 expression: constant â¢
   90 array_list: constant â¢ ',' array_list
   91           | constant â¢

    ','  shift, and go to state 181

    ']'       reduce using rule 91 (array_list)
    $default  reduce using rule 76 (expression)


State 120

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   89 array_decl: '[' expression â¢ SLICE expression ']'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    SLICE   shift, and go to state 182
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137


State 121

   88 array_decl: '[' array_list â¢ ']'

    ']'  shift, and go to state 183


State 122

   85 unary_operation: var INCR â¢

    $default  reduce using rule 85 (unary_operation)


State 123

   86 unary_operation: var DECR â¢

    $default  reduce using rule 86 (unary_operation)


State 124

   48 var: var '.' â¢ IDENT

    IDENT  shift, and go to state 184


State 125

   87 array_access: var array_decl â¢

    $default  reduce using rule 87 (array_access)


State 126

   63 expression: expression KW_AS â¢ type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 185
    cart             go to state 46


State 127

   72 expression: expression rel_op â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 186
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 128

   73 expression: expression AND â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 187
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 129

   74 expression: expression OR â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 188
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 130

   64 expression: expression '@' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 189
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 131

   65 expression: expression '*' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 190
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 132

   66 expression: expression '/' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 191
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 133

   67 expression: expression '%' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 192
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 134

   68 expression: expression '+' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 193
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 135

   69 expression: expression '-' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 194
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 136

   70 expression: expression '>' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 195
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 137

   71 expression: expression '<' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 196
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 138

  118 function_header: KW_FN IDENT '(' parameter_list â¢ ')' ':' type
  121 parameter_list: parameter_list â¢ ',' typ_var

    ')'  shift, and go to state 197
    ','  shift, and go to state 198


State 139

  120 parameter_list: typ_var â¢

    $default  reduce using rule 120 (parameter_list)


State 140

   24 group_data_type: KW_CYCLIC '<' LIT_INT â¢ '>'

    '>'  shift, and go to state 199


State 141

   25 group_data_type: KW_SYMMETRIC '<' LIT_INT â¢ '>'

    '>'  shift, and go to state 200


State 142

   26 group_data_type: KW_ALTERNATING '<' LIT_INT â¢ '>'

    '>'  shift, and go to state 201


State 143

   27 group_data_type: KW_DIHEDRAL '<' LIT_INT â¢ '>'

    '>'  shift, and go to state 202


State 144

   28 group_data_type: KW_INV_MAT '<' LIT_INT â¢ ',' type '>'

    ','  shift, and go to state 203


State 145

   30 ring_data_type: KW_MATRIX '<' LIT_INT â¢ ',' type '>'

    ','  shift, and go to state 204


State 146

   31 ring_data_type: KW_POLYNOMIAL '<' type â¢ '>'

    '>'  shift, and go to state 205


State 147

   32 space_data_type: KW_VEC '<' type â¢ '>'

    '>'  shift, and go to state 206


State 148

   39 type: KW_BUF '<' PRIMITIVE_DTYPE â¢ '>'

    '>'  shift, and go to state 207


State 149

  130 cart: '(' typ_list ')' â¢

    $default  reduce using rule 130 (cart)


State 150

  131 typ_list: typ_list ',' â¢ type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 208
    cart             go to state 46


State 151

  121 parameter_list: parameter_list â¢ ',' typ_var
  129 forge: KW_FORGE type '(' parameter_list â¢ '{' statements '}'

    '{'  shift, and go to state 209
    ','  shift, and go to state 198


State 152

  122 typ_var: IDENT â¢ ':' type
  124 attr_list: IDENT â¢

    ':'  shift, and go to state 21

    $default  reduce using rule 124 (attr_list)


State 153

  125 attr_list: typ_var â¢ ',' IDENT

    ','  shift, and go to state 210


State 154

  123 struct: KW_STRUCT IDENT '{' attr_list â¢ '}'

    '}'  shift, and go to state 211


State 155

  127 variant_list: IDENT â¢

    $default  reduce using rule 127 (variant_list)


State 156

  126 enum: KW_ENUM IDENT '{' variant_list â¢ '}'
  128 variant_list: variant_list â¢ ',' IDENT

    '}'  shift, and go to state 212
    ','  shift, and go to state 213


State 157

  108 archetype_claim: KW_CLAIM IDENT â¢ KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  109                | KW_CLAIM IDENT â¢ KW_IS KW_RING '{' mult_rule identity_rule '}' ';'
  110                | KW_CLAIM IDENT â¢ KW_IS KW_FIELD '{' inverse_rule '}' ';'
  111                | KW_CLAIM IDENT â¢ KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_IS  shift, and go to state 214


State 158

   18 statement: KW_PRINT '(' â¢ pass_param_list ')' ';'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    $default  reduce using rule 133 (epsilon)

    var              go to state 65
    constant         go to state 66
    expression       go to state 176
    call             go to state 68
    pass_param_list  go to state 215
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    epsilon          go to state 178


State 159

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   81 return_stmt: KW_RETURN expression â¢

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 81 (return_stmt)


State 160

   92 conditional: KW_IF '(' â¢ expression ')' if_body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 216
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 161

   96 loop_stmt: KW_WHILE '(' â¢ expression ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 217
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 162

   99 loop_stmt: KW_FOR IDENT â¢ KW_IN IDENT body

    KW_IN  shift, and go to state 218


State 163

   97 loop_stmt: KW_FOR '(' â¢ assignment ';' expression ';' loop_mut ')' body
   98          | KW_FOR '(' â¢ declaration ';' expression ';' loop_mut ')' body

    KW_LET  shift, and go to state 1
    IDENT   shift, and go to state 114
    '*'     shift, and go to state 61

    declaration   go to state 219
    var           go to state 100
    assignment    go to state 220
    array_access  go to state 104


State 164

  102 switch_case: KW_SWITCH '(' â¢ expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' â¢ expression ')' '{' sc_blocks '}'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 221
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 165

   19 statement: KW_BREAK ';' â¢

    $default  reduce using rule 19 (statement)


State 166

   20 statement: KW_CONTINUE ';' â¢

    $default  reduce using rule 20 (statement)


State 167

    9 statements: statement statements â¢

    $default  reduce using rule 9 (statements)


State 168

   11 statement: declaration ';' â¢

    $default  reduce using rule 11 (statement)


State 169

   52 assignment: var '=' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 222
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 170

   12 statement: assignment ';' â¢

    $default  reduce using rule 12 (statement)


State 171

   14 statement: return_stmt ';' â¢

    $default  reduce using rule 14 (statement)


State 172

   13 statement: call ';' â¢

    $default  reduce using rule 13 (statement)


State 173

   53 assignment: array_access '=' â¢ expression

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 223
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 174

  117 function: function_header '{' function_body '}' â¢

    $default  reduce using rule 117 (function)


State 175

   51 var: IDENT VARIANT IDENT â¢

    $default  reduce using rule 51 (var)


State 176

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   83 pass_param_list: expression â¢ ',' pass_param_list

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ','     shift, and go to state 224


State 177

   82 call: IDENT '(' pass_param_list â¢ ')'

    ')'  shift, and go to state 225


State 178

   84 pass_param_list: epsilon â¢

    $default  reduce using rule 84 (pass_param_list)


State 179

   50 var: '*' '(' expression â¢ ')'
   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 226


State 180

   60 expression: '(' expression ')' â¢

    $default  reduce using rule 60 (expression)


State 181

   90 array_list: constant ',' â¢ array_list

    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59

    constant    go to state 227
    array_list  go to state 228


State 182

   89 array_decl: '[' expression SLICE â¢ expression ']'

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 229
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 183

   88 array_decl: '[' array_list ']' â¢

    $default  reduce using rule 88 (array_decl)


State 184

   48 var: var '.' IDENT â¢

    $default  reduce using rule 48 (var)


State 185

   63 expression: expression KW_AS type â¢

    $default  reduce using rule 63 (expression)


State 186

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   72           | expression rel_op expression â¢
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 72 (expression)


State 187

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   73           | expression AND expression â¢
   74           | expression â¢ OR expression

    OR  shift, and go to state 129

    $default  reduce using rule 73 (expression)


State 188

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   74           | expression OR expression â¢

    $default  reduce using rule 74 (expression)


State 189

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   64           | expression '@' expression â¢
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 64 (expression)


State 190

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   65           | expression '*' expression â¢
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 65 (expression)


State 191

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   66           | expression '/' expression â¢
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 66 (expression)


State 192

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   67           | expression '%' expression â¢
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 67 (expression)


State 193

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   68           | expression '+' expression â¢
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 68 (expression)


State 194

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   69           | expression '-' expression â¢
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 69 (expression)


State 195

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   70           | expression '>' expression â¢
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 70 (expression)


State 196

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   71           | expression '<' expression â¢
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    AND  shift, and go to state 128
    OR   shift, and go to state 129

    $default  reduce using rule 71 (expression)


State 197

  118 function_header: KW_FN IDENT '(' parameter_list ')' â¢ ':' type

    ':'  shift, and go to state 230


State 198

  121 parameter_list: parameter_list ',' â¢ typ_var

    IDENT  shift, and go to state 6

    typ_var  go to state 231


State 199

   24 group_data_type: KW_CYCLIC '<' LIT_INT '>' â¢

    $default  reduce using rule 24 (group_data_type)


State 200

   25 group_data_type: KW_SYMMETRIC '<' LIT_INT '>' â¢

    $default  reduce using rule 25 (group_data_type)


State 201

   26 group_data_type: KW_ALTERNATING '<' LIT_INT '>' â¢

    $default  reduce using rule 26 (group_data_type)


State 202

   27 group_data_type: KW_DIHEDRAL '<' LIT_INT '>' â¢

    $default  reduce using rule 27 (group_data_type)


State 203

   28 group_data_type: KW_INV_MAT '<' LIT_INT ',' â¢ type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 232
    cart             go to state 46


State 204

   30 ring_data_type: KW_MATRIX '<' LIT_INT ',' â¢ type '>'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 233
    cart             go to state 46


State 205

   31 ring_data_type: KW_POLYNOMIAL '<' type '>' â¢

    $default  reduce using rule 31 (ring_data_type)


State 206

   32 space_data_type: KW_VEC '<' type '>' â¢

    $default  reduce using rule 32 (space_data_type)


State 207

   39 type: KW_BUF '<' PRIMITIVE_DTYPE '>' â¢

    $default  reduce using rule 39 (type)


State 208

  131 typ_list: typ_list ',' type â¢

    $default  reduce using rule 131 (typ_list)


State 209

  129 forge: KW_FORGE type '(' parameter_list '{' â¢ statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 234
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 210

  125 attr_list: typ_var ',' â¢ IDENT

    IDENT  shift, and go to state 235


State 211

  123 struct: KW_STRUCT IDENT '{' attr_list '}' â¢

    $default  reduce using rule 123 (struct)


State 212

  126 enum: KW_ENUM IDENT '{' variant_list '}' â¢

    $default  reduce using rule 126 (enum)


State 213

  128 variant_list: variant_list ',' â¢ IDENT

    IDENT  shift, and go to state 236


State 214

  108 archetype_claim: KW_CLAIM IDENT KW_IS â¢ KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';'
  109                | KW_CLAIM IDENT KW_IS â¢ KW_RING '{' mult_rule identity_rule '}' ';'
  110                | KW_CLAIM IDENT KW_IS â¢ KW_FIELD '{' inverse_rule '}' ';'
  111                | KW_CLAIM IDENT KW_IS â¢ KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_GROUP  shift, and go to state 237
    KW_RING   shift, and go to state 238
    KW_FIELD  shift, and go to state 239
    KW_SPACE  shift, and go to state 240


State 215

   18 statement: KW_PRINT '(' pass_param_list â¢ ')' ';'

    ')'  shift, and go to state 241


State 216

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   92 conditional: KW_IF '(' expression â¢ ')' if_body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 242


State 217

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   96 loop_stmt: KW_WHILE '(' expression â¢ ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 243


State 218

   99 loop_stmt: KW_FOR IDENT KW_IN â¢ IDENT body

    IDENT  shift, and go to state 244


State 219

   98 loop_stmt: KW_FOR '(' declaration â¢ ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 245


State 220

   97 loop_stmt: KW_FOR '(' assignment â¢ ';' expression ';' loop_mut ')' body

    ';'  shift, and go to state 246


State 221

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
  102 switch_case: KW_SWITCH '(' expression â¢ ')' '{' sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' expression â¢ ')' '{' sc_blocks '}'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ')'     shift, and go to state 247


State 222

   52 assignment: var '=' expression â¢
   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 52 (assignment)


State 223

   53 assignment: array_access '=' expression â¢
   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137

    $default  reduce using rule 53 (assignment)


State 224

   83 pass_param_list: expression ',' â¢ pass_param_list

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    $default  reduce using rule 133 (epsilon)

    var              go to state 65
    constant         go to state 66
    expression       go to state 176
    call             go to state 68
    pass_param_list  go to state 248
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71
    epsilon          go to state 178


State 225

   82 call: IDENT '(' pass_param_list ')' â¢

    $default  reduce using rule 82 (call)


State 226

   50 var: '*' '(' expression ')' â¢

    $default  reduce using rule 50 (var)


State 227

   90 array_list: constant â¢ ',' array_list
   91           | constant â¢

    ','  shift, and go to state 181

    $default  reduce using rule 91 (array_list)


State 228

   90 array_list: constant ',' array_list â¢

    $default  reduce using rule 90 (array_list)


State 229

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   89 array_decl: '[' expression SLICE expression â¢ ']'

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ']'     shift, and go to state 249


State 230

  118 function_header: KW_FN IDENT '(' parameter_list ')' ':' â¢ type

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 250
    cart             go to state 46


State 231

  121 parameter_list: parameter_list ',' typ_var â¢

    $default  reduce using rule 121 (parameter_list)


State 232

   28 group_data_type: KW_INV_MAT '<' LIT_INT ',' type â¢ '>'

    '>'  shift, and go to state 251


State 233

   30 ring_data_type: KW_MATRIX '<' LIT_INT ',' type â¢ '>'

    '>'  shift, and go to state 252


State 234

  129 forge: KW_FORGE type '(' parameter_list '{' statements â¢ '}'

    '}'  shift, and go to state 253


State 235

  125 attr_list: typ_var ',' IDENT â¢

    $default  reduce using rule 125 (attr_list)


State 236

  128 variant_list: variant_list ',' IDENT â¢

    $default  reduce using rule 128 (variant_list)


State 237

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP â¢ '{' additive_rule identity_rule negation_rule '}' ';'

    '{'  shift, and go to state 254


State 238

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING â¢ '{' mult_rule identity_rule '}' ';'

    '{'  shift, and go to state 255


State 239

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD â¢ '{' inverse_rule '}' ';'

    '{'  shift, and go to state 256


State 240

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE â¢ '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '{'  shift, and go to state 257


State 241

   18 statement: KW_PRINT '(' pass_param_list ')' â¢ ';'

    ';'  shift, and go to state 258


State 242

   92 conditional: KW_IF '(' expression ')' â¢ if_body

    '{'  shift, and go to state 259

    body     go to state 260
    if_body  go to state 261


State 243

   96 loop_stmt: KW_WHILE '(' expression ')' â¢ body

    '{'  shift, and go to state 259

    body  go to state 262


State 244

   99 loop_stmt: KW_FOR IDENT KW_IN IDENT â¢ body

    '{'  shift, and go to state 259

    body  go to state 263


State 245

   98 loop_stmt: KW_FOR '(' declaration ';' â¢ expression ';' loop_mut ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 264
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 246

   97 loop_stmt: KW_FOR '(' assignment ';' â¢ expression ';' loop_mut ')' body

    IDENT      shift, and go to state 53
    LIT_INT    shift, and go to state 54
    LIT_FLOAT  shift, and go to state 55
    LIT_STR    shift, and go to state 56
    LIT_CHAR   shift, and go to state 57
    KW_TRUE    shift, and go to state 58
    KW_FALSE   shift, and go to state 59
    '!'        shift, and go to state 60
    '*'        shift, and go to state 61
    '-'        shift, and go to state 62
    '('        shift, and go to state 63
    '['        shift, and go to state 64

    var              go to state 65
    constant         go to state 66
    expression       go to state 265
    call             go to state 68
    unary_operation  go to state 69
    array_access     go to state 70
    array_decl       go to state 71


State 247

  102 switch_case: KW_SWITCH '(' expression ')' â¢ '{' sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' expression ')' â¢ '{' sc_blocks '}'

    '{'  shift, and go to state 266


State 248

   83 pass_param_list: expression ',' pass_param_list â¢

    $default  reduce using rule 83 (pass_param_list)


State 249

   89 array_decl: '[' expression SLICE expression ']' â¢

    $default  reduce using rule 89 (array_decl)


State 250

  118 function_header: KW_FN IDENT '(' parameter_list ')' ':' type â¢

    $default  reduce using rule 118 (function_header)


State 251

   28 group_data_type: KW_INV_MAT '<' LIT_INT ',' type '>' â¢

    $default  reduce using rule 28 (group_data_type)


State 252

   30 ring_data_type: KW_MATRIX '<' LIT_INT ',' type '>' â¢

    $default  reduce using rule 30 (ring_data_type)


State 253

  129 forge: KW_FORGE type '(' parameter_list '{' statements '}' â¢

    $default  reduce using rule 129 (forge)


State 254

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' â¢ additive_rule identity_rule negation_rule '}' ';'

    '('  shift, and go to state 267

    additive_rule  go to state 268


State 255

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' â¢ mult_rule identity_rule '}' ';'

    '('  shift, and go to state 269

    mult_rule  go to state 270


State 256

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' â¢ inverse_rule '}' ';'

    '('  shift, and go to state 271

    inverse_rule  go to state 272


State 257

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' â¢ KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_FIELD  shift, and go to state 273


State 258

   18 statement: KW_PRINT '(' pass_param_list ')' ';' â¢

    $default  reduce using rule 18 (statement)


State 259

    8 body: '{' â¢ statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 274
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 260

   93 if_body: body â¢
   94        | body â¢ KW_ELSE conditional
   95        | body â¢ KW_ELSE body

    KW_ELSE  shift, and go to state 275

    $default  reduce using rule 93 (if_body)


State 261

   92 conditional: KW_IF '(' expression ')' if_body â¢

    $default  reduce using rule 92 (conditional)


State 262

   96 loop_stmt: KW_WHILE '(' expression ')' body â¢

    $default  reduce using rule 96 (loop_stmt)


State 263

   99 loop_stmt: KW_FOR IDENT KW_IN IDENT body â¢

    $default  reduce using rule 99 (loop_stmt)


State 264

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   98 loop_stmt: KW_FOR '(' declaration ';' expression â¢ ';' loop_mut ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ';'     shift, and go to state 276


State 265

   63 expression: expression â¢ KW_AS type
   64           | expression â¢ '@' expression
   65           | expression â¢ '*' expression
   66           | expression â¢ '/' expression
   67           | expression â¢ '%' expression
   68           | expression â¢ '+' expression
   69           | expression â¢ '-' expression
   70           | expression â¢ '>' expression
   71           | expression â¢ '<' expression
   72           | expression â¢ rel_op expression
   73           | expression â¢ AND expression
   74           | expression â¢ OR expression
   97 loop_stmt: KW_FOR '(' assignment ';' expression â¢ ';' loop_mut ')' body

    KW_AS   shift, and go to state 126
    rel_op  shift, and go to state 127
    AND     shift, and go to state 128
    OR      shift, and go to state 129
    '@'     shift, and go to state 130
    '*'     shift, and go to state 131
    '/'     shift, and go to state 132
    '%'     shift, and go to state 133
    '+'     shift, and go to state 134
    '-'     shift, and go to state 135
    '>'     shift, and go to state 136
    '<'     shift, and go to state 137
    ';'     shift, and go to state 277


State 266

  102 switch_case: KW_SWITCH '(' expression ')' '{' â¢ sc_blocks KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' expression ')' '{' â¢ sc_blocks '}'

    KW_CASE  shift, and go to state 278

    $default  reduce using rule 133 (epsilon)

    sc_blocks  go to state 279
    epsilon    go to state 280


State 267

  112 additive_rule: '(' â¢ IDENT '=' IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 281


State 268

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule â¢ identity_rule negation_rule '}' ';'

    '('  shift, and go to state 282

    identity_rule  go to state 283


State 269

  113 mult_rule: '(' â¢ IDENT '=' IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 284


State 270

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule â¢ identity_rule '}' ';'

    '('  shift, and go to state 282

    identity_rule  go to state 285


State 271

  116 inverse_rule: '(' â¢ IDENT '=' '~' IDENT ')' ARROW body

    IDENT  shift, and go to state 286


State 272

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule â¢ '}' ';'

    '}'  shift, and go to state 287


State 273

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD â¢ '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '='  shift, and go to state 288


State 274

    8 body: '{' statements â¢ '}'

    '}'  shift, and go to state 289


State 275

   94 if_body: body KW_ELSE â¢ conditional
   95        | body KW_ELSE â¢ body

    KW_IF  shift, and go to state 91
    '{'    shift, and go to state 259

    body         go to state 290
    conditional  go to state 291


State 276

   98 loop_stmt: KW_FOR '(' declaration ';' expression ';' â¢ loop_mut ')' body

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    var              go to state 292
    unary_operation  go to state 293
    loop_mut         go to state 294
    epsilon          go to state 295


State 277

   97 loop_stmt: KW_FOR '(' assignment ';' expression ';' â¢ loop_mut ')' body

    IDENT  shift, and go to state 114
    '*'    shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    var              go to state 292
    unary_operation  go to state 293
    loop_mut         go to state 296
    epsilon          go to state 295


State 278

  104 sc_blocks: KW_CASE â¢ LIT_CHAR ':' statements sc_blocks
  105          | KW_CASE â¢ LIT_INT ':' statements sc_blocks
  106          | KW_CASE â¢ LIT_FLOAT ':' statements sc_blocks

    LIT_INT    shift, and go to state 297
    LIT_FLOAT  shift, and go to state 298
    LIT_CHAR   shift, and go to state 299


State 279

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks â¢ KW_DEFAULT ':' statements '}'
  103            | KW_SWITCH '(' expression ')' '{' sc_blocks â¢ '}'

    KW_DEFAULT  shift, and go to state 300
    '}'         shift, and go to state 301


State 280

  107 sc_blocks: epsilon â¢

    $default  reduce using rule 107 (sc_blocks)


State 281

  112 additive_rule: '(' IDENT â¢ '=' IDENT '+' IDENT ')' ARROW body

    '='  shift, and go to state 302


State 282

  114 identity_rule: '(' â¢ IDENT '=' LIT_INT ')' ARROW body

    IDENT  shift, and go to state 303


State 283

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule â¢ negation_rule '}' ';'

    '('  shift, and go to state 304

    negation_rule  go to state 305


State 284

  113 mult_rule: '(' IDENT â¢ '=' IDENT '*' IDENT ')' ARROW body

    '='  shift, and go to state 306


State 285

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule â¢ '}' ';'

    '}'  shift, and go to state 307


State 286

  116 inverse_rule: '(' IDENT â¢ '=' '~' IDENT ')' ARROW body

    '='  shift, and go to state 308


State 287

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' â¢ ';'

    ';'  shift, and go to state 309


State 288

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' â¢ '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 310


State 289

    8 body: '{' statements '}' â¢

    $default  reduce using rule 8 (body)


State 290

   95 if_body: body KW_ELSE body â¢

    $default  reduce using rule 95 (if_body)


State 291

   94 if_body: body KW_ELSE conditional â¢

    $default  reduce using rule 94 (if_body)


State 292

   48 var: var â¢ '.' IDENT
   85 unary_operation: var â¢ INCR
   86                | var â¢ DECR

    INCR  shift, and go to state 122
    DECR  shift, and go to state 123
    '.'   shift, and go to state 124


State 293

  100 loop_mut: unary_operation â¢

    $default  reduce using rule 100 (loop_mut)


State 294

   98 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut â¢ ')' body

    ')'  shift, and go to state 311


State 295

  101 loop_mut: epsilon â¢

    $default  reduce using rule 101 (loop_mut)


State 296

   97 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut â¢ ')' body

    ')'  shift, and go to state 312


State 297

  105 sc_blocks: KW_CASE LIT_INT â¢ ':' statements sc_blocks

    ':'  shift, and go to state 313


State 298

  106 sc_blocks: KW_CASE LIT_FLOAT â¢ ':' statements sc_blocks

    ':'  shift, and go to state 314


State 299

  104 sc_blocks: KW_CASE LIT_CHAR â¢ ':' statements sc_blocks

    ':'  shift, and go to state 315


State 300

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT â¢ ':' statements '}'

    ':'  shift, and go to state 316


State 301

  103 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks '}' â¢

    $default  reduce using rule 103 (switch_case)


State 302

  112 additive_rule: '(' IDENT '=' â¢ IDENT '+' IDENT ')' ARROW body

    IDENT  shift, and go to state 317


State 303

  114 identity_rule: '(' IDENT â¢ '=' LIT_INT ')' ARROW body

    '='  shift, and go to state 318


State 304

  115 negation_rule: '(' â¢ IDENT '=' '-' IDENT ')' ARROW body

    IDENT  shift, and go to state 319


State 305

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule â¢ '}' ';'

    '}'  shift, and go to state 320


State 306

  113 mult_rule: '(' IDENT '=' â¢ IDENT '*' IDENT ')' ARROW body

    IDENT  shift, and go to state 321


State 307

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' â¢ ';'

    ';'  shift, and go to state 322


State 308

  116 inverse_rule: '(' IDENT '=' â¢ '~' IDENT ')' ARROW body

    '~'  shift, and go to state 323


State 309

  110 archetype_claim: KW_CLAIM IDENT KW_IS KW_FIELD '{' inverse_rule '}' ';' â¢

    $default  reduce using rule 110 (archetype_claim)


State 310

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' â¢ type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    KW_CYCLIC        shift, and go to state 25
    KW_BIG_RATIONAL  shift, and go to state 26
    KW_COMPLEX       shift, and go to state 27
    KW_SYMMETRIC     shift, and go to state 28
    KW_ALTERNATING   shift, and go to state 29
    KW_DIHEDRAL      shift, and go to state 30
    KW_INV_MAT       shift, and go to state 31
    KW_BIGINT        shift, and go to state 32
    KW_MATRIX        shift, and go to state 33
    KW_POLYNOMIAL    shift, and go to state 34
    KW_VEC           shift, and go to state 35
    KW_BUF           shift, and go to state 36
    IDENT            shift, and go to state 37
    PRIMITIVE_DTYPE  shift, and go to state 38
    '('              shift, and go to state 39
    '&'              shift, and go to state 40

    field_data_type  go to state 41
    group_data_type  go to state 42
    ring_data_type   go to state 43
    space_data_type  go to state 44
    type             go to state 324
    cart             go to state 46


State 311

   98 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' â¢ body

    '{'  shift, and go to state 259

    body  go to state 325


State 312

   97 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' â¢ body

    '{'  shift, and go to state 259

    body  go to state 326


State 313

  105 sc_blocks: KW_CASE LIT_INT ':' â¢ statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 327
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 314

  106 sc_blocks: KW_CASE LIT_FLOAT ':' â¢ statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 328
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 315

  104 sc_blocks: KW_CASE LIT_CHAR ':' â¢ statements sc_blocks

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 329
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 316

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' â¢ statements '}'

    KW_CLAIM     shift, and go to state 88
    KW_PRINT     shift, and go to state 89
    KW_LET       shift, and go to state 1
    KW_RETURN    shift, and go to state 90
    KW_IF        shift, and go to state 91
    KW_WHILE     shift, and go to state 92
    KW_FOR       shift, and go to state 93
    KW_SWITCH    shift, and go to state 94
    KW_BREAK     shift, and go to state 95
    KW_CONTINUE  shift, and go to state 96
    IDENT        shift, and go to state 53
    '*'          shift, and go to state 61

    $default  reduce using rule 133 (epsilon)

    statements       go to state 330
    statement        go to state 98
    declaration      go to state 99
    var              go to state 100
    assignment       go to state 101
    return_stmt      go to state 102
    call             go to state 103
    array_access     go to state 104
    conditional      go to state 105
    loop_stmt        go to state 106
    switch_case      go to state 107
    archetype_claim  go to state 108
    epsilon          go to state 110


State 317

  112 additive_rule: '(' IDENT '=' IDENT â¢ '+' IDENT ')' ARROW body

    '+'  shift, and go to state 331


State 318

  114 identity_rule: '(' IDENT '=' â¢ LIT_INT ')' ARROW body

    LIT_INT  shift, and go to state 332


State 319

  115 negation_rule: '(' IDENT â¢ '=' '-' IDENT ')' ARROW body

    '='  shift, and go to state 333


State 320

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' â¢ ';'

    ';'  shift, and go to state 334


State 321

  113 mult_rule: '(' IDENT '=' IDENT â¢ '*' IDENT ')' ARROW body

    '*'  shift, and go to state 335


State 322

  109 archetype_claim: KW_CLAIM IDENT KW_IS KW_RING '{' mult_rule identity_rule '}' ';' â¢

    $default  reduce using rule 109 (archetype_claim)


State 323

  116 inverse_rule: '(' IDENT '=' '~' â¢ IDENT ')' ARROW body

    IDENT  shift, and go to state 336


State 324

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type â¢ ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ')'  shift, and go to state 337


State 325

   98 loop_stmt: KW_FOR '(' declaration ';' expression ';' loop_mut ')' body â¢

    $default  reduce using rule 98 (loop_stmt)


State 326

   97 loop_stmt: KW_FOR '(' assignment ';' expression ';' loop_mut ')' body â¢

    $default  reduce using rule 97 (loop_stmt)


State 327

  105 sc_blocks: KW_CASE LIT_INT ':' statements â¢ sc_blocks

    KW_CASE  shift, and go to state 278

    $default  reduce using rule 133 (epsilon)

    sc_blocks  go to state 338
    epsilon    go to state 280


State 328

  106 sc_blocks: KW_CASE LIT_FLOAT ':' statements â¢ sc_blocks

    KW_CASE  shift, and go to state 278

    $default  reduce using rule 133 (epsilon)

    sc_blocks  go to state 339
    epsilon    go to state 280


State 329

  104 sc_blocks: KW_CASE LIT_CHAR ':' statements â¢ sc_blocks

    KW_CASE  shift, and go to state 278

    $default  reduce using rule 133 (epsilon)

    sc_blocks  go to state 340
    epsilon    go to state 280


State 330

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements â¢ '}'

    '}'  shift, and go to state 341


State 331

  112 additive_rule: '(' IDENT '=' IDENT '+' â¢ IDENT ')' ARROW body

    IDENT  shift, and go to state 342


State 332

  114 identity_rule: '(' IDENT '=' LIT_INT â¢ ')' ARROW body

    ')'  shift, and go to state 343


State 333

  115 negation_rule: '(' IDENT '=' â¢ '-' IDENT ')' ARROW body

    '-'  shift, and go to state 344


State 334

  108 archetype_claim: KW_CLAIM IDENT KW_IS KW_GROUP '{' additive_rule identity_rule negation_rule '}' ';' â¢

    $default  reduce using rule 108 (archetype_claim)


State 335

  113 mult_rule: '(' IDENT '=' IDENT '*' â¢ IDENT ')' ARROW body

    IDENT  shift, and go to state 345


State 336

  116 inverse_rule: '(' IDENT '=' '~' IDENT â¢ ')' ARROW body

    ')'  shift, and go to state 346


State 337

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' â¢ ';' additive_rule negation_rule identity_rule mult_rule '}' ';'

    ';'  shift, and go to state 347


State 338

  105 sc_blocks: KW_CASE LIT_INT ':' statements sc_blocks â¢

    $default  reduce using rule 105 (sc_blocks)


State 339

  106 sc_blocks: KW_CASE LIT_FLOAT ':' statements sc_blocks â¢

    $default  reduce using rule 106 (sc_blocks)


State 340

  104 sc_blocks: KW_CASE LIT_CHAR ':' statements sc_blocks â¢

    $default  reduce using rule 104 (sc_blocks)


State 341

  102 switch_case: KW_SWITCH '(' expression ')' '{' sc_blocks KW_DEFAULT ':' statements '}' â¢

    $default  reduce using rule 102 (switch_case)


State 342

  112 additive_rule: '(' IDENT '=' IDENT '+' IDENT â¢ ')' ARROW body

    ')'  shift, and go to state 348


State 343

  114 identity_rule: '(' IDENT '=' LIT_INT ')' â¢ ARROW body

    ARROW  shift, and go to state 349


State 344

  115 negation_rule: '(' IDENT '=' '-' â¢ IDENT ')' ARROW body

    IDENT  shift, and go to state 350


State 345

  113 mult_rule: '(' IDENT '=' IDENT '*' IDENT â¢ ')' ARROW body

    ')'  shift, and go to state 351


State 346

  116 inverse_rule: '(' IDENT '=' '~' IDENT ')' â¢ ARROW body

    ARROW  shift, and go to state 352


State 347

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' â¢ additive_rule negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 267

    additive_rule  go to state 353


State 348

  112 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' â¢ ARROW body

    ARROW  shift, and go to state 354


State 349

  114 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW â¢ body

    '{'  shift, and go to state 259

    body  go to state 355


State 350

  115 negation_rule: '(' IDENT '=' '-' IDENT â¢ ')' ARROW body

    ')'  shift, and go to state 356


State 351

  113 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' â¢ ARROW body

    ARROW  shift, and go to state 357


State 352

  116 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW â¢ body

    '{'  shift, and go to state 259

    body  go to state 358


State 353

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule â¢ negation_rule identity_rule mult_rule '}' ';'

    '('  shift, and go to state 304

    negation_rule  go to state 359


State 354

  112 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW â¢ body

    '{'  shift, and go to state 259

    body  go to state 360


State 355

  114 identity_rule: '(' IDENT '=' LIT_INT ')' ARROW body â¢

    $default  reduce using rule 114 (identity_rule)


State 356

  115 negation_rule: '(' IDENT '=' '-' IDENT ')' â¢ ARROW body

    ARROW  shift, and go to state 361


State 357

  113 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW â¢ body

    '{'  shift, and go to state 259

    body  go to state 362


State 358

  116 inverse_rule: '(' IDENT '=' '~' IDENT ')' ARROW body â¢

    $default  reduce using rule 116 (inverse_rule)


State 359

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule â¢ identity_rule mult_rule '}' ';'

    '('  shift, and go to state 282

    identity_rule  go to state 363


State 360

  112 additive_rule: '(' IDENT '=' IDENT '+' IDENT ')' ARROW body â¢

    $default  reduce using rule 112 (additive_rule)


State 361

  115 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW â¢ body

    '{'  shift, and go to state 259

    body  go to state 364


State 362

  113 mult_rule: '(' IDENT '=' IDENT '*' IDENT ')' ARROW body â¢

    $default  reduce using rule 113 (mult_rule)


State 363

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule â¢ mult_rule '}' ';'

    '('  shift, and go to state 269

    mult_rule  go to state 365


State 364

  115 negation_rule: '(' IDENT '=' '-' IDENT ')' ARROW body â¢

    $default  reduce using rule 115 (negation_rule)


State 365

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule â¢ '}' ';'

    '}'  shift, and go to state 366


State 366

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' â¢ ';'

    ';'  shift, and go to state 367


State 367

  111 archetype_claim: KW_CLAIM IDENT KW_IS KW_SPACE '{' KW_FIELD '=' '(' type ')' ';' additive_rule negation_rule identity_rule mult_rule '}' ';' â¢

    $default  reduce using rule 111 (archetype_claim)
