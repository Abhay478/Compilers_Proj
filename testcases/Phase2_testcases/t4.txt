enum _Bar {
    Zero,
    One,
    Two
}

struct Bar {
    a: _Bar
}

let Z0: Cyclic<3>;
let Z1: Cyclic<3>;
let Z2: Cyclic<3>;

forge (cyc: Cyclic<3>) as (b: Bar) {
    let a: u8 = cyc as (u8);
    if(a == 0) {
        b.a = _Bar::Zero;
    }
    if(a == 1) {
        b.a = _Bar::One;
    }
    else {
        b.a = _Bar::Two;
    }
}

forge (a: Bar) as (b: Cyclic<3>) {
    if(a.a == _Bar::Zero) {
        b = Z0;
    }
    else if(a.a == _Bar::One) {
        b = Z1;
    }
    else {
        b = Z2;
    }
}

// This claim block would be better repersented via a claim statement.
claim Bar is Group {
    (c = 0) => {
        c.a = _Bar::Zero;
    }

    (c = x + y) => {
        c = (x as (Cyclic<3>) + y as (Cyclic<3>)) as (Bar);
    }

    (c = -x) => {
        c = (- (x as (Cyclic<3>))) as (Bar);
    }
}

struct Foo {
    a: u8,
    var: Bar
}

forge (a: u8) as (out: Foo) {
    out.a = a;
    out.var.a = _Bar::Zero;
}

forge (arg: (u8, Bar)) as (out: Foo) {
    out.a = arg.0;
    out.var = arg.1;
}

claim Foo is Group {
    (c = 0) => {
        let temp: Bar;
        temp.a = _Bar::Zero;
        c = (0, temp) as (Foo);
    }

    (out = x + y) => {
        out.a = x.a + y.a;
        out.var = x.var + y.var;
    }

    (out = -x) => {
        out.a = -x.a;
        out.var = -x.var;
    }

    
}

fn main() : i32{
    print("Hello world.\n");
    let q: Foo = 0 as (Foo);
    let qq: Foo = 1 as (Foo);

    let qqq: Foo = q + qq;
}
